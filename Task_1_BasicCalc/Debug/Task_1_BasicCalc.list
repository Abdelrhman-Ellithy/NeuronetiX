
Task_1_BasicCalc.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000011f0  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08001320  08001320  00011320  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001338  08001338  0002005c  2**0
                  CONTENTS
  4 .ARM          00000008  08001338  08001338  00011338  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08001340  08001340  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001340  08001340  00011340  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001344  08001344  00011344  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  08001348  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000090  2000005c  080013a4  0002005c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000ec  080013a4  000200ec  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020085  2**0
                  CONTENTS, READONLY
 13 .debug_info   000020c6  00000000  00000000  000200c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000d6f  00000000  00000000  0002218e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000370  00000000  00000000  00022f00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000276  00000000  00000000  00023270  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00000946  00000000  00000000  000234e6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000018fe  00000000  00000000  00023e2c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0000648c  00000000  00000000  0002572a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00000b44  00000000  00000000  0002bbb8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005d  00000000  00000000  0002c6fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	2000005c 	.word	0x2000005c
 800014c:	00000000 	.word	0x00000000
 8000150:	08001308 	.word	0x08001308

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000060 	.word	0x20000060
 800016c:	08001308 	.word	0x08001308

08000170 <__aeabi_uldivmod>:
 8000170:	b953      	cbnz	r3, 8000188 <__aeabi_uldivmod+0x18>
 8000172:	b94a      	cbnz	r2, 8000188 <__aeabi_uldivmod+0x18>
 8000174:	2900      	cmp	r1, #0
 8000176:	bf08      	it	eq
 8000178:	2800      	cmpeq	r0, #0
 800017a:	bf1c      	itt	ne
 800017c:	f04f 31ff 	movne.w	r1, #4294967295
 8000180:	f04f 30ff 	movne.w	r0, #4294967295
 8000184:	f000 b972 	b.w	800046c <__aeabi_idiv0>
 8000188:	f1ad 0c08 	sub.w	ip, sp, #8
 800018c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000190:	f000 f806 	bl	80001a0 <__udivmoddi4>
 8000194:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000198:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800019c:	b004      	add	sp, #16
 800019e:	4770      	bx	lr

080001a0 <__udivmoddi4>:
 80001a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001a4:	9e08      	ldr	r6, [sp, #32]
 80001a6:	460d      	mov	r5, r1
 80001a8:	4604      	mov	r4, r0
 80001aa:	468e      	mov	lr, r1
 80001ac:	2b00      	cmp	r3, #0
 80001ae:	d14c      	bne.n	800024a <__udivmoddi4+0xaa>
 80001b0:	428a      	cmp	r2, r1
 80001b2:	4694      	mov	ip, r2
 80001b4:	d967      	bls.n	8000286 <__udivmoddi4+0xe6>
 80001b6:	fab2 f382 	clz	r3, r2
 80001ba:	b153      	cbz	r3, 80001d2 <__udivmoddi4+0x32>
 80001bc:	fa02 fc03 	lsl.w	ip, r2, r3
 80001c0:	f1c3 0220 	rsb	r2, r3, #32
 80001c4:	fa01 fe03 	lsl.w	lr, r1, r3
 80001c8:	fa20 f202 	lsr.w	r2, r0, r2
 80001cc:	ea42 0e0e 	orr.w	lr, r2, lr
 80001d0:	409c      	lsls	r4, r3
 80001d2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80001d6:	fbbe f1f7 	udiv	r1, lr, r7
 80001da:	fa1f f58c 	uxth.w	r5, ip
 80001de:	fb07 ee11 	mls	lr, r7, r1, lr
 80001e2:	fb01 f005 	mul.w	r0, r1, r5
 80001e6:	0c22      	lsrs	r2, r4, #16
 80001e8:	ea42 420e 	orr.w	r2, r2, lr, lsl #16
 80001ec:	4290      	cmp	r0, r2
 80001ee:	d90a      	bls.n	8000206 <__udivmoddi4+0x66>
 80001f0:	eb1c 0202 	adds.w	r2, ip, r2
 80001f4:	f101 3eff 	add.w	lr, r1, #4294967295
 80001f8:	f080 8119 	bcs.w	800042e <__udivmoddi4+0x28e>
 80001fc:	4290      	cmp	r0, r2
 80001fe:	f240 8116 	bls.w	800042e <__udivmoddi4+0x28e>
 8000202:	3902      	subs	r1, #2
 8000204:	4462      	add	r2, ip
 8000206:	1a12      	subs	r2, r2, r0
 8000208:	fbb2 f0f7 	udiv	r0, r2, r7
 800020c:	fb07 2210 	mls	r2, r7, r0, r2
 8000210:	fb00 f505 	mul.w	r5, r0, r5
 8000214:	b2a4      	uxth	r4, r4
 8000216:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800021a:	42a5      	cmp	r5, r4
 800021c:	d90a      	bls.n	8000234 <__udivmoddi4+0x94>
 800021e:	eb1c 0404 	adds.w	r4, ip, r4
 8000222:	f100 32ff 	add.w	r2, r0, #4294967295
 8000226:	f080 8104 	bcs.w	8000432 <__udivmoddi4+0x292>
 800022a:	42a5      	cmp	r5, r4
 800022c:	f240 8101 	bls.w	8000432 <__udivmoddi4+0x292>
 8000230:	4464      	add	r4, ip
 8000232:	3802      	subs	r0, #2
 8000234:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000238:	2100      	movs	r1, #0
 800023a:	1b64      	subs	r4, r4, r5
 800023c:	b11e      	cbz	r6, 8000246 <__udivmoddi4+0xa6>
 800023e:	40dc      	lsrs	r4, r3
 8000240:	2300      	movs	r3, #0
 8000242:	e9c6 4300 	strd	r4, r3, [r6]
 8000246:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800024a:	428b      	cmp	r3, r1
 800024c:	d908      	bls.n	8000260 <__udivmoddi4+0xc0>
 800024e:	2e00      	cmp	r6, #0
 8000250:	f000 80ea 	beq.w	8000428 <__udivmoddi4+0x288>
 8000254:	2100      	movs	r1, #0
 8000256:	e9c6 0500 	strd	r0, r5, [r6]
 800025a:	4608      	mov	r0, r1
 800025c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000260:	fab3 f183 	clz	r1, r3
 8000264:	2900      	cmp	r1, #0
 8000266:	d148      	bne.n	80002fa <__udivmoddi4+0x15a>
 8000268:	42ab      	cmp	r3, r5
 800026a:	d302      	bcc.n	8000272 <__udivmoddi4+0xd2>
 800026c:	4282      	cmp	r2, r0
 800026e:	f200 80f8 	bhi.w	8000462 <__udivmoddi4+0x2c2>
 8000272:	1a84      	subs	r4, r0, r2
 8000274:	eb65 0203 	sbc.w	r2, r5, r3
 8000278:	2001      	movs	r0, #1
 800027a:	4696      	mov	lr, r2
 800027c:	2e00      	cmp	r6, #0
 800027e:	d0e2      	beq.n	8000246 <__udivmoddi4+0xa6>
 8000280:	e9c6 4e00 	strd	r4, lr, [r6]
 8000284:	e7df      	b.n	8000246 <__udivmoddi4+0xa6>
 8000286:	b902      	cbnz	r2, 800028a <__udivmoddi4+0xea>
 8000288:	deff      	udf	#255	; 0xff
 800028a:	fab2 f382 	clz	r3, r2
 800028e:	2b00      	cmp	r3, #0
 8000290:	f040 808e 	bne.w	80003b0 <__udivmoddi4+0x210>
 8000294:	1a88      	subs	r0, r1, r2
 8000296:	2101      	movs	r1, #1
 8000298:	0c17      	lsrs	r7, r2, #16
 800029a:	fa1f fe82 	uxth.w	lr, r2
 800029e:	fbb0 f5f7 	udiv	r5, r0, r7
 80002a2:	fb07 0015 	mls	r0, r7, r5, r0
 80002a6:	0c22      	lsrs	r2, r4, #16
 80002a8:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80002ac:	fb0e f005 	mul.w	r0, lr, r5
 80002b0:	4290      	cmp	r0, r2
 80002b2:	d908      	bls.n	80002c6 <__udivmoddi4+0x126>
 80002b4:	eb1c 0202 	adds.w	r2, ip, r2
 80002b8:	f105 38ff 	add.w	r8, r5, #4294967295
 80002bc:	d202      	bcs.n	80002c4 <__udivmoddi4+0x124>
 80002be:	4290      	cmp	r0, r2
 80002c0:	f200 80cc 	bhi.w	800045c <__udivmoddi4+0x2bc>
 80002c4:	4645      	mov	r5, r8
 80002c6:	1a12      	subs	r2, r2, r0
 80002c8:	fbb2 f0f7 	udiv	r0, r2, r7
 80002cc:	fb07 2210 	mls	r2, r7, r0, r2
 80002d0:	fb0e fe00 	mul.w	lr, lr, r0
 80002d4:	b2a4      	uxth	r4, r4
 80002d6:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002da:	45a6      	cmp	lr, r4
 80002dc:	d908      	bls.n	80002f0 <__udivmoddi4+0x150>
 80002de:	eb1c 0404 	adds.w	r4, ip, r4
 80002e2:	f100 32ff 	add.w	r2, r0, #4294967295
 80002e6:	d202      	bcs.n	80002ee <__udivmoddi4+0x14e>
 80002e8:	45a6      	cmp	lr, r4
 80002ea:	f200 80b4 	bhi.w	8000456 <__udivmoddi4+0x2b6>
 80002ee:	4610      	mov	r0, r2
 80002f0:	eba4 040e 	sub.w	r4, r4, lr
 80002f4:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80002f8:	e7a0      	b.n	800023c <__udivmoddi4+0x9c>
 80002fa:	f1c1 0720 	rsb	r7, r1, #32
 80002fe:	408b      	lsls	r3, r1
 8000300:	fa22 fc07 	lsr.w	ip, r2, r7
 8000304:	ea4c 0c03 	orr.w	ip, ip, r3
 8000308:	fa25 fa07 	lsr.w	sl, r5, r7
 800030c:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000310:	fbba f8f9 	udiv	r8, sl, r9
 8000314:	408d      	lsls	r5, r1
 8000316:	fa20 f307 	lsr.w	r3, r0, r7
 800031a:	fb09 aa18 	mls	sl, r9, r8, sl
 800031e:	fa1f fe8c 	uxth.w	lr, ip
 8000322:	432b      	orrs	r3, r5
 8000324:	fa00 f501 	lsl.w	r5, r0, r1
 8000328:	fb08 f00e 	mul.w	r0, r8, lr
 800032c:	0c1c      	lsrs	r4, r3, #16
 800032e:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8000332:	42a0      	cmp	r0, r4
 8000334:	fa02 f201 	lsl.w	r2, r2, r1
 8000338:	d90b      	bls.n	8000352 <__udivmoddi4+0x1b2>
 800033a:	eb1c 0404 	adds.w	r4, ip, r4
 800033e:	f108 3aff 	add.w	sl, r8, #4294967295
 8000342:	f080 8086 	bcs.w	8000452 <__udivmoddi4+0x2b2>
 8000346:	42a0      	cmp	r0, r4
 8000348:	f240 8083 	bls.w	8000452 <__udivmoddi4+0x2b2>
 800034c:	f1a8 0802 	sub.w	r8, r8, #2
 8000350:	4464      	add	r4, ip
 8000352:	1a24      	subs	r4, r4, r0
 8000354:	b298      	uxth	r0, r3
 8000356:	fbb4 f3f9 	udiv	r3, r4, r9
 800035a:	fb09 4413 	mls	r4, r9, r3, r4
 800035e:	fb03 fe0e 	mul.w	lr, r3, lr
 8000362:	ea40 4404 	orr.w	r4, r0, r4, lsl #16
 8000366:	45a6      	cmp	lr, r4
 8000368:	d908      	bls.n	800037c <__udivmoddi4+0x1dc>
 800036a:	eb1c 0404 	adds.w	r4, ip, r4
 800036e:	f103 30ff 	add.w	r0, r3, #4294967295
 8000372:	d26a      	bcs.n	800044a <__udivmoddi4+0x2aa>
 8000374:	45a6      	cmp	lr, r4
 8000376:	d968      	bls.n	800044a <__udivmoddi4+0x2aa>
 8000378:	3b02      	subs	r3, #2
 800037a:	4464      	add	r4, ip
 800037c:	ea43 4008 	orr.w	r0, r3, r8, lsl #16
 8000380:	fba0 9302 	umull	r9, r3, r0, r2
 8000384:	eba4 040e 	sub.w	r4, r4, lr
 8000388:	429c      	cmp	r4, r3
 800038a:	46c8      	mov	r8, r9
 800038c:	469e      	mov	lr, r3
 800038e:	d354      	bcc.n	800043a <__udivmoddi4+0x29a>
 8000390:	d051      	beq.n	8000436 <__udivmoddi4+0x296>
 8000392:	2e00      	cmp	r6, #0
 8000394:	d067      	beq.n	8000466 <__udivmoddi4+0x2c6>
 8000396:	ebb5 0308 	subs.w	r3, r5, r8
 800039a:	eb64 040e 	sbc.w	r4, r4, lr
 800039e:	40cb      	lsrs	r3, r1
 80003a0:	fa04 f707 	lsl.w	r7, r4, r7
 80003a4:	431f      	orrs	r7, r3
 80003a6:	40cc      	lsrs	r4, r1
 80003a8:	e9c6 7400 	strd	r7, r4, [r6]
 80003ac:	2100      	movs	r1, #0
 80003ae:	e74a      	b.n	8000246 <__udivmoddi4+0xa6>
 80003b0:	fa02 fc03 	lsl.w	ip, r2, r3
 80003b4:	f1c3 0020 	rsb	r0, r3, #32
 80003b8:	40c1      	lsrs	r1, r0
 80003ba:	409d      	lsls	r5, r3
 80003bc:	fa24 f000 	lsr.w	r0, r4, r0
 80003c0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003c4:	4328      	orrs	r0, r5
 80003c6:	fbb1 f5f7 	udiv	r5, r1, r7
 80003ca:	fb07 1115 	mls	r1, r7, r5, r1
 80003ce:	fa1f fe8c 	uxth.w	lr, ip
 80003d2:	0c02      	lsrs	r2, r0, #16
 80003d4:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80003d8:	fb05 f10e 	mul.w	r1, r5, lr
 80003dc:	4291      	cmp	r1, r2
 80003de:	fa04 f403 	lsl.w	r4, r4, r3
 80003e2:	d908      	bls.n	80003f6 <__udivmoddi4+0x256>
 80003e4:	eb1c 0202 	adds.w	r2, ip, r2
 80003e8:	f105 38ff 	add.w	r8, r5, #4294967295
 80003ec:	d22f      	bcs.n	800044e <__udivmoddi4+0x2ae>
 80003ee:	4291      	cmp	r1, r2
 80003f0:	d92d      	bls.n	800044e <__udivmoddi4+0x2ae>
 80003f2:	3d02      	subs	r5, #2
 80003f4:	4462      	add	r2, ip
 80003f6:	1a52      	subs	r2, r2, r1
 80003f8:	fbb2 f1f7 	udiv	r1, r2, r7
 80003fc:	fb07 2211 	mls	r2, r7, r1, r2
 8000400:	b280      	uxth	r0, r0
 8000402:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 8000406:	fb01 f20e 	mul.w	r2, r1, lr
 800040a:	4282      	cmp	r2, r0
 800040c:	d908      	bls.n	8000420 <__udivmoddi4+0x280>
 800040e:	eb1c 0000 	adds.w	r0, ip, r0
 8000412:	f101 38ff 	add.w	r8, r1, #4294967295
 8000416:	d216      	bcs.n	8000446 <__udivmoddi4+0x2a6>
 8000418:	4282      	cmp	r2, r0
 800041a:	d914      	bls.n	8000446 <__udivmoddi4+0x2a6>
 800041c:	3902      	subs	r1, #2
 800041e:	4460      	add	r0, ip
 8000420:	1a80      	subs	r0, r0, r2
 8000422:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000426:	e73a      	b.n	800029e <__udivmoddi4+0xfe>
 8000428:	4631      	mov	r1, r6
 800042a:	4630      	mov	r0, r6
 800042c:	e70b      	b.n	8000246 <__udivmoddi4+0xa6>
 800042e:	4671      	mov	r1, lr
 8000430:	e6e9      	b.n	8000206 <__udivmoddi4+0x66>
 8000432:	4610      	mov	r0, r2
 8000434:	e6fe      	b.n	8000234 <__udivmoddi4+0x94>
 8000436:	454d      	cmp	r5, r9
 8000438:	d2ab      	bcs.n	8000392 <__udivmoddi4+0x1f2>
 800043a:	ebb9 0802 	subs.w	r8, r9, r2
 800043e:	eb63 0e0c 	sbc.w	lr, r3, ip
 8000442:	3801      	subs	r0, #1
 8000444:	e7a5      	b.n	8000392 <__udivmoddi4+0x1f2>
 8000446:	4641      	mov	r1, r8
 8000448:	e7ea      	b.n	8000420 <__udivmoddi4+0x280>
 800044a:	4603      	mov	r3, r0
 800044c:	e796      	b.n	800037c <__udivmoddi4+0x1dc>
 800044e:	4645      	mov	r5, r8
 8000450:	e7d1      	b.n	80003f6 <__udivmoddi4+0x256>
 8000452:	46d0      	mov	r8, sl
 8000454:	e77d      	b.n	8000352 <__udivmoddi4+0x1b2>
 8000456:	4464      	add	r4, ip
 8000458:	3802      	subs	r0, #2
 800045a:	e749      	b.n	80002f0 <__udivmoddi4+0x150>
 800045c:	3d02      	subs	r5, #2
 800045e:	4462      	add	r2, ip
 8000460:	e731      	b.n	80002c6 <__udivmoddi4+0x126>
 8000462:	4608      	mov	r0, r1
 8000464:	e70a      	b.n	800027c <__udivmoddi4+0xdc>
 8000466:	4631      	mov	r1, r6
 8000468:	e6ed      	b.n	8000246 <__udivmoddi4+0xa6>
 800046a:	bf00      	nop

0800046c <__aeabi_idiv0>:
 800046c:	4770      	bx	lr
 800046e:	bf00      	nop

08000470 <CLCD_voidInit>:

* Breif : This Function Apply initialization sequence for LCD module
* Parameters : nothing
* return : nothing
*/
void CLCD_voidInit ( void ){
 8000470:	b580      	push	{r7, lr}
 8000472:	af00      	add	r7, sp, #0
	//<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<      4 Bits Mode       >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

	#elif   CLCD_MODE == 4

	// 1- must wait more than 30 ms before any action (VDD rises to 4.5 v)
	_delay_ms(35);
 8000474:	2023      	movs	r0, #35	; 0x23
 8000476:	f000 fdad 	bl	8000fd4 <_delay_ms>
	/*return home*/
	CLCD_voidSendCommand( lcd_Home );
 800047a:	2002      	movs	r0, #2
 800047c:	f000 f83f 	bl	80004fe <CLCD_voidSendCommand>
	_delay_ms(20);
 8000480:	2014      	movs	r0, #20
 8000482:	f000 fda7 	bl	8000fd4 <_delay_ms>

	/*FUNCTION SET Command*/
	CLCD_voidSendCommand( FOUR_BITS ); // 4 Bit Mode
 8000486:	2028      	movs	r0, #40	; 0x28
 8000488:	f000 f839 	bl	80004fe <CLCD_voidSendCommand>
	_delay_ms(1);
 800048c:	2001      	movs	r0, #1
 800048e:	f000 fda1 	bl	8000fd4 <_delay_ms>
	/* DISPLAY & Cursor (ON / OFF) Control */
	CLCD_voidSendCommand( Cursor_Mode );
 8000492:	200c      	movs	r0, #12
 8000494:	f000 f833 	bl	80004fe <CLCD_voidSendCommand>
	_delay_ms(1);
 8000498:	2001      	movs	r0, #1
 800049a:	f000 fd9b 	bl	8000fd4 <_delay_ms>
	/* DISPLAY CLEAR */
	CLCD_voidClearScreen();
 800049e:	f000 f911 	bl	80006c4 <CLCD_voidClearScreen>
	/* ENTRY MODE  Set*/
	CLCD_voidSendCommand( lcd_EntryMode );
 80004a2:	2006      	movs	r0, #6
 80004a4:	f000 f82b 	bl	80004fe <CLCD_voidSendCommand>
	_delay_ms(1);
 80004a8:	2001      	movs	r0, #1
 80004aa:	f000 fd93 	bl	8000fd4 <_delay_ms>
	#endif




}
 80004ae:	bf00      	nop
 80004b0:	bd80      	pop	{r7, pc}

080004b2 <CLCD_voidSendData>:
* Breif : This Function send data to the port which is defined in config.h
* Parameters :
            => Copy_u8Data --> Data that you want to display (for every pixel )
* return : nothing
*/
void CLCD_voidSendData    ( u8 Copy_u8Data ){
 80004b2:	b580      	push	{r7, lr}
 80004b4:	b082      	sub	sp, #8
 80004b6:	af00      	add	r7, sp, #0
 80004b8:	4603      	mov	r3, r0
 80004ba:	71fb      	strb	r3, [r7, #7]
	GPIO_WritePinValue( CLCD_CONTROL_PORT , CLCD_RS , GPIO_HIGH );
	CLCD_voidSendFallingEdge();

	//<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<      4 Bits Mode       >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
	#elif   CLCD_MODE == 4
	GPIO_WritePinValue( CLCD_CONTROL_PORT , CLCD_RS , GPIO_HIGH );
 80004bc:	2201      	movs	r2, #1
 80004be:	2100      	movs	r1, #0
 80004c0:	2001      	movs	r0, #1
 80004c2:	f000 fbf7 	bl	8000cb4 <GPIO_WritePinValue>
	GPIO_Nibble_Write ( CLCD_DATA_PORT, CLCD_DATA_PORT_NIBBLE   , (Copy_u8Data>>4) ); // send the most 4 bits of data to high nibbles
 80004c6:	79fb      	ldrb	r3, [r7, #7]
 80004c8:	091b      	lsrs	r3, r3, #4
 80004ca:	b2db      	uxtb	r3, r3
 80004cc:	461a      	mov	r2, r3
 80004ce:	210c      	movs	r1, #12
 80004d0:	2001      	movs	r0, #1
 80004d2:	f000 fa8d 	bl	80009f0 <GPIO_Nibble_Write>
	CLCD_voidSendFallingEdge();
 80004d6:	f000 f905 	bl	80006e4 <CLCD_voidSendFallingEdge>
	GPIO_Nibble_Write ( CLCD_DATA_PORT, CLCD_DATA_PORT_NIBBLE    , (Copy_u8Data&0x0f)        );
 80004da:	79fb      	ldrb	r3, [r7, #7]
 80004dc:	f003 030f 	and.w	r3, r3, #15
 80004e0:	b2db      	uxtb	r3, r3
 80004e2:	461a      	mov	r2, r3
 80004e4:	210c      	movs	r1, #12
 80004e6:	2001      	movs	r0, #1
 80004e8:	f000 fa82 	bl	80009f0 <GPIO_Nibble_Write>
	CLCD_voidSendFallingEdge();
 80004ec:	f000 f8fa 	bl	80006e4 <CLCD_voidSendFallingEdge>

	// send the most 4 bits of data to high nibbles
	#endif
	_delay_ms(1);
 80004f0:	2001      	movs	r0, #1
 80004f2:	f000 fd6f 	bl	8000fd4 <_delay_ms>
}
 80004f6:	bf00      	nop
 80004f8:	3708      	adds	r7, #8
 80004fa:	46bd      	mov	sp, r7
 80004fc:	bd80      	pop	{r7, pc}

080004fe <CLCD_voidSendCommand>:
* Parameters :
            => Copy_u8Command --> Command number
* return : nothing
*Hint : RS pin Mode is the difference between this function and the previous (CLCD_voidSendData)
*/
void CLCD_voidSendCommand ( u8 Copy_u8Command ){
 80004fe:	b580      	push	{r7, lr}
 8000500:	b082      	sub	sp, #8
 8000502:	af00      	add	r7, sp, #0
 8000504:	4603      	mov	r3, r0
 8000506:	71fb      	strb	r3, [r7, #7]
	GPIO_WritePinValue (CLCD_CONTROL_PORT, CLCD_RS , GPIO_LOW );
	CLCD_voidSendFallingEdge();

	//<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<      4 Bits Mode       >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
	#elif   CLCD_MODE == 4
		GPIO_WritePinValue( CLCD_CONTROL_PORT , CLCD_RS , GPIO_LOW );
 8000508:	2200      	movs	r2, #0
 800050a:	2100      	movs	r1, #0
 800050c:	2001      	movs	r0, #1
 800050e:	f000 fbd1 	bl	8000cb4 <GPIO_WritePinValue>
		GPIO_Nibble_Write ( CLCD_DATA_PORT, CLCD_DATA_PORT_NIBBLE    , (Copy_u8Command>>4) ); // send the most 4 bits of data to high nibbles
 8000512:	79fb      	ldrb	r3, [r7, #7]
 8000514:	091b      	lsrs	r3, r3, #4
 8000516:	b2db      	uxtb	r3, r3
 8000518:	461a      	mov	r2, r3
 800051a:	210c      	movs	r1, #12
 800051c:	2001      	movs	r0, #1
 800051e:	f000 fa67 	bl	80009f0 <GPIO_Nibble_Write>
		CLCD_voidSendFallingEdge();
 8000522:	f000 f8df 	bl	80006e4 <CLCD_voidSendFallingEdge>
		GPIO_Nibble_Write ( CLCD_DATA_PORT, CLCD_DATA_PORT_NIBBLE    , (Copy_u8Command&0x0f)        );
 8000526:	79fb      	ldrb	r3, [r7, #7]
 8000528:	f003 030f 	and.w	r3, r3, #15
 800052c:	b2db      	uxtb	r3, r3
 800052e:	461a      	mov	r2, r3
 8000530:	210c      	movs	r1, #12
 8000532:	2001      	movs	r0, #1
 8000534:	f000 fa5c 	bl	80009f0 <GPIO_Nibble_Write>
		CLCD_voidSendFallingEdge();
 8000538:	f000 f8d4 	bl	80006e4 <CLCD_voidSendFallingEdge>

	#endif
		_delay_ms(1);
 800053c:	2001      	movs	r0, #1
 800053e:	f000 fd49 	bl	8000fd4 <_delay_ms>

}
 8000542:	bf00      	nop
 8000544:	3708      	adds	r7, #8
 8000546:	46bd      	mov	sp, r7
 8000548:	bd80      	pop	{r7, pc}

0800054a <CLCD_voidSendString>:
* Breif : This Function send string to the port which is defined in config.h
* Parameters :
            => * Copy_u8ptrString  --> Pointer to the string
* return : nothing
*/
void CLCD_voidSendString  (  u8 * Copy_u8ptrString ){
 800054a:	b580      	push	{r7, lr}
 800054c:	b084      	sub	sp, #16
 800054e:	af00      	add	r7, sp, #0
 8000550:	6078      	str	r0, [r7, #4]

	u8 LOC_u8Iterator = 0 ;
 8000552:	2300      	movs	r3, #0
 8000554:	73fb      	strb	r3, [r7, #15]

	while( Copy_u8ptrString[LOC_u8Iterator] != '\0' ){
 8000556:	e009      	b.n	800056c <CLCD_voidSendString+0x22>

		CLCD_voidSendData( Copy_u8ptrString[LOC_u8Iterator] );
 8000558:	7bfb      	ldrb	r3, [r7, #15]
 800055a:	687a      	ldr	r2, [r7, #4]
 800055c:	4413      	add	r3, r2
 800055e:	781b      	ldrb	r3, [r3, #0]
 8000560:	4618      	mov	r0, r3
 8000562:	f7ff ffa6 	bl	80004b2 <CLCD_voidSendData>
		LOC_u8Iterator++ ;
 8000566:	7bfb      	ldrb	r3, [r7, #15]
 8000568:	3301      	adds	r3, #1
 800056a:	73fb      	strb	r3, [r7, #15]
	while( Copy_u8ptrString[LOC_u8Iterator] != '\0' ){
 800056c:	7bfb      	ldrb	r3, [r7, #15]
 800056e:	687a      	ldr	r2, [r7, #4]
 8000570:	4413      	add	r3, r2
 8000572:	781b      	ldrb	r3, [r3, #0]
 8000574:	2b00      	cmp	r3, #0
 8000576:	d1ef      	bne.n	8000558 <CLCD_voidSendString+0xe>

	}

}
 8000578:	bf00      	nop
 800057a:	bf00      	nop
 800057c:	3710      	adds	r7, #16
 800057e:	46bd      	mov	sp, r7
 8000580:	bd80      	pop	{r7, pc}

08000582 <CLCD_voidSendNumber>:
* Breif : This Function send number to the port which is defined in config.h
* Parameters :
            => Copy_u64Number --> number that you want to display
* return : nothing
*/
void CLCD_voidSendNumber   ( u64 Copy_u64Number    ){
 8000582:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8000586:	b086      	sub	sp, #24
 8000588:	af00      	add	r7, sp, #0
 800058a:	e9c7 0102 	strd	r0, r1, [r7, #8]

	u64 LOC_u64Reversed = 1 ;
 800058e:	f04f 0201 	mov.w	r2, #1
 8000592:	f04f 0300 	mov.w	r3, #0
 8000596:	e9c7 2304 	strd	r2, r3, [r7, #16]

	if( Copy_u64Number == 0 ){ CLCD_voidSendData('0'); }
 800059a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800059e:	4313      	orrs	r3, r2
 80005a0:	d138      	bne.n	8000614 <CLCD_voidSendNumber+0x92>
 80005a2:	2030      	movs	r0, #48	; 0x30
 80005a4:	f7ff ff85 	bl	80004b2 <CLCD_voidSendData>

		}

	}

}
 80005a8:	e058      	b.n	800065c <CLCD_voidSendNumber+0xda>
			LOC_u64Reversed = ( LOC_u64Reversed * 10 ) + ( Copy_u64Number % 10 );
 80005aa:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 80005ae:	4642      	mov	r2, r8
 80005b0:	464b      	mov	r3, r9
 80005b2:	f04f 0000 	mov.w	r0, #0
 80005b6:	f04f 0100 	mov.w	r1, #0
 80005ba:	0099      	lsls	r1, r3, #2
 80005bc:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 80005c0:	0090      	lsls	r0, r2, #2
 80005c2:	4602      	mov	r2, r0
 80005c4:	460b      	mov	r3, r1
 80005c6:	eb12 0408 	adds.w	r4, r2, r8
 80005ca:	eb43 0509 	adc.w	r5, r3, r9
 80005ce:	1923      	adds	r3, r4, r4
 80005d0:	603b      	str	r3, [r7, #0]
 80005d2:	eb45 0305 	adc.w	r3, r5, r5
 80005d6:	607b      	str	r3, [r7, #4]
 80005d8:	e9d7 4500 	ldrd	r4, r5, [r7]
 80005dc:	46a0      	mov	r8, r4
 80005de:	46a9      	mov	r9, r5
 80005e0:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80005e4:	f04f 020a 	mov.w	r2, #10
 80005e8:	f04f 0300 	mov.w	r3, #0
 80005ec:	f7ff fdc0 	bl	8000170 <__aeabi_uldivmod>
 80005f0:	eb18 0a02 	adds.w	sl, r8, r2
 80005f4:	eb49 0b03 	adc.w	fp, r9, r3
 80005f8:	e9c7 ab04 	strd	sl, fp, [r7, #16]
			Copy_u64Number /= 10 ;
 80005fc:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8000600:	f04f 020a 	mov.w	r2, #10
 8000604:	f04f 0300 	mov.w	r3, #0
 8000608:	f7ff fdb2 	bl	8000170 <__aeabi_uldivmod>
 800060c:	4602      	mov	r2, r0
 800060e:	460b      	mov	r3, r1
 8000610:	e9c7 2302 	strd	r2, r3, [r7, #8]
		while( Copy_u64Number != 0 ){
 8000614:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8000618:	4313      	orrs	r3, r2
 800061a:	d1c6      	bne.n	80005aa <CLCD_voidSendNumber+0x28>
		while( LOC_u64Reversed != 1 ){
 800061c:	e019      	b.n	8000652 <CLCD_voidSendNumber+0xd0>
			CLCD_voidSendData( ( LOC_u64Reversed % 10 ) + 48 );
 800061e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8000622:	f04f 020a 	mov.w	r2, #10
 8000626:	f04f 0300 	mov.w	r3, #0
 800062a:	f7ff fda1 	bl	8000170 <__aeabi_uldivmod>
 800062e:	b2d3      	uxtb	r3, r2
 8000630:	3330      	adds	r3, #48	; 0x30
 8000632:	b2db      	uxtb	r3, r3
 8000634:	4618      	mov	r0, r3
 8000636:	f7ff ff3c 	bl	80004b2 <CLCD_voidSendData>
			LOC_u64Reversed /= 10 ;
 800063a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800063e:	f04f 020a 	mov.w	r2, #10
 8000642:	f04f 0300 	mov.w	r3, #0
 8000646:	f7ff fd93 	bl	8000170 <__aeabi_uldivmod>
 800064a:	4602      	mov	r2, r0
 800064c:	460b      	mov	r3, r1
 800064e:	e9c7 2304 	strd	r2, r3, [r7, #16]
		while( LOC_u64Reversed != 1 ){
 8000652:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8000656:	1e51      	subs	r1, r2, #1
 8000658:	430b      	orrs	r3, r1
 800065a:	d1e0      	bne.n	800061e <CLCD_voidSendNumber+0x9c>
}
 800065c:	bf00      	nop
 800065e:	3718      	adds	r7, #24
 8000660:	46bd      	mov	sp, r7
 8000662:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08000666 <CLCD_voidSetPosition>:
*Hint :-
   In This function we send a command which =0b1xxxxxxx
   MSB = 1  ===> refers that it is command to set cursor
   xxxxxxx  ===> refers to AC ( Address Counter 7Bits / DDRAM Locations 128Location )
*/
void CLCD_voidSetPosition ( u8 Copy_u8Row , u8 Copy_u8Col ){
 8000666:	b580      	push	{r7, lr}
 8000668:	b084      	sub	sp, #16
 800066a:	af00      	add	r7, sp, #0
 800066c:	4603      	mov	r3, r0
 800066e:	460a      	mov	r2, r1
 8000670:	71fb      	strb	r3, [r7, #7]
 8000672:	4613      	mov	r3, r2
 8000674:	71bb      	strb	r3, [r7, #6]

	u8 LOC_u8data ;
	#if CLCD_Type == CLCd_2_16
		if(Copy_u8Row>2||Copy_u8Row<1||Copy_u8Col>16||Copy_u8Col<1)  //check
 8000676:	79fb      	ldrb	r3, [r7, #7]
 8000678:	2b02      	cmp	r3, #2
 800067a:	d808      	bhi.n	800068e <CLCD_voidSetPosition+0x28>
 800067c:	79fb      	ldrb	r3, [r7, #7]
 800067e:	2b00      	cmp	r3, #0
 8000680:	d005      	beq.n	800068e <CLCD_voidSetPosition+0x28>
 8000682:	79bb      	ldrb	r3, [r7, #6]
 8000684:	2b10      	cmp	r3, #16
 8000686:	d802      	bhi.n	800068e <CLCD_voidSetPosition+0x28>
 8000688:	79bb      	ldrb	r3, [r7, #6]
 800068a:	2b00      	cmp	r3, #0
 800068c:	d102      	bne.n	8000694 <CLCD_voidSetPosition+0x2e>
		{
			LOC_u8data = lcd_Line_1 ;   // first location
 800068e:	2380      	movs	r3, #128	; 0x80
 8000690:	73fb      	strb	r3, [r7, #15]
 8000692:	e00c      	b.n	80006ae <CLCD_voidSetPosition+0x48>
		}

		else if( Copy_u8Row == CLCD_ROW_1 ){
 8000694:	79fb      	ldrb	r3, [r7, #7]
 8000696:	2b01      	cmp	r3, #1
 8000698:	d103      	bne.n	80006a2 <CLCD_voidSetPosition+0x3c>

			LOC_u8data = ( ( lcd_Line_1 ) + ( Copy_u8Col - 1 ) );              //Row1 -> 0x80+col-1
 800069a:	79bb      	ldrb	r3, [r7, #6]
 800069c:	337f      	adds	r3, #127	; 0x7f
 800069e:	73fb      	strb	r3, [r7, #15]
 80006a0:	e005      	b.n	80006ae <CLCD_voidSetPosition+0x48>

		}

		else if( Copy_u8Row == CLCD_ROW_2 ){
 80006a2:	79fb      	ldrb	r3, [r7, #7]
 80006a4:	2b02      	cmp	r3, #2
 80006a6:	d102      	bne.n	80006ae <CLCD_voidSetPosition+0x48>

			LOC_u8data = ( ( lcd_Line_2)+  ( Copy_u8Col - 1 ) );       //Row2 -> 0xc0+col-1
 80006a8:	79bb      	ldrb	r3, [r7, #6]
 80006aa:	3b41      	subs	r3, #65	; 0x41
 80006ac:	73fb      	strb	r3, [r7, #15]

					LOC_u8data = ( ( lcd_Line_4) + ( Copy_u8Col - 1 ) );       //Row4 -> 0xc0+col-1

				}
	#endif
	CLCD_voidSendCommand ( LOC_u8data );
 80006ae:	7bfb      	ldrb	r3, [r7, #15]
 80006b0:	4618      	mov	r0, r3
 80006b2:	f7ff ff24 	bl	80004fe <CLCD_voidSendCommand>
	_delay_ms(1);
 80006b6:	2001      	movs	r0, #1
 80006b8:	f000 fc8c 	bl	8000fd4 <_delay_ms>
}
 80006bc:	bf00      	nop
 80006be:	3710      	adds	r7, #16
 80006c0:	46bd      	mov	sp, r7
 80006c2:	bd80      	pop	{r7, pc}

080006c4 <CLCD_voidClearScreen>:
* Breif : This Function clear LCD
* Parameters : nothing
* return : nothing
*/
void CLCD_voidClearScreen(void)
{
 80006c4:	b580      	push	{r7, lr}
 80006c6:	af00      	add	r7, sp, #0
	CLCD_voidSendCommand(lcd_Clear);
 80006c8:	2001      	movs	r0, #1
 80006ca:	f7ff ff18 	bl	80004fe <CLCD_voidSendCommand>
	_delay_ms(1);
 80006ce:	2001      	movs	r0, #1
 80006d0:	f000 fc80 	bl	8000fd4 <_delay_ms>
	CLCD_voidSendCommand(lcd_Home);
 80006d4:	2002      	movs	r0, #2
 80006d6:	f7ff ff12 	bl	80004fe <CLCD_voidSendCommand>
	_delay_ms(1); //wait more than 1.53 ms
 80006da:	2001      	movs	r0, #1
 80006dc:	f000 fc7a 	bl	8000fd4 <_delay_ms>
}
 80006e0:	bf00      	nop
 80006e2:	bd80      	pop	{r7, pc}

080006e4 <CLCD_voidSendFallingEdge>:
*
* Hint : static Function to forbid calling it out this file
*
*/
static void CLCD_voidSendFallingEdge(void)
{
 80006e4:	b580      	push	{r7, lr}
 80006e6:	af00      	add	r7, sp, #0
	GPIO_WritePinValue  ( CLCD_CONTROL_PORT , CLCD_EN ,GPIO_HIGH );
 80006e8:	2201      	movs	r2, #1
 80006ea:	2101      	movs	r1, #1
 80006ec:	2001      	movs	r0, #1
 80006ee:	f000 fae1 	bl	8000cb4 <GPIO_WritePinValue>
	_delay_ms(1);
 80006f2:	2001      	movs	r0, #1
 80006f4:	f000 fc6e 	bl	8000fd4 <_delay_ms>
	GPIO_WritePinValue  ( CLCD_CONTROL_PORT , CLCD_EN ,GPIO_LOW  );
 80006f8:	2200      	movs	r2, #0
 80006fa:	2101      	movs	r1, #1
 80006fc:	2001      	movs	r0, #1
 80006fe:	f000 fad9 	bl	8000cb4 <GPIO_WritePinValue>
	_delay_ms(1);
 8000702:	2001      	movs	r0, #1
 8000704:	f000 fc66 	bl	8000fd4 <_delay_ms>
}
 8000708:	bf00      	nop
 800070a:	bd80      	pop	{r7, pc}

0800070c <Get_pressed>:
 */ 
#include <HAL/Keypad/Keypad_Config.h>
#include <HAL/Keypad/Keypad_interface.h>
#include <HAL/Keypad/Keypad_Private.h>
#include "LIB/Types.h"
u8 Get_pressed(void){
 800070c:	b580      	push	{r7, lr}
 800070e:	b082      	sub	sp, #8
 8000710:	af00      	add	r7, sp, #0
	u8 loc_pressed=KPD_NotPressed;
 8000712:	23ff      	movs	r3, #255	; 0xff
 8000714:	71fb      	strb	r3, [r7, #7]
	u8 val=1;
 8000716:	2301      	movs	r3, #1
 8000718:	713b      	strb	r3, [r7, #4]
	u8 row,col;
	for (col= Col1 ; col<= Col4 ;col++ )
 800071a:	2307      	movs	r3, #7
 800071c:	717b      	strb	r3, [r7, #5]
 800071e:	e034      	b.n	800078a <Get_pressed+0x7e>
	{
			
		GPIO_WritePinValue(keypad_port,col,GPIO_LOW);
 8000720:	797b      	ldrb	r3, [r7, #5]
 8000722:	2200      	movs	r2, #0
 8000724:	4619      	mov	r1, r3
 8000726:	2001      	movs	r0, #1
 8000728:	f000 fac4 	bl	8000cb4 <GPIO_WritePinValue>
		for (row=row1 ; row<=row4 ; row++)
 800072c:	2303      	movs	r3, #3
 800072e:	71bb      	strb	r3, [r7, #6]
 8000730:	e01f      	b.n	8000772 <Get_pressed+0x66>
		{
			GPIO_GetPinValue(keypad_port, row, &val);
 8000732:	1d3a      	adds	r2, r7, #4
 8000734:	79bb      	ldrb	r3, [r7, #6]
 8000736:	4619      	mov	r1, r3
 8000738:	2001      	movs	r0, #1
 800073a:	f000 faed 	bl	8000d18 <GPIO_GetPinValue>
			if(val==GPIO_LOW)
 800073e:	793b      	ldrb	r3, [r7, #4]
 8000740:	2b00      	cmp	r3, #0
 8000742:	d113      	bne.n	800076c <Get_pressed+0x60>
			{
				while(GPIO_LOW==val)
 8000744:	e005      	b.n	8000752 <Get_pressed+0x46>
				{
					GPIO_GetPinValue(keypad_port, row, &val);
 8000746:	1d3a      	adds	r2, r7, #4
 8000748:	79bb      	ldrb	r3, [r7, #6]
 800074a:	4619      	mov	r1, r3
 800074c:	2001      	movs	r0, #1
 800074e:	f000 fae3 	bl	8000d18 <GPIO_GetPinValue>
				while(GPIO_LOW==val)
 8000752:	793b      	ldrb	r3, [r7, #4]
 8000754:	2b00      	cmp	r3, #0
 8000756:	d0f6      	beq.n	8000746 <Get_pressed+0x3a>
				}
				loc_pressed=keypad_Buttons[row-row1][col-Col1];
 8000758:	79bb      	ldrb	r3, [r7, #6]
 800075a:	1eda      	subs	r2, r3, #3
 800075c:	797b      	ldrb	r3, [r7, #5]
 800075e:	3b07      	subs	r3, #7
 8000760:	490e      	ldr	r1, [pc, #56]	; (800079c <Get_pressed+0x90>)
 8000762:	0092      	lsls	r2, r2, #2
 8000764:	440a      	add	r2, r1
 8000766:	4413      	add	r3, r2
 8000768:	781b      	ldrb	r3, [r3, #0]
 800076a:	71fb      	strb	r3, [r7, #7]
		for (row=row1 ; row<=row4 ; row++)
 800076c:	79bb      	ldrb	r3, [r7, #6]
 800076e:	3301      	adds	r3, #1
 8000770:	71bb      	strb	r3, [r7, #6]
 8000772:	79bb      	ldrb	r3, [r7, #6]
 8000774:	2b06      	cmp	r3, #6
 8000776:	d9dc      	bls.n	8000732 <Get_pressed+0x26>
			}
		}
		GPIO_WritePinValue(keypad_port,col,GPIO_HIGH);
 8000778:	797b      	ldrb	r3, [r7, #5]
 800077a:	2201      	movs	r2, #1
 800077c:	4619      	mov	r1, r3
 800077e:	2001      	movs	r0, #1
 8000780:	f000 fa98 	bl	8000cb4 <GPIO_WritePinValue>
	for (col= Col1 ; col<= Col4 ;col++ )
 8000784:	797b      	ldrb	r3, [r7, #5]
 8000786:	3301      	adds	r3, #1
 8000788:	717b      	strb	r3, [r7, #5]
 800078a:	797b      	ldrb	r3, [r7, #5]
 800078c:	2b0a      	cmp	r3, #10
 800078e:	d9c7      	bls.n	8000720 <Get_pressed+0x14>
	}
	return loc_pressed;
 8000790:	79fb      	ldrb	r3, [r7, #7]
}
 8000792:	4618      	mov	r0, r3
 8000794:	3708      	adds	r7, #8
 8000796:	46bd      	mov	sp, r7
 8000798:	bd80      	pop	{r7, pc}
 800079a:	bf00      	nop
 800079c:	20000000 	.word	0x20000000

080007a0 <DMA1_Channel1_IRQHandler>:

	SET_BIT( DMA->IFCR , (ChannelNumber + Copy_u8Flag) );

}
/* DMA1 Channel1 global interrupt                   */
void	DMA1_Channel1_IRQHandler  (void){
 80007a0:	b580      	push	{r7, lr}
 80007a2:	af00      	add	r7, sp, #0
	if(Setcallbaks_Ptr[0]!=NULL){
 80007a4:	4b04      	ldr	r3, [pc, #16]	; (80007b8 <DMA1_Channel1_IRQHandler+0x18>)
 80007a6:	681b      	ldr	r3, [r3, #0]
 80007a8:	2b00      	cmp	r3, #0
 80007aa:	d002      	beq.n	80007b2 <DMA1_Channel1_IRQHandler+0x12>
		Setcallbaks_Ptr[0]();
 80007ac:	4b02      	ldr	r3, [pc, #8]	; (80007b8 <DMA1_Channel1_IRQHandler+0x18>)
 80007ae:	681b      	ldr	r3, [r3, #0]
 80007b0:	4798      	blx	r3
	}
}
 80007b2:	bf00      	nop
 80007b4:	bd80      	pop	{r7, pc}
 80007b6:	bf00      	nop
 80007b8:	20000078 	.word	0x20000078

080007bc <DMA1_Channel2_IRQHandler>:


/* DMA1 Channel2 global interrupt                   */
void	DMA1_Channel2_IRQHandler  (void){
 80007bc:	b580      	push	{r7, lr}
 80007be:	af00      	add	r7, sp, #0
	if(Setcallbaks_Ptr[1]!=NULL){
 80007c0:	4b04      	ldr	r3, [pc, #16]	; (80007d4 <DMA1_Channel2_IRQHandler+0x18>)
 80007c2:	685b      	ldr	r3, [r3, #4]
 80007c4:	2b00      	cmp	r3, #0
 80007c6:	d002      	beq.n	80007ce <DMA1_Channel2_IRQHandler+0x12>
		Setcallbaks_Ptr[1]();
 80007c8:	4b02      	ldr	r3, [pc, #8]	; (80007d4 <DMA1_Channel2_IRQHandler+0x18>)
 80007ca:	685b      	ldr	r3, [r3, #4]
 80007cc:	4798      	blx	r3
	}
}
 80007ce:	bf00      	nop
 80007d0:	bd80      	pop	{r7, pc}
 80007d2:	bf00      	nop
 80007d4:	20000078 	.word	0x20000078

080007d8 <DMA1_Channel3_IRQHandler>:



/* DMA1 Channel3 global interrupt                   */
void	DMA1_Channel3_IRQHandler  (void){
 80007d8:	b580      	push	{r7, lr}
 80007da:	af00      	add	r7, sp, #0
	if(Setcallbaks_Ptr[2]!=NULL){
 80007dc:	4b04      	ldr	r3, [pc, #16]	; (80007f0 <DMA1_Channel3_IRQHandler+0x18>)
 80007de:	689b      	ldr	r3, [r3, #8]
 80007e0:	2b00      	cmp	r3, #0
 80007e2:	d002      	beq.n	80007ea <DMA1_Channel3_IRQHandler+0x12>
		Setcallbaks_Ptr[2]();
 80007e4:	4b02      	ldr	r3, [pc, #8]	; (80007f0 <DMA1_Channel3_IRQHandler+0x18>)
 80007e6:	689b      	ldr	r3, [r3, #8]
 80007e8:	4798      	blx	r3
	}
}
 80007ea:	bf00      	nop
 80007ec:	bd80      	pop	{r7, pc}
 80007ee:	bf00      	nop
 80007f0:	20000078 	.word	0x20000078

080007f4 <DMA1_Channel4_IRQHandler>:


/* DMA1 Channel4 global interrupt                   */
void	DMA1_Channel4_IRQHandler  (void){
 80007f4:	b580      	push	{r7, lr}
 80007f6:	af00      	add	r7, sp, #0
	if(Setcallbaks_Ptr[3]!=NULL){
 80007f8:	4b04      	ldr	r3, [pc, #16]	; (800080c <DMA1_Channel4_IRQHandler+0x18>)
 80007fa:	68db      	ldr	r3, [r3, #12]
 80007fc:	2b00      	cmp	r3, #0
 80007fe:	d002      	beq.n	8000806 <DMA1_Channel4_IRQHandler+0x12>
		Setcallbaks_Ptr[3]();
 8000800:	4b02      	ldr	r3, [pc, #8]	; (800080c <DMA1_Channel4_IRQHandler+0x18>)
 8000802:	68db      	ldr	r3, [r3, #12]
 8000804:	4798      	blx	r3
	}
}
 8000806:	bf00      	nop
 8000808:	bd80      	pop	{r7, pc}
 800080a:	bf00      	nop
 800080c:	20000078 	.word	0x20000078

08000810 <DMA1_Channel5_IRQHandler>:

/* DMA1 Channel5 global interrupt                   */
void	DMA1_Channel5_IRQHandler  (void){
 8000810:	b580      	push	{r7, lr}
 8000812:	af00      	add	r7, sp, #0
	if(Setcallbaks_Ptr[4]!=NULL){
 8000814:	4b04      	ldr	r3, [pc, #16]	; (8000828 <DMA1_Channel5_IRQHandler+0x18>)
 8000816:	691b      	ldr	r3, [r3, #16]
 8000818:	2b00      	cmp	r3, #0
 800081a:	d002      	beq.n	8000822 <DMA1_Channel5_IRQHandler+0x12>
		Setcallbaks_Ptr[4]();
 800081c:	4b02      	ldr	r3, [pc, #8]	; (8000828 <DMA1_Channel5_IRQHandler+0x18>)
 800081e:	691b      	ldr	r3, [r3, #16]
 8000820:	4798      	blx	r3
	}
}
 8000822:	bf00      	nop
 8000824:	bd80      	pop	{r7, pc}
 8000826:	bf00      	nop
 8000828:	20000078 	.word	0x20000078

0800082c <DMA1_Channel6_IRQHandler>:


/* DMA1 Channel6 global interrupt                   */
void	DMA1_Channel6_IRQHandler  (void){
 800082c:	b580      	push	{r7, lr}
 800082e:	af00      	add	r7, sp, #0
	if(Setcallbaks_Ptr[5]!=NULL){
 8000830:	4b04      	ldr	r3, [pc, #16]	; (8000844 <DMA1_Channel6_IRQHandler+0x18>)
 8000832:	695b      	ldr	r3, [r3, #20]
 8000834:	2b00      	cmp	r3, #0
 8000836:	d002      	beq.n	800083e <DMA1_Channel6_IRQHandler+0x12>
		Setcallbaks_Ptr[5]();
 8000838:	4b02      	ldr	r3, [pc, #8]	; (8000844 <DMA1_Channel6_IRQHandler+0x18>)
 800083a:	695b      	ldr	r3, [r3, #20]
 800083c:	4798      	blx	r3
	}
}
 800083e:	bf00      	nop
 8000840:	bd80      	pop	{r7, pc}
 8000842:	bf00      	nop
 8000844:	20000078 	.word	0x20000078

08000848 <DMA1_Channel7_IRQHandler>:


/* DMA1 Channel7 global interrupt                   */
void	DMA1_Channel7_IRQHandler  (void){
 8000848:	b580      	push	{r7, lr}
 800084a:	af00      	add	r7, sp, #0
	if(Setcallbaks_Ptr[6]!=NULL){
 800084c:	4b04      	ldr	r3, [pc, #16]	; (8000860 <DMA1_Channel7_IRQHandler+0x18>)
 800084e:	699b      	ldr	r3, [r3, #24]
 8000850:	2b00      	cmp	r3, #0
 8000852:	d002      	beq.n	800085a <DMA1_Channel7_IRQHandler+0x12>
		Setcallbaks_Ptr[6]();
 8000854:	4b02      	ldr	r3, [pc, #8]	; (8000860 <DMA1_Channel7_IRQHandler+0x18>)
 8000856:	699b      	ldr	r3, [r3, #24]
 8000858:	4798      	blx	r3
	}
}
 800085a:	bf00      	nop
 800085c:	bd80      	pop	{r7, pc}
 800085e:	bf00      	nop
 8000860:	20000078 	.word	0x20000078

08000864 <EXTI0_IRQHandler>:
}



void EXTI0_IRQHandler(void)
{
 8000864:	b580      	push	{r7, lr}
 8000866:	af00      	add	r7, sp, #0
	EXTI->PR = (1 << 0);
 8000868:	4b05      	ldr	r3, [pc, #20]	; (8000880 <EXTI0_IRQHandler+0x1c>)
 800086a:	2201      	movs	r2, #1
 800086c:	615a      	str	r2, [r3, #20]
	if(EXTI_CallBacks[0] != NULL )
 800086e:	4b05      	ldr	r3, [pc, #20]	; (8000884 <EXTI0_IRQHandler+0x20>)
 8000870:	681b      	ldr	r3, [r3, #0]
 8000872:	2b00      	cmp	r3, #0
 8000874:	d002      	beq.n	800087c <EXTI0_IRQHandler+0x18>
	{
		EXTI_CallBacks[0]();
 8000876:	4b03      	ldr	r3, [pc, #12]	; (8000884 <EXTI0_IRQHandler+0x20>)
 8000878:	681b      	ldr	r3, [r3, #0]
 800087a:	4798      	blx	r3
	}
}
 800087c:	bf00      	nop
 800087e:	bd80      	pop	{r7, pc}
 8000880:	40010400 	.word	0x40010400
 8000884:	20000094 	.word	0x20000094

08000888 <EXTI1_IRQHandler>:

void EXTI1_IRQHandler(void)
{
 8000888:	b580      	push	{r7, lr}
 800088a:	af00      	add	r7, sp, #0
	EXTI->PR = (1 << 1);
 800088c:	4b05      	ldr	r3, [pc, #20]	; (80008a4 <EXTI1_IRQHandler+0x1c>)
 800088e:	2202      	movs	r2, #2
 8000890:	615a      	str	r2, [r3, #20]
	if(EXTI_CallBacks[1] != NULL )
 8000892:	4b05      	ldr	r3, [pc, #20]	; (80008a8 <EXTI1_IRQHandler+0x20>)
 8000894:	685b      	ldr	r3, [r3, #4]
 8000896:	2b00      	cmp	r3, #0
 8000898:	d002      	beq.n	80008a0 <EXTI1_IRQHandler+0x18>
	{
		EXTI_CallBacks[1]();
 800089a:	4b03      	ldr	r3, [pc, #12]	; (80008a8 <EXTI1_IRQHandler+0x20>)
 800089c:	685b      	ldr	r3, [r3, #4]
 800089e:	4798      	blx	r3
	}
}
 80008a0:	bf00      	nop
 80008a2:	bd80      	pop	{r7, pc}
 80008a4:	40010400 	.word	0x40010400
 80008a8:	20000094 	.word	0x20000094

080008ac <EXTI2_IRQHandler>:

void EXTI2_IRQHandler(void)
{
 80008ac:	b580      	push	{r7, lr}
 80008ae:	af00      	add	r7, sp, #0
	EXTI->PR = (1 << 2);
 80008b0:	4b05      	ldr	r3, [pc, #20]	; (80008c8 <EXTI2_IRQHandler+0x1c>)
 80008b2:	2204      	movs	r2, #4
 80008b4:	615a      	str	r2, [r3, #20]
	if(EXTI_CallBacks[2] != NULL )
 80008b6:	4b05      	ldr	r3, [pc, #20]	; (80008cc <EXTI2_IRQHandler+0x20>)
 80008b8:	689b      	ldr	r3, [r3, #8]
 80008ba:	2b00      	cmp	r3, #0
 80008bc:	d002      	beq.n	80008c4 <EXTI2_IRQHandler+0x18>
	{
		EXTI_CallBacks[2]();
 80008be:	4b03      	ldr	r3, [pc, #12]	; (80008cc <EXTI2_IRQHandler+0x20>)
 80008c0:	689b      	ldr	r3, [r3, #8]
 80008c2:	4798      	blx	r3
	}
}
 80008c4:	bf00      	nop
 80008c6:	bd80      	pop	{r7, pc}
 80008c8:	40010400 	.word	0x40010400
 80008cc:	20000094 	.word	0x20000094

080008d0 <EXTI3_IRQHandler>:

void EXTI3_IRQHandler(void)
{
 80008d0:	b580      	push	{r7, lr}
 80008d2:	af00      	add	r7, sp, #0
	EXTI->PR = (1 << 3);
 80008d4:	4b05      	ldr	r3, [pc, #20]	; (80008ec <EXTI3_IRQHandler+0x1c>)
 80008d6:	2208      	movs	r2, #8
 80008d8:	615a      	str	r2, [r3, #20]
	if(EXTI_CallBacks[3] != NULL )
 80008da:	4b05      	ldr	r3, [pc, #20]	; (80008f0 <EXTI3_IRQHandler+0x20>)
 80008dc:	68db      	ldr	r3, [r3, #12]
 80008de:	2b00      	cmp	r3, #0
 80008e0:	d002      	beq.n	80008e8 <EXTI3_IRQHandler+0x18>
	{
		EXTI_CallBacks[3]();
 80008e2:	4b03      	ldr	r3, [pc, #12]	; (80008f0 <EXTI3_IRQHandler+0x20>)
 80008e4:	68db      	ldr	r3, [r3, #12]
 80008e6:	4798      	blx	r3
	}
}
 80008e8:	bf00      	nop
 80008ea:	bd80      	pop	{r7, pc}
 80008ec:	40010400 	.word	0x40010400
 80008f0:	20000094 	.word	0x20000094

080008f4 <EXTI4_IRQHandler>:

void EXTI4_IRQHandler(void)
{
 80008f4:	b580      	push	{r7, lr}
 80008f6:	af00      	add	r7, sp, #0
	EXTI->PR = (1 << 4);
 80008f8:	4b05      	ldr	r3, [pc, #20]	; (8000910 <EXTI4_IRQHandler+0x1c>)
 80008fa:	2210      	movs	r2, #16
 80008fc:	615a      	str	r2, [r3, #20]
	if(EXTI_CallBacks[4] != NULL )
 80008fe:	4b05      	ldr	r3, [pc, #20]	; (8000914 <EXTI4_IRQHandler+0x20>)
 8000900:	691b      	ldr	r3, [r3, #16]
 8000902:	2b00      	cmp	r3, #0
 8000904:	d002      	beq.n	800090c <EXTI4_IRQHandler+0x18>
	{
		EXTI_CallBacks[4]();
 8000906:	4b03      	ldr	r3, [pc, #12]	; (8000914 <EXTI4_IRQHandler+0x20>)
 8000908:	691b      	ldr	r3, [r3, #16]
 800090a:	4798      	blx	r3
	}
}
 800090c:	bf00      	nop
 800090e:	bd80      	pop	{r7, pc}
 8000910:	40010400 	.word	0x40010400
 8000914:	20000094 	.word	0x20000094

08000918 <EXTI9_5_IRQHandler>:

void EXTI9_5_IRQHandler(void)
{
 8000918:	b580      	push	{r7, lr}
 800091a:	b082      	sub	sp, #8
 800091c:	af00      	add	r7, sp, #0
	for (u8 i = 5 ; i <= 9 ; i++)
 800091e:	2305      	movs	r3, #5
 8000920:	71fb      	strb	r3, [r7, #7]
 8000922:	e024      	b.n	800096e <EXTI9_5_IRQHandler+0x56>
	{
		if(GET_BIT(EXTI->PR,i) == 1 && GET_BIT(EXTI->IMR,i) == 1)
 8000924:	4b16      	ldr	r3, [pc, #88]	; (8000980 <EXTI9_5_IRQHandler+0x68>)
 8000926:	695a      	ldr	r2, [r3, #20]
 8000928:	79fb      	ldrb	r3, [r7, #7]
 800092a:	fa22 f303 	lsr.w	r3, r2, r3
 800092e:	f003 0301 	and.w	r3, r3, #1
 8000932:	2b01      	cmp	r3, #1
 8000934:	d118      	bne.n	8000968 <EXTI9_5_IRQHandler+0x50>
 8000936:	4b12      	ldr	r3, [pc, #72]	; (8000980 <EXTI9_5_IRQHandler+0x68>)
 8000938:	681a      	ldr	r2, [r3, #0]
 800093a:	79fb      	ldrb	r3, [r7, #7]
 800093c:	fa22 f303 	lsr.w	r3, r2, r3
 8000940:	f003 0301 	and.w	r3, r3, #1
 8000944:	2b01      	cmp	r3, #1
 8000946:	d10f      	bne.n	8000968 <EXTI9_5_IRQHandler+0x50>
		{
			EXTI->PR = (1 << i);
 8000948:	79fb      	ldrb	r3, [r7, #7]
 800094a:	2201      	movs	r2, #1
 800094c:	409a      	lsls	r2, r3
 800094e:	4b0c      	ldr	r3, [pc, #48]	; (8000980 <EXTI9_5_IRQHandler+0x68>)
 8000950:	615a      	str	r2, [r3, #20]
			if(EXTI_CallBacks[i] != NULL )
 8000952:	79fb      	ldrb	r3, [r7, #7]
 8000954:	4a0b      	ldr	r2, [pc, #44]	; (8000984 <EXTI9_5_IRQHandler+0x6c>)
 8000956:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800095a:	2b00      	cmp	r3, #0
 800095c:	d004      	beq.n	8000968 <EXTI9_5_IRQHandler+0x50>
			{
				EXTI_CallBacks[i]();
 800095e:	79fb      	ldrb	r3, [r7, #7]
 8000960:	4a08      	ldr	r2, [pc, #32]	; (8000984 <EXTI9_5_IRQHandler+0x6c>)
 8000962:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000966:	4798      	blx	r3
	for (u8 i = 5 ; i <= 9 ; i++)
 8000968:	79fb      	ldrb	r3, [r7, #7]
 800096a:	3301      	adds	r3, #1
 800096c:	71fb      	strb	r3, [r7, #7]
 800096e:	79fb      	ldrb	r3, [r7, #7]
 8000970:	2b09      	cmp	r3, #9
 8000972:	d9d7      	bls.n	8000924 <EXTI9_5_IRQHandler+0xc>
			}
		}
	}
}
 8000974:	bf00      	nop
 8000976:	bf00      	nop
 8000978:	3708      	adds	r7, #8
 800097a:	46bd      	mov	sp, r7
 800097c:	bd80      	pop	{r7, pc}
 800097e:	bf00      	nop
 8000980:	40010400 	.word	0x40010400
 8000984:	20000094 	.word	0x20000094

08000988 <EXTI15_10_IRQHandler>:

void EXTI15_10_IRQHandler(void)
{
 8000988:	b580      	push	{r7, lr}
 800098a:	b082      	sub	sp, #8
 800098c:	af00      	add	r7, sp, #0
	for (u8 i = 10 ; i <= 15 ; i++)
 800098e:	230a      	movs	r3, #10
 8000990:	71fb      	strb	r3, [r7, #7]
 8000992:	e020      	b.n	80009d6 <EXTI15_10_IRQHandler+0x4e>
	{
		if(GET_BIT(EXTI->PR,i) == 1)
 8000994:	4b14      	ldr	r3, [pc, #80]	; (80009e8 <EXTI15_10_IRQHandler+0x60>)
 8000996:	695a      	ldr	r2, [r3, #20]
 8000998:	79fb      	ldrb	r3, [r7, #7]
 800099a:	fa22 f303 	lsr.w	r3, r2, r3
 800099e:	f003 0301 	and.w	r3, r3, #1
 80009a2:	2b01      	cmp	r3, #1
 80009a4:	d114      	bne.n	80009d0 <EXTI15_10_IRQHandler+0x48>
		{
			SET_BIT(EXTI->PR,i);
 80009a6:	4b10      	ldr	r3, [pc, #64]	; (80009e8 <EXTI15_10_IRQHandler+0x60>)
 80009a8:	695b      	ldr	r3, [r3, #20]
 80009aa:	79fa      	ldrb	r2, [r7, #7]
 80009ac:	2101      	movs	r1, #1
 80009ae:	fa01 f202 	lsl.w	r2, r1, r2
 80009b2:	4611      	mov	r1, r2
 80009b4:	4a0c      	ldr	r2, [pc, #48]	; (80009e8 <EXTI15_10_IRQHandler+0x60>)
 80009b6:	430b      	orrs	r3, r1
 80009b8:	6153      	str	r3, [r2, #20]
			if(EXTI_CallBacks[i] != NULL )
 80009ba:	79fb      	ldrb	r3, [r7, #7]
 80009bc:	4a0b      	ldr	r2, [pc, #44]	; (80009ec <EXTI15_10_IRQHandler+0x64>)
 80009be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80009c2:	2b00      	cmp	r3, #0
 80009c4:	d004      	beq.n	80009d0 <EXTI15_10_IRQHandler+0x48>
			{
				EXTI_CallBacks[i]();
 80009c6:	79fb      	ldrb	r3, [r7, #7]
 80009c8:	4a08      	ldr	r2, [pc, #32]	; (80009ec <EXTI15_10_IRQHandler+0x64>)
 80009ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80009ce:	4798      	blx	r3
	for (u8 i = 10 ; i <= 15 ; i++)
 80009d0:	79fb      	ldrb	r3, [r7, #7]
 80009d2:	3301      	adds	r3, #1
 80009d4:	71fb      	strb	r3, [r7, #7]
 80009d6:	79fb      	ldrb	r3, [r7, #7]
 80009d8:	2b0f      	cmp	r3, #15
 80009da:	d9db      	bls.n	8000994 <EXTI15_10_IRQHandler+0xc>
			}
		}
	}
}
 80009dc:	bf00      	nop
 80009de:	bf00      	nop
 80009e0:	3708      	adds	r7, #8
 80009e2:	46bd      	mov	sp, r7
 80009e4:	bd80      	pop	{r7, pc}
 80009e6:	bf00      	nop
 80009e8:	40010400 	.word	0x40010400
 80009ec:	20000094 	.word	0x20000094

080009f0 <GPIO_Nibble_Write>:
}
void GPIO_LOW_2Nibble_Write(u8 Copy_PortId, u8 Copy_PortValue){
	GPIO_Astr[Copy_PortId]->ODR &=(0xFF00);
	GPIO_Astr[Copy_PortId]->ODR|=Copy_PortValue;
}
void GPIO_Nibble_Write(u8 Copy_PortId, Nibble_ID Copy_NiibleId,  u8 Copy_PortValue){
 80009f0:	b480      	push	{r7}
 80009f2:	b083      	sub	sp, #12
 80009f4:	af00      	add	r7, sp, #0
 80009f6:	4603      	mov	r3, r0
 80009f8:	71fb      	strb	r3, [r7, #7]
 80009fa:	460b      	mov	r3, r1
 80009fc:	71bb      	strb	r3, [r7, #6]
 80009fe:	4613      	mov	r3, r2
 8000a00:	717b      	strb	r3, [r7, #5]
	GPIO_Astr[Copy_PortId]->ODR &=~(0xF<<Copy_NiibleId);
 8000a02:	79fb      	ldrb	r3, [r7, #7]
 8000a04:	4a12      	ldr	r2, [pc, #72]	; (8000a50 <GPIO_Nibble_Write+0x60>)
 8000a06:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a0a:	68da      	ldr	r2, [r3, #12]
 8000a0c:	79bb      	ldrb	r3, [r7, #6]
 8000a0e:	210f      	movs	r1, #15
 8000a10:	fa01 f303 	lsl.w	r3, r1, r3
 8000a14:	43db      	mvns	r3, r3
 8000a16:	4618      	mov	r0, r3
 8000a18:	79fb      	ldrb	r3, [r7, #7]
 8000a1a:	490d      	ldr	r1, [pc, #52]	; (8000a50 <GPIO_Nibble_Write+0x60>)
 8000a1c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000a20:	4002      	ands	r2, r0
 8000a22:	60da      	str	r2, [r3, #12]
	GPIO_Astr[Copy_PortId]->ODR|=(Copy_PortValue<<Copy_NiibleId);
 8000a24:	79fb      	ldrb	r3, [r7, #7]
 8000a26:	4a0a      	ldr	r2, [pc, #40]	; (8000a50 <GPIO_Nibble_Write+0x60>)
 8000a28:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a2c:	68da      	ldr	r2, [r3, #12]
 8000a2e:	7979      	ldrb	r1, [r7, #5]
 8000a30:	79bb      	ldrb	r3, [r7, #6]
 8000a32:	fa01 f303 	lsl.w	r3, r1, r3
 8000a36:	4618      	mov	r0, r3
 8000a38:	79fb      	ldrb	r3, [r7, #7]
 8000a3a:	4905      	ldr	r1, [pc, #20]	; (8000a50 <GPIO_Nibble_Write+0x60>)
 8000a3c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000a40:	4302      	orrs	r2, r0
 8000a42:	60da      	str	r2, [r3, #12]
}
 8000a44:	bf00      	nop
 8000a46:	370c      	adds	r7, #12
 8000a48:	46bd      	mov	sp, r7
 8000a4a:	bc80      	pop	{r7}
 8000a4c:	4770      	bx	lr
 8000a4e:	bf00      	nop
 8000a50:	20000050 	.word	0x20000050

08000a54 <GPIO_PORT_voidInit>:

#if NeedPortHere==1
void GPIO_PORT_voidInit(void)
{	u8 port,pin;
 8000a54:	b580      	push	{r7, lr}
 8000a56:	b082      	sub	sp, #8
 8000a58:	af00      	add	r7, sp, #0
	for(port=GPIO_PORTA; port<=GPIO_PORTC; port++){
 8000a5a:	2300      	movs	r3, #0
 8000a5c:	71fb      	strb	r3, [r7, #7]
 8000a5e:	e023      	b.n	8000aa8 <GPIO_PORT_voidInit+0x54>
		for(pin=GPIO_PIN0; pin<=GPIO_PIN15 ; pin++){
 8000a60:	2300      	movs	r3, #0
 8000a62:	71bb      	strb	r3, [r7, #6]
 8000a64:	e01a      	b.n	8000a9c <GPIO_PORT_voidInit+0x48>
			switch(port){
 8000a66:	79fb      	ldrb	r3, [r7, #7]
 8000a68:	2b00      	cmp	r3, #0
 8000a6a:	d002      	beq.n	8000a72 <GPIO_PORT_voidInit+0x1e>
 8000a6c:	2b01      	cmp	r3, #1
 8000a6e:	d009      	beq.n	8000a84 <GPIO_PORT_voidInit+0x30>
 8000a70:	e011      	b.n	8000a96 <GPIO_PORT_voidInit+0x42>
			#if PORTA_EN==1
			case GPIO_PORTA:
				GPIO_SetPinMode(port , pin, PORTA_DIR[pin]);
 8000a72:	79bb      	ldrb	r3, [r7, #6]
 8000a74:	4a25      	ldr	r2, [pc, #148]	; (8000b0c <GPIO_PORT_voidInit+0xb8>)
 8000a76:	5cd2      	ldrb	r2, [r2, r3]
 8000a78:	79b9      	ldrb	r1, [r7, #6]
 8000a7a:	79fb      	ldrb	r3, [r7, #7]
 8000a7c:	4618      	mov	r0, r3
 8000a7e:	f000 f84d 	bl	8000b1c <GPIO_SetPinMode>
				break;
 8000a82:	e008      	b.n	8000a96 <GPIO_PORT_voidInit+0x42>
			#endif

			#if PORTB_EN==1
			case GPIO_PORTB:
				GPIO_SetPinMode(port , pin, PORTB_DIR[pin]);
 8000a84:	79bb      	ldrb	r3, [r7, #6]
 8000a86:	4a22      	ldr	r2, [pc, #136]	; (8000b10 <GPIO_PORT_voidInit+0xbc>)
 8000a88:	5cd2      	ldrb	r2, [r2, r3]
 8000a8a:	79b9      	ldrb	r1, [r7, #6]
 8000a8c:	79fb      	ldrb	r3, [r7, #7]
 8000a8e:	4618      	mov	r0, r3
 8000a90:	f000 f844 	bl	8000b1c <GPIO_SetPinMode>
				break;
 8000a94:	bf00      	nop
		for(pin=GPIO_PIN0; pin<=GPIO_PIN15 ; pin++){
 8000a96:	79bb      	ldrb	r3, [r7, #6]
 8000a98:	3301      	adds	r3, #1
 8000a9a:	71bb      	strb	r3, [r7, #6]
 8000a9c:	79bb      	ldrb	r3, [r7, #6]
 8000a9e:	2b0f      	cmp	r3, #15
 8000aa0:	d9e1      	bls.n	8000a66 <GPIO_PORT_voidInit+0x12>
	for(port=GPIO_PORTA; port<=GPIO_PORTC; port++){
 8000aa2:	79fb      	ldrb	r3, [r7, #7]
 8000aa4:	3301      	adds	r3, #1
 8000aa6:	71fb      	strb	r3, [r7, #7]
 8000aa8:	79fb      	ldrb	r3, [r7, #7]
 8000aaa:	2b02      	cmp	r3, #2
 8000aac:	d9d8      	bls.n	8000a60 <GPIO_PORT_voidInit+0xc>
			#endif
			  }
			}
		}

	for(port=GPIO_PORTA; port<=GPIO_PORTC; port++){
 8000aae:	2300      	movs	r3, #0
 8000ab0:	71fb      	strb	r3, [r7, #7]
 8000ab2:	e023      	b.n	8000afc <GPIO_PORT_voidInit+0xa8>
		for(pin=GPIO_PIN0; pin<=GPIO_PIN15 ; pin++){
 8000ab4:	2300      	movs	r3, #0
 8000ab6:	71bb      	strb	r3, [r7, #6]
 8000ab8:	e01a      	b.n	8000af0 <GPIO_PORT_voidInit+0x9c>
			switch(port){
 8000aba:	79fb      	ldrb	r3, [r7, #7]
 8000abc:	2b00      	cmp	r3, #0
 8000abe:	d002      	beq.n	8000ac6 <GPIO_PORT_voidInit+0x72>
 8000ac0:	2b01      	cmp	r3, #1
 8000ac2:	d009      	beq.n	8000ad8 <GPIO_PORT_voidInit+0x84>
 8000ac4:	e011      	b.n	8000aea <GPIO_PORT_voidInit+0x96>
			#if PORTA_EN==1
			case GPIO_PORTA:
				GPIO_WritePinValue(port , pin, PORTA_init_val[pin]);
 8000ac6:	79bb      	ldrb	r3, [r7, #6]
 8000ac8:	4a12      	ldr	r2, [pc, #72]	; (8000b14 <GPIO_PORT_voidInit+0xc0>)
 8000aca:	5cd2      	ldrb	r2, [r2, r3]
 8000acc:	79b9      	ldrb	r1, [r7, #6]
 8000ace:	79fb      	ldrb	r3, [r7, #7]
 8000ad0:	4618      	mov	r0, r3
 8000ad2:	f000 f8ef 	bl	8000cb4 <GPIO_WritePinValue>
				break;
 8000ad6:	e008      	b.n	8000aea <GPIO_PORT_voidInit+0x96>
			#endif

			#if PORTB_EN==1
			case GPIO_PORTB:
				GPIO_WritePinValue(port , pin, PORTB_init_val[pin]);
 8000ad8:	79bb      	ldrb	r3, [r7, #6]
 8000ada:	4a0f      	ldr	r2, [pc, #60]	; (8000b18 <GPIO_PORT_voidInit+0xc4>)
 8000adc:	5cd2      	ldrb	r2, [r2, r3]
 8000ade:	79b9      	ldrb	r1, [r7, #6]
 8000ae0:	79fb      	ldrb	r3, [r7, #7]
 8000ae2:	4618      	mov	r0, r3
 8000ae4:	f000 f8e6 	bl	8000cb4 <GPIO_WritePinValue>
				break;
 8000ae8:	bf00      	nop
		for(pin=GPIO_PIN0; pin<=GPIO_PIN15 ; pin++){
 8000aea:	79bb      	ldrb	r3, [r7, #6]
 8000aec:	3301      	adds	r3, #1
 8000aee:	71bb      	strb	r3, [r7, #6]
 8000af0:	79bb      	ldrb	r3, [r7, #6]
 8000af2:	2b0f      	cmp	r3, #15
 8000af4:	d9e1      	bls.n	8000aba <GPIO_PORT_voidInit+0x66>
	for(port=GPIO_PORTA; port<=GPIO_PORTC; port++){
 8000af6:	79fb      	ldrb	r3, [r7, #7]
 8000af8:	3301      	adds	r3, #1
 8000afa:	71fb      	strb	r3, [r7, #7]
 8000afc:	79fb      	ldrb	r3, [r7, #7]
 8000afe:	2b02      	cmp	r3, #2
 8000b00:	d9d8      	bls.n	8000ab4 <GPIO_PORT_voidInit+0x60>
			#endif
			  }
			}
		}

}
 8000b02:	bf00      	nop
 8000b04:	bf00      	nop
 8000b06:	3708      	adds	r7, #8
 8000b08:	46bd      	mov	sp, r7
 8000b0a:	bd80      	pop	{r7, pc}
 8000b0c:	20000010 	.word	0x20000010
 8000b10:	20000020 	.word	0x20000020
 8000b14:	20000030 	.word	0x20000030
 8000b18:	20000040 	.word	0x20000040

08000b1c <GPIO_SetPinMode>:
#endif

void GPIO_SetPinMode (u8 Copy_PortId, u8 Copy_PinId, u8 Copy_PinMode)
{
 8000b1c:	b480      	push	{r7}
 8000b1e:	b085      	sub	sp, #20
 8000b20:	af00      	add	r7, sp, #0
 8000b22:	4603      	mov	r3, r0
 8000b24:	71fb      	strb	r3, [r7, #7]
 8000b26:	460b      	mov	r3, r1
 8000b28:	71bb      	strb	r3, [r7, #6]
 8000b2a:	4613      	mov	r3, r2
 8000b2c:	717b      	strb	r3, [r7, #5]
	if(Copy_PortId <= GPIO_PORTC)
 8000b2e:	79fb      	ldrb	r3, [r7, #7]
 8000b30:	2b02      	cmp	r3, #2
 8000b32:	f200 80b7 	bhi.w	8000ca4 <GPIO_SetPinMode+0x188>
	{
		u8 Local_PullUpDown_Flag = GET_BIT(Copy_PinMode,4); /* Equal one in case of pull up only */
 8000b36:	797b      	ldrb	r3, [r7, #5]
 8000b38:	111b      	asrs	r3, r3, #4
 8000b3a:	b2db      	uxtb	r3, r3
 8000b3c:	f003 0301 	and.w	r3, r3, #1
 8000b40:	73fb      	strb	r3, [r7, #15]
		CLR_BIT(Copy_PinMode,4); /*Get the Mode back to its value if it was input pull up */
 8000b42:	797b      	ldrb	r3, [r7, #5]
 8000b44:	f023 0310 	bic.w	r3, r3, #16
 8000b48:	717b      	strb	r3, [r7, #5]

		if(Copy_PinId <= GPIO_PIN7)
 8000b4a:	79bb      	ldrb	r3, [r7, #6]
 8000b4c:	2b07      	cmp	r3, #7
 8000b4e:	d851      	bhi.n	8000bf4 <GPIO_SetPinMode+0xd8>
		{
			GPIO_Astr[Copy_PortId]->CRL &= (~((0b1111) << (Copy_PinId * 4)));
 8000b50:	79fb      	ldrb	r3, [r7, #7]
 8000b52:	4a57      	ldr	r2, [pc, #348]	; (8000cb0 <GPIO_SetPinMode+0x194>)
 8000b54:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b58:	681a      	ldr	r2, [r3, #0]
 8000b5a:	79bb      	ldrb	r3, [r7, #6]
 8000b5c:	009b      	lsls	r3, r3, #2
 8000b5e:	210f      	movs	r1, #15
 8000b60:	fa01 f303 	lsl.w	r3, r1, r3
 8000b64:	43db      	mvns	r3, r3
 8000b66:	4618      	mov	r0, r3
 8000b68:	79fb      	ldrb	r3, [r7, #7]
 8000b6a:	4951      	ldr	r1, [pc, #324]	; (8000cb0 <GPIO_SetPinMode+0x194>)
 8000b6c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000b70:	4002      	ands	r2, r0
 8000b72:	601a      	str	r2, [r3, #0]
			GPIO_Astr[Copy_PortId]->CRL |= (Copy_PinMode << (Copy_PinId * 4));
 8000b74:	79fb      	ldrb	r3, [r7, #7]
 8000b76:	4a4e      	ldr	r2, [pc, #312]	; (8000cb0 <GPIO_SetPinMode+0x194>)
 8000b78:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b7c:	681a      	ldr	r2, [r3, #0]
 8000b7e:	7979      	ldrb	r1, [r7, #5]
 8000b80:	79bb      	ldrb	r3, [r7, #6]
 8000b82:	009b      	lsls	r3, r3, #2
 8000b84:	fa01 f303 	lsl.w	r3, r1, r3
 8000b88:	4618      	mov	r0, r3
 8000b8a:	79fb      	ldrb	r3, [r7, #7]
 8000b8c:	4948      	ldr	r1, [pc, #288]	; (8000cb0 <GPIO_SetPinMode+0x194>)
 8000b8e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000b92:	4302      	orrs	r2, r0
 8000b94:	601a      	str	r2, [r3, #0]

			if((Copy_PinMode == GPIO_INPUT_PULL_DOWN) && (Local_PullUpDown_Flag == 0))
 8000b96:	797b      	ldrb	r3, [r7, #5]
 8000b98:	2b08      	cmp	r3, #8
 8000b9a:	d114      	bne.n	8000bc6 <GPIO_SetPinMode+0xaa>
 8000b9c:	7bfb      	ldrb	r3, [r7, #15]
 8000b9e:	2b00      	cmp	r3, #0
 8000ba0:	d111      	bne.n	8000bc6 <GPIO_SetPinMode+0xaa>
			{
				/* Then the mode was input pull down */
				/* Turn off the internal pull up resistor */
				CLR_BIT(GPIO_Astr[Copy_PortId]->ODR,Copy_PinId);
 8000ba2:	79fb      	ldrb	r3, [r7, #7]
 8000ba4:	4a42      	ldr	r2, [pc, #264]	; (8000cb0 <GPIO_SetPinMode+0x194>)
 8000ba6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000baa:	68da      	ldr	r2, [r3, #12]
 8000bac:	79bb      	ldrb	r3, [r7, #6]
 8000bae:	2101      	movs	r1, #1
 8000bb0:	fa01 f303 	lsl.w	r3, r1, r3
 8000bb4:	43db      	mvns	r3, r3
 8000bb6:	4618      	mov	r0, r3
 8000bb8:	79fb      	ldrb	r3, [r7, #7]
 8000bba:	493d      	ldr	r1, [pc, #244]	; (8000cb0 <GPIO_SetPinMode+0x194>)
 8000bbc:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000bc0:	4002      	ands	r2, r0
 8000bc2:	60da      	str	r2, [r3, #12]
 8000bc4:	e06e      	b.n	8000ca4 <GPIO_SetPinMode+0x188>
			}
			else if((Copy_PinMode == GPIO_INPUT_PULL_DOWN) && (Local_PullUpDown_Flag == 1))
 8000bc6:	797b      	ldrb	r3, [r7, #5]
 8000bc8:	2b08      	cmp	r3, #8
 8000bca:	d16b      	bne.n	8000ca4 <GPIO_SetPinMode+0x188>
 8000bcc:	7bfb      	ldrb	r3, [r7, #15]
 8000bce:	2b01      	cmp	r3, #1
 8000bd0:	d168      	bne.n	8000ca4 <GPIO_SetPinMode+0x188>
			{
				/* Then the mode was input pull up */
				/* Turn on the internal pull up resistor */
				SET_BIT(GPIO_Astr[Copy_PortId]->ODR,Copy_PinId);
 8000bd2:	79fb      	ldrb	r3, [r7, #7]
 8000bd4:	4a36      	ldr	r2, [pc, #216]	; (8000cb0 <GPIO_SetPinMode+0x194>)
 8000bd6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000bda:	68da      	ldr	r2, [r3, #12]
 8000bdc:	79bb      	ldrb	r3, [r7, #6]
 8000bde:	2101      	movs	r1, #1
 8000be0:	fa01 f303 	lsl.w	r3, r1, r3
 8000be4:	4618      	mov	r0, r3
 8000be6:	79fb      	ldrb	r3, [r7, #7]
 8000be8:	4931      	ldr	r1, [pc, #196]	; (8000cb0 <GPIO_SetPinMode+0x194>)
 8000bea:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000bee:	4302      	orrs	r2, r0
 8000bf0:	60da      	str	r2, [r3, #12]
			}
		}

	}

}
 8000bf2:	e057      	b.n	8000ca4 <GPIO_SetPinMode+0x188>
		else if(Copy_PinId <= GPIO_PIN15)
 8000bf4:	79bb      	ldrb	r3, [r7, #6]
 8000bf6:	2b0f      	cmp	r3, #15
 8000bf8:	d854      	bhi.n	8000ca4 <GPIO_SetPinMode+0x188>
			Copy_PinId -= 8;
 8000bfa:	79bb      	ldrb	r3, [r7, #6]
 8000bfc:	3b08      	subs	r3, #8
 8000bfe:	71bb      	strb	r3, [r7, #6]
			GPIO_Astr[Copy_PortId]->CRH &= (~((0b1111) << (Copy_PinId * 4)));
 8000c00:	79fb      	ldrb	r3, [r7, #7]
 8000c02:	4a2b      	ldr	r2, [pc, #172]	; (8000cb0 <GPIO_SetPinMode+0x194>)
 8000c04:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c08:	685a      	ldr	r2, [r3, #4]
 8000c0a:	79bb      	ldrb	r3, [r7, #6]
 8000c0c:	009b      	lsls	r3, r3, #2
 8000c0e:	210f      	movs	r1, #15
 8000c10:	fa01 f303 	lsl.w	r3, r1, r3
 8000c14:	43db      	mvns	r3, r3
 8000c16:	4618      	mov	r0, r3
 8000c18:	79fb      	ldrb	r3, [r7, #7]
 8000c1a:	4925      	ldr	r1, [pc, #148]	; (8000cb0 <GPIO_SetPinMode+0x194>)
 8000c1c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000c20:	4002      	ands	r2, r0
 8000c22:	605a      	str	r2, [r3, #4]
			GPIO_Astr[Copy_PortId]->CRH |= (Copy_PinMode << (Copy_PinId * 4));
 8000c24:	79fb      	ldrb	r3, [r7, #7]
 8000c26:	4a22      	ldr	r2, [pc, #136]	; (8000cb0 <GPIO_SetPinMode+0x194>)
 8000c28:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c2c:	685a      	ldr	r2, [r3, #4]
 8000c2e:	7979      	ldrb	r1, [r7, #5]
 8000c30:	79bb      	ldrb	r3, [r7, #6]
 8000c32:	009b      	lsls	r3, r3, #2
 8000c34:	fa01 f303 	lsl.w	r3, r1, r3
 8000c38:	4618      	mov	r0, r3
 8000c3a:	79fb      	ldrb	r3, [r7, #7]
 8000c3c:	491c      	ldr	r1, [pc, #112]	; (8000cb0 <GPIO_SetPinMode+0x194>)
 8000c3e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000c42:	4302      	orrs	r2, r0
 8000c44:	605a      	str	r2, [r3, #4]
			if((Copy_PinMode == GPIO_INPUT_PULL_DOWN) && (Local_PullUpDown_Flag == 0))
 8000c46:	797b      	ldrb	r3, [r7, #5]
 8000c48:	2b08      	cmp	r3, #8
 8000c4a:	d114      	bne.n	8000c76 <GPIO_SetPinMode+0x15a>
 8000c4c:	7bfb      	ldrb	r3, [r7, #15]
 8000c4e:	2b00      	cmp	r3, #0
 8000c50:	d111      	bne.n	8000c76 <GPIO_SetPinMode+0x15a>
				CLR_BIT(GPIO_Astr[Copy_PortId]->ODR,Copy_PinId);
 8000c52:	79fb      	ldrb	r3, [r7, #7]
 8000c54:	4a16      	ldr	r2, [pc, #88]	; (8000cb0 <GPIO_SetPinMode+0x194>)
 8000c56:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c5a:	68da      	ldr	r2, [r3, #12]
 8000c5c:	79bb      	ldrb	r3, [r7, #6]
 8000c5e:	2101      	movs	r1, #1
 8000c60:	fa01 f303 	lsl.w	r3, r1, r3
 8000c64:	43db      	mvns	r3, r3
 8000c66:	4618      	mov	r0, r3
 8000c68:	79fb      	ldrb	r3, [r7, #7]
 8000c6a:	4911      	ldr	r1, [pc, #68]	; (8000cb0 <GPIO_SetPinMode+0x194>)
 8000c6c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000c70:	4002      	ands	r2, r0
 8000c72:	60da      	str	r2, [r3, #12]
 8000c74:	e016      	b.n	8000ca4 <GPIO_SetPinMode+0x188>
			else if((Copy_PinMode ==GPIO_INPUT_PULL_DOWN) && (Local_PullUpDown_Flag == 1))
 8000c76:	797b      	ldrb	r3, [r7, #5]
 8000c78:	2b08      	cmp	r3, #8
 8000c7a:	d113      	bne.n	8000ca4 <GPIO_SetPinMode+0x188>
 8000c7c:	7bfb      	ldrb	r3, [r7, #15]
 8000c7e:	2b01      	cmp	r3, #1
 8000c80:	d110      	bne.n	8000ca4 <GPIO_SetPinMode+0x188>
				SET_BIT(GPIO_Astr[Copy_PortId]->ODR,Copy_PinId);
 8000c82:	79fb      	ldrb	r3, [r7, #7]
 8000c84:	4a0a      	ldr	r2, [pc, #40]	; (8000cb0 <GPIO_SetPinMode+0x194>)
 8000c86:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c8a:	68da      	ldr	r2, [r3, #12]
 8000c8c:	79bb      	ldrb	r3, [r7, #6]
 8000c8e:	2101      	movs	r1, #1
 8000c90:	fa01 f303 	lsl.w	r3, r1, r3
 8000c94:	4618      	mov	r0, r3
 8000c96:	79fb      	ldrb	r3, [r7, #7]
 8000c98:	4905      	ldr	r1, [pc, #20]	; (8000cb0 <GPIO_SetPinMode+0x194>)
 8000c9a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000c9e:	4302      	orrs	r2, r0
 8000ca0:	60da      	str	r2, [r3, #12]
}
 8000ca2:	e7ff      	b.n	8000ca4 <GPIO_SetPinMode+0x188>
 8000ca4:	bf00      	nop
 8000ca6:	3714      	adds	r7, #20
 8000ca8:	46bd      	mov	sp, r7
 8000caa:	bc80      	pop	{r7}
 8000cac:	4770      	bx	lr
 8000cae:	bf00      	nop
 8000cb0:	20000050 	.word	0x20000050

08000cb4 <GPIO_WritePinValue>:

void GPIO_WritePinValue	(u8 Copy_PortId, u8 Copy_PinId, u8 Copy_u8PinValue)
{
 8000cb4:	b480      	push	{r7}
 8000cb6:	b083      	sub	sp, #12
 8000cb8:	af00      	add	r7, sp, #0
 8000cba:	4603      	mov	r3, r0
 8000cbc:	71fb      	strb	r3, [r7, #7]
 8000cbe:	460b      	mov	r3, r1
 8000cc0:	71bb      	strb	r3, [r7, #6]
 8000cc2:	4613      	mov	r3, r2
 8000cc4:	717b      	strb	r3, [r7, #5]

	if(Copy_PortId <= GPIO_PORTC && Copy_PinId <= GPIO_PIN15)
 8000cc6:	79fb      	ldrb	r3, [r7, #7]
 8000cc8:	2b02      	cmp	r3, #2
 8000cca:	d81d      	bhi.n	8000d08 <GPIO_WritePinValue+0x54>
 8000ccc:	79bb      	ldrb	r3, [r7, #6]
 8000cce:	2b0f      	cmp	r3, #15
 8000cd0:	d81a      	bhi.n	8000d08 <GPIO_WritePinValue+0x54>
	{
		switch(Copy_u8PinValue)
 8000cd2:	797b      	ldrb	r3, [r7, #5]
 8000cd4:	2b00      	cmp	r3, #0
 8000cd6:	d00c      	beq.n	8000cf2 <GPIO_WritePinValue+0x3e>
 8000cd8:	2b01      	cmp	r3, #1
 8000cda:	d115      	bne.n	8000d08 <GPIO_WritePinValue+0x54>
		{
		case GPIO_HIGH:
			GPIO_Astr[Copy_PortId]->BSRR = (1<<Copy_PinId);
 8000cdc:	79bb      	ldrb	r3, [r7, #6]
 8000cde:	2201      	movs	r2, #1
 8000ce0:	fa02 f103 	lsl.w	r1, r2, r3
 8000ce4:	79fb      	ldrb	r3, [r7, #7]
 8000ce6:	4a0b      	ldr	r2, [pc, #44]	; (8000d14 <GPIO_WritePinValue+0x60>)
 8000ce8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000cec:	460a      	mov	r2, r1
 8000cee:	611a      	str	r2, [r3, #16]
			break;
 8000cf0:	e00a      	b.n	8000d08 <GPIO_WritePinValue+0x54>
		case GPIO_LOW:
			GPIO_Astr[Copy_PortId]->BRR = (1<<Copy_PinId);
 8000cf2:	79bb      	ldrb	r3, [r7, #6]
 8000cf4:	2201      	movs	r2, #1
 8000cf6:	fa02 f103 	lsl.w	r1, r2, r3
 8000cfa:	79fb      	ldrb	r3, [r7, #7]
 8000cfc:	4a05      	ldr	r2, [pc, #20]	; (8000d14 <GPIO_WritePinValue+0x60>)
 8000cfe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d02:	460a      	mov	r2, r1
 8000d04:	615a      	str	r2, [r3, #20]
			break;
 8000d06:	bf00      	nop
		}
	}
}
 8000d08:	bf00      	nop
 8000d0a:	370c      	adds	r7, #12
 8000d0c:	46bd      	mov	sp, r7
 8000d0e:	bc80      	pop	{r7}
 8000d10:	4770      	bx	lr
 8000d12:	bf00      	nop
 8000d14:	20000050 	.word	0x20000050

08000d18 <GPIO_GetPinValue>:

void GPIO_GetPinValue(u8 Copy_PortId, u8 Copy_PinId , u8 * Copy_Pu8RetunredPinValue)
{
 8000d18:	b480      	push	{r7}
 8000d1a:	b083      	sub	sp, #12
 8000d1c:	af00      	add	r7, sp, #0
 8000d1e:	4603      	mov	r3, r0
 8000d20:	603a      	str	r2, [r7, #0]
 8000d22:	71fb      	strb	r3, [r7, #7]
 8000d24:	460b      	mov	r3, r1
 8000d26:	71bb      	strb	r3, [r7, #6]


	if(Copy_PortId <= GPIO_PORTC && Copy_PinId <= GPIO_PIN15)
 8000d28:	79fb      	ldrb	r3, [r7, #7]
 8000d2a:	2b02      	cmp	r3, #2
 8000d2c:	d812      	bhi.n	8000d54 <GPIO_GetPinValue+0x3c>
 8000d2e:	79bb      	ldrb	r3, [r7, #6]
 8000d30:	2b0f      	cmp	r3, #15
 8000d32:	d80f      	bhi.n	8000d54 <GPIO_GetPinValue+0x3c>
	{
		*Copy_Pu8RetunredPinValue = GET_BIT(GPIO_Astr[Copy_PortId]->IDR,Copy_PinId);
 8000d34:	79fb      	ldrb	r3, [r7, #7]
 8000d36:	4a0a      	ldr	r2, [pc, #40]	; (8000d60 <GPIO_GetPinValue+0x48>)
 8000d38:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d3c:	689b      	ldr	r3, [r3, #8]
 8000d3e:	79ba      	ldrb	r2, [r7, #6]
 8000d40:	2101      	movs	r1, #1
 8000d42:	fa01 f202 	lsl.w	r2, r1, r2
 8000d46:	401a      	ands	r2, r3
 8000d48:	79bb      	ldrb	r3, [r7, #6]
 8000d4a:	fa22 f303 	lsr.w	r3, r2, r3
 8000d4e:	b2da      	uxtb	r2, r3
 8000d50:	683b      	ldr	r3, [r7, #0]
 8000d52:	701a      	strb	r2, [r3, #0]
	}
}
 8000d54:	bf00      	nop
 8000d56:	370c      	adds	r7, #12
 8000d58:	46bd      	mov	sp, r7
 8000d5a:	bc80      	pop	{r7}
 8000d5c:	4770      	bx	lr
 8000d5e:	bf00      	nop
 8000d60:	20000050 	.word	0x20000050

08000d64 <RCC_InitSysClk>:
#include "MCAL/RCC/RCC_private.h"
#include "MCAL/RCC/RCC_config.h"
#include "LIB/stm32f103c8t6.h"


void RCC_InitSysClk(void){
 8000d64:	b480      	push	{r7}
 8000d66:	af00      	add	r7, sp, #0

	RCC->CR = (RCC->CR &~ (0b11111<<3)) | (RCC_HSI_TRIM<<3); /* Setting the TRIM value for HSI */
 8000d68:	4b1d      	ldr	r3, [pc, #116]	; (8000de0 <RCC_InitSysClk+0x7c>)
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8000d70:	4a1b      	ldr	r2, [pc, #108]	; (8000de0 <RCC_InitSysClk+0x7c>)
 8000d72:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000d76:	6013      	str	r3, [r2, #0]
		CLR_BIT(RCC->CFGR,0); /* Select HSI as clock source from SW registers */
		CLR_BIT(RCC->CFGR,1);

	#elif (RCC_CLK_SYS == RCC_HSE)
		#if (_HSE_TYPE == RCC_HSE_BYPASS)
			SET_BIT(RCC->CR,18);
 8000d78:	4b19      	ldr	r3, [pc, #100]	; (8000de0 <RCC_InitSysClk+0x7c>)
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	4a18      	ldr	r2, [pc, #96]	; (8000de0 <RCC_InitSysClk+0x7c>)
 8000d7e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000d82:	6013      	str	r3, [r2, #0]
		#elif (RCC_HSE_TYPE == RCC_HSE_NOT_BYPASS)
			CLR_BIT(RCC->CR,18);
		#else
			#error"Wrong System Clock Choice"
		#endif
		SET_BIT(RCC->CR,16); /* write one bit no16 HSEON */
 8000d84:	4b16      	ldr	r3, [pc, #88]	; (8000de0 <RCC_InitSysClk+0x7c>)
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	4a15      	ldr	r2, [pc, #84]	; (8000de0 <RCC_InitSysClk+0x7c>)
 8000d8a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000d8e:	6013      	str	r3, [r2, #0]
		SET_BIT(RCC->CFGR,0); /* select HSE as system clock in SW registers */
 8000d90:	4b13      	ldr	r3, [pc, #76]	; (8000de0 <RCC_InitSysClk+0x7c>)
 8000d92:	685b      	ldr	r3, [r3, #4]
 8000d94:	4a12      	ldr	r2, [pc, #72]	; (8000de0 <RCC_InitSysClk+0x7c>)
 8000d96:	f043 0301 	orr.w	r3, r3, #1
 8000d9a:	6053      	str	r3, [r2, #4]
		CLR_BIT(RCC->CFGR,1);
 8000d9c:	4b10      	ldr	r3, [pc, #64]	; (8000de0 <RCC_InitSysClk+0x7c>)
 8000d9e:	685b      	ldr	r3, [r3, #4]
 8000da0:	4a0f      	ldr	r2, [pc, #60]	; (8000de0 <RCC_InitSysClk+0x7c>)
 8000da2:	f023 0302 	bic.w	r3, r3, #2
 8000da6:	6053      	str	r3, [r2, #4]
	#else
		#error"Wrong System Clock Choice"
	#endif

	/* Setting the Prescaler */
	RCC->CFGR = (RCC->CFGR &~ (0b11<<14))  | (RCC_ADC_PRESCALER<<14);  /* ADC */
 8000da8:	4b0d      	ldr	r3, [pc, #52]	; (8000de0 <RCC_InitSysClk+0x7c>)
 8000daa:	685b      	ldr	r3, [r3, #4]
 8000dac:	4a0c      	ldr	r2, [pc, #48]	; (8000de0 <RCC_InitSysClk+0x7c>)
 8000dae:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000db2:	6053      	str	r3, [r2, #4]
	RCC->CFGR = (RCC->CFGR &~ (0b111<<11)) | (RCC_APB2_PRESCALER<<11); /* APB2 */
 8000db4:	4b0a      	ldr	r3, [pc, #40]	; (8000de0 <RCC_InitSysClk+0x7c>)
 8000db6:	685b      	ldr	r3, [r3, #4]
 8000db8:	4a09      	ldr	r2, [pc, #36]	; (8000de0 <RCC_InitSysClk+0x7c>)
 8000dba:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8000dbe:	6053      	str	r3, [r2, #4]
	RCC->CFGR = (RCC->CFGR &~ (0b111<<8))  | (RCC_APB1_PRESCALER<<8);  /* APB1 */
 8000dc0:	4b07      	ldr	r3, [pc, #28]	; (8000de0 <RCC_InitSysClk+0x7c>)
 8000dc2:	685b      	ldr	r3, [r3, #4]
 8000dc4:	4a06      	ldr	r2, [pc, #24]	; (8000de0 <RCC_InitSysClk+0x7c>)
 8000dc6:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000dca:	6053      	str	r3, [r2, #4]
	RCC->CFGR = (RCC->CFGR &~ (0b1111<<4)) | (RCC_AHB_PRESCALER<<4);   /* AHB */
 8000dcc:	4b04      	ldr	r3, [pc, #16]	; (8000de0 <RCC_InitSysClk+0x7c>)
 8000dce:	685b      	ldr	r3, [r3, #4]
 8000dd0:	4a03      	ldr	r2, [pc, #12]	; (8000de0 <RCC_InitSysClk+0x7c>)
 8000dd2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8000dd6:	6053      	str	r3, [r2, #4]
	
}
 8000dd8:	bf00      	nop
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	bc80      	pop	{r7}
 8000dde:	4770      	bx	lr
 8000de0:	40021000 	.word	0x40021000

08000de4 <RCC_PeripheralClk>:

void RCC_PeripheralClk(RCC_PER_ID Copy_PeripheralId ,PER_STATE Copy_State){
 8000de4:	b480      	push	{r7}
 8000de6:	b083      	sub	sp, #12
 8000de8:	af00      	add	r7, sp, #0
 8000dea:	4603      	mov	r3, r0
 8000dec:	460a      	mov	r2, r1
 8000dee:	71fb      	strb	r3, [r7, #7]
 8000df0:	4613      	mov	r3, r2
 8000df2:	71bb      	strb	r3, [r7, #6]

	if(Copy_PeripheralId < 32) /* from 0 to 31 AHB BUS */
 8000df4:	79fb      	ldrb	r3, [r7, #7]
 8000df6:	2b1f      	cmp	r3, #31
 8000df8:	d81b      	bhi.n	8000e32 <RCC_PeripheralClk+0x4e>
	{
		switch(Copy_State)
 8000dfa:	79bb      	ldrb	r3, [r7, #6]
 8000dfc:	2b00      	cmp	r3, #0
 8000dfe:	d00c      	beq.n	8000e1a <RCC_PeripheralClk+0x36>
 8000e00:	2b01      	cmp	r3, #1
 8000e02:	d15a      	bne.n	8000eba <RCC_PeripheralClk+0xd6>
		{
		case RCC_Enable:
			SET_BIT(RCC->AHBENR,Copy_PeripheralId);
 8000e04:	4b2f      	ldr	r3, [pc, #188]	; (8000ec4 <RCC_PeripheralClk+0xe0>)
 8000e06:	695b      	ldr	r3, [r3, #20]
 8000e08:	79fa      	ldrb	r2, [r7, #7]
 8000e0a:	2101      	movs	r1, #1
 8000e0c:	fa01 f202 	lsl.w	r2, r1, r2
 8000e10:	4611      	mov	r1, r2
 8000e12:	4a2c      	ldr	r2, [pc, #176]	; (8000ec4 <RCC_PeripheralClk+0xe0>)
 8000e14:	430b      	orrs	r3, r1
 8000e16:	6153      	str	r3, [r2, #20]
			break;
 8000e18:	e04f      	b.n	8000eba <RCC_PeripheralClk+0xd6>
		case RCC_Disable:
			CLR_BIT(RCC->AHBENR,Copy_PeripheralId);
 8000e1a:	4b2a      	ldr	r3, [pc, #168]	; (8000ec4 <RCC_PeripheralClk+0xe0>)
 8000e1c:	695b      	ldr	r3, [r3, #20]
 8000e1e:	79fa      	ldrb	r2, [r7, #7]
 8000e20:	2101      	movs	r1, #1
 8000e22:	fa01 f202 	lsl.w	r2, r1, r2
 8000e26:	43d2      	mvns	r2, r2
 8000e28:	4611      	mov	r1, r2
 8000e2a:	4a26      	ldr	r2, [pc, #152]	; (8000ec4 <RCC_PeripheralClk+0xe0>)
 8000e2c:	400b      	ands	r3, r1
 8000e2e:	6153      	str	r3, [r2, #20]
			break;
 8000e30:	e043      	b.n	8000eba <RCC_PeripheralClk+0xd6>
		}
	}
	else if(Copy_PeripheralId < 64) /* from 32 to 63 APB2 BUS */
 8000e32:	79fb      	ldrb	r3, [r7, #7]
 8000e34:	2b3f      	cmp	r3, #63	; 0x3f
 8000e36:	d81e      	bhi.n	8000e76 <RCC_PeripheralClk+0x92>
	{
		Copy_PeripheralId -= 32;
 8000e38:	79fb      	ldrb	r3, [r7, #7]
 8000e3a:	3b20      	subs	r3, #32
 8000e3c:	71fb      	strb	r3, [r7, #7]
		switch(Copy_State)
 8000e3e:	79bb      	ldrb	r3, [r7, #6]
 8000e40:	2b00      	cmp	r3, #0
 8000e42:	d00c      	beq.n	8000e5e <RCC_PeripheralClk+0x7a>
 8000e44:	2b01      	cmp	r3, #1
 8000e46:	d138      	bne.n	8000eba <RCC_PeripheralClk+0xd6>
		{
		case RCC_Enable:
			SET_BIT(RCC->APB2ENR,Copy_PeripheralId);
 8000e48:	4b1e      	ldr	r3, [pc, #120]	; (8000ec4 <RCC_PeripheralClk+0xe0>)
 8000e4a:	699b      	ldr	r3, [r3, #24]
 8000e4c:	79fa      	ldrb	r2, [r7, #7]
 8000e4e:	2101      	movs	r1, #1
 8000e50:	fa01 f202 	lsl.w	r2, r1, r2
 8000e54:	4611      	mov	r1, r2
 8000e56:	4a1b      	ldr	r2, [pc, #108]	; (8000ec4 <RCC_PeripheralClk+0xe0>)
 8000e58:	430b      	orrs	r3, r1
 8000e5a:	6193      	str	r3, [r2, #24]
			break;
 8000e5c:	e02d      	b.n	8000eba <RCC_PeripheralClk+0xd6>
		case RCC_Disable:
			CLR_BIT(RCC->APB2ENR,Copy_PeripheralId);
 8000e5e:	4b19      	ldr	r3, [pc, #100]	; (8000ec4 <RCC_PeripheralClk+0xe0>)
 8000e60:	699b      	ldr	r3, [r3, #24]
 8000e62:	79fa      	ldrb	r2, [r7, #7]
 8000e64:	2101      	movs	r1, #1
 8000e66:	fa01 f202 	lsl.w	r2, r1, r2
 8000e6a:	43d2      	mvns	r2, r2
 8000e6c:	4611      	mov	r1, r2
 8000e6e:	4a15      	ldr	r2, [pc, #84]	; (8000ec4 <RCC_PeripheralClk+0xe0>)
 8000e70:	400b      	ands	r3, r1
 8000e72:	6193      	str	r3, [r2, #24]
			break;
 8000e74:	e021      	b.n	8000eba <RCC_PeripheralClk+0xd6>
		}
	}
	else if(Copy_PeripheralId < 96) /* from 64 to 95 APB1 BUS */
 8000e76:	79fb      	ldrb	r3, [r7, #7]
 8000e78:	2b5f      	cmp	r3, #95	; 0x5f
 8000e7a:	d81e      	bhi.n	8000eba <RCC_PeripheralClk+0xd6>
	{
		Copy_PeripheralId -= 64;
 8000e7c:	79fb      	ldrb	r3, [r7, #7]
 8000e7e:	3b40      	subs	r3, #64	; 0x40
 8000e80:	71fb      	strb	r3, [r7, #7]
		switch(Copy_State)
 8000e82:	79bb      	ldrb	r3, [r7, #6]
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	d00c      	beq.n	8000ea2 <RCC_PeripheralClk+0xbe>
 8000e88:	2b01      	cmp	r3, #1
 8000e8a:	d116      	bne.n	8000eba <RCC_PeripheralClk+0xd6>
		{
		case RCC_Enable:
			SET_BIT(RCC->APB1ENR,Copy_PeripheralId);
 8000e8c:	4b0d      	ldr	r3, [pc, #52]	; (8000ec4 <RCC_PeripheralClk+0xe0>)
 8000e8e:	69db      	ldr	r3, [r3, #28]
 8000e90:	79fa      	ldrb	r2, [r7, #7]
 8000e92:	2101      	movs	r1, #1
 8000e94:	fa01 f202 	lsl.w	r2, r1, r2
 8000e98:	4611      	mov	r1, r2
 8000e9a:	4a0a      	ldr	r2, [pc, #40]	; (8000ec4 <RCC_PeripheralClk+0xe0>)
 8000e9c:	430b      	orrs	r3, r1
 8000e9e:	61d3      	str	r3, [r2, #28]
			break;
 8000ea0:	e00b      	b.n	8000eba <RCC_PeripheralClk+0xd6>
		case RCC_Disable:
			CLR_BIT(RCC->APB1ENR,Copy_PeripheralId);
 8000ea2:	4b08      	ldr	r3, [pc, #32]	; (8000ec4 <RCC_PeripheralClk+0xe0>)
 8000ea4:	69db      	ldr	r3, [r3, #28]
 8000ea6:	79fa      	ldrb	r2, [r7, #7]
 8000ea8:	2101      	movs	r1, #1
 8000eaa:	fa01 f202 	lsl.w	r2, r1, r2
 8000eae:	43d2      	mvns	r2, r2
 8000eb0:	4611      	mov	r1, r2
 8000eb2:	4a04      	ldr	r2, [pc, #16]	; (8000ec4 <RCC_PeripheralClk+0xe0>)
 8000eb4:	400b      	ands	r3, r1
 8000eb6:	61d3      	str	r3, [r2, #28]
			break;
 8000eb8:	bf00      	nop
		}
	}

}
 8000eba:	bf00      	nop
 8000ebc:	370c      	adds	r7, #12
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	bc80      	pop	{r7}
 8000ec2:	4770      	bx	lr
 8000ec4:	40021000 	.word	0x40021000

08000ec8 <SysTick_Handler>:
	*Copy_pu32ElapsedTime_PTR=(SysTK->LOAD-SysTK->VAL);
}
void SysTKGetRemainingTime    (u32 * Copy_32RemainingTime_PTR){
	*Copy_32RemainingTime_PTR=SysTK->VAL;
}
void SysTick_Handler(void){
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	af00      	add	r7, sp, #0

	/* Clear The Interrupt Flag */
	CLEAR_BIT(SysTK->CTRL,16);
 8000ecc:	4b12      	ldr	r3, [pc, #72]	; (8000f18 <SysTick_Handler+0x50>)
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	4a11      	ldr	r2, [pc, #68]	; (8000f18 <SysTick_Handler+0x50>)
 8000ed2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000ed6:	6013      	str	r3, [r2, #0]

	if(SysTK_ModeOfInterval == SysTK_SINGLE_INTERVAL)
 8000ed8:	4b10      	ldr	r3, [pc, #64]	; (8000f1c <SysTick_Handler+0x54>)
 8000eda:	781b      	ldrb	r3, [r3, #0]
 8000edc:	2b01      	cmp	r3, #1
 8000ede:	d111      	bne.n	8000f04 <SysTick_Handler+0x3c>
	{
		/* Disable and Stop The Timer */
		CLEAR_BIT(SysTK->CTRL,0);
 8000ee0:	4b0d      	ldr	r3, [pc, #52]	; (8000f18 <SysTick_Handler+0x50>)
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	4a0c      	ldr	r2, [pc, #48]	; (8000f18 <SysTick_Handler+0x50>)
 8000ee6:	f023 0301 	bic.w	r3, r3, #1
 8000eea:	6013      	str	r3, [r2, #0]
		CLEAR_BIT(SysTK->CTRL,1);
 8000eec:	4b0a      	ldr	r3, [pc, #40]	; (8000f18 <SysTick_Handler+0x50>)
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	4a09      	ldr	r2, [pc, #36]	; (8000f18 <SysTick_Handler+0x50>)
 8000ef2:	f023 0302 	bic.w	r3, r3, #2
 8000ef6:	6013      	str	r3, [r2, #0]
		SysTK->LOAD = 0;
 8000ef8:	4b07      	ldr	r3, [pc, #28]	; (8000f18 <SysTick_Handler+0x50>)
 8000efa:	2200      	movs	r2, #0
 8000efc:	605a      	str	r2, [r3, #4]
		SysTK->VAL  = 0;
 8000efe:	4b06      	ldr	r3, [pc, #24]	; (8000f18 <SysTick_Handler+0x50>)
 8000f00:	2200      	movs	r2, #0
 8000f02:	609a      	str	r2, [r3, #8]
	}
	if(SysTK_ptr_f != NULL)
 8000f04:	4b06      	ldr	r3, [pc, #24]	; (8000f20 <SysTick_Handler+0x58>)
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	d002      	beq.n	8000f12 <SysTick_Handler+0x4a>
	{
		SysTK_ptr_f();
 8000f0c:	4b04      	ldr	r3, [pc, #16]	; (8000f20 <SysTick_Handler+0x58>)
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	4798      	blx	r3
	}
}
 8000f12:	bf00      	nop
 8000f14:	bd80      	pop	{r7, pc}
 8000f16:	bf00      	nop
 8000f18:	e000e010 	.word	0xe000e010
 8000f1c:	200000d4 	.word	0x200000d4
 8000f20:	200000d8 	.word	0x200000d8

08000f24 <TIM1_UP_IRQHandler>:

/*******************************************************************************
*                       Interrupt Service Routines                            *
*******************************************************************************/
void TIM1_UP_IRQHandler(void)
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	af00      	add	r7, sp, #0
	if(TIMER1_callback != NULL)
 8000f28:	4b07      	ldr	r3, [pc, #28]	; (8000f48 <TIM1_UP_IRQHandler+0x24>)
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	d002      	beq.n	8000f36 <TIM1_UP_IRQHandler+0x12>
	{
		TIMER1_callback();
 8000f30:	4b05      	ldr	r3, [pc, #20]	; (8000f48 <TIM1_UP_IRQHandler+0x24>)
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	4798      	blx	r3
	}
	CLR_BIT(TIMER1->SR,0); /* Clear the update flag */
 8000f36:	4b05      	ldr	r3, [pc, #20]	; (8000f4c <TIM1_UP_IRQHandler+0x28>)
 8000f38:	691b      	ldr	r3, [r3, #16]
 8000f3a:	4a04      	ldr	r2, [pc, #16]	; (8000f4c <TIM1_UP_IRQHandler+0x28>)
 8000f3c:	f023 0301 	bic.w	r3, r3, #1
 8000f40:	6113      	str	r3, [r2, #16]
}
 8000f42:	bf00      	nop
 8000f44:	bd80      	pop	{r7, pc}
 8000f46:	bf00      	nop
 8000f48:	200000dc 	.word	0x200000dc
 8000f4c:	40012c00 	.word	0x40012c00

08000f50 <USART1_IRQHandler>:
	}
}


void USART1_IRQHandler(void)
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	af00      	add	r7, sp, #0
	CLEAR_BIT(UART1->SR,5); /* Clear the flag */
 8000f54:	4b07      	ldr	r3, [pc, #28]	; (8000f74 <USART1_IRQHandler+0x24>)
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	4a06      	ldr	r2, [pc, #24]	; (8000f74 <USART1_IRQHandler+0x24>)
 8000f5a:	f023 0320 	bic.w	r3, r3, #32
 8000f5e:	6013      	str	r3, [r2, #0]
	if(UART_SetCallbacks[0] != NULL)
 8000f60:	4b05      	ldr	r3, [pc, #20]	; (8000f78 <USART1_IRQHandler+0x28>)
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	d002      	beq.n	8000f6e <USART1_IRQHandler+0x1e>
	{
		UART_SetCallbacks[0]();
 8000f68:	4b03      	ldr	r3, [pc, #12]	; (8000f78 <USART1_IRQHandler+0x28>)
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	4798      	blx	r3
	}
}
 8000f6e:	bf00      	nop
 8000f70:	bd80      	pop	{r7, pc}
 8000f72:	bf00      	nop
 8000f74:	40013800 	.word	0x40013800
 8000f78:	200000e0 	.word	0x200000e0

08000f7c <USART2_IRQHandler>:

void USART2_IRQHandler(void)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	af00      	add	r7, sp, #0
	CLEAR_BIT(UART2->SR,5); /* Clear the flag */
 8000f80:	4b07      	ldr	r3, [pc, #28]	; (8000fa0 <USART2_IRQHandler+0x24>)
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	4a06      	ldr	r2, [pc, #24]	; (8000fa0 <USART2_IRQHandler+0x24>)
 8000f86:	f023 0320 	bic.w	r3, r3, #32
 8000f8a:	6013      	str	r3, [r2, #0]
	if(UART_SetCallbacks[1] != NULL)
 8000f8c:	4b05      	ldr	r3, [pc, #20]	; (8000fa4 <USART2_IRQHandler+0x28>)
 8000f8e:	685b      	ldr	r3, [r3, #4]
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	d002      	beq.n	8000f9a <USART2_IRQHandler+0x1e>
	{
		UART_SetCallbacks[1]();
 8000f94:	4b03      	ldr	r3, [pc, #12]	; (8000fa4 <USART2_IRQHandler+0x28>)
 8000f96:	685b      	ldr	r3, [r3, #4]
 8000f98:	4798      	blx	r3
	}
}
 8000f9a:	bf00      	nop
 8000f9c:	bd80      	pop	{r7, pc}
 8000f9e:	bf00      	nop
 8000fa0:	40004400 	.word	0x40004400
 8000fa4:	200000e0 	.word	0x200000e0

08000fa8 <USART3_IRQHandler>:

void USART3_IRQHandler(void)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	af00      	add	r7, sp, #0
	//UART_DATA=(u8)UART_IDS[2]->DR;
	CLEAR_BIT(UART3->SR,5); /* Clear the flag */
 8000fac:	4b07      	ldr	r3, [pc, #28]	; (8000fcc <USART3_IRQHandler+0x24>)
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	4a06      	ldr	r2, [pc, #24]	; (8000fcc <USART3_IRQHandler+0x24>)
 8000fb2:	f023 0320 	bic.w	r3, r3, #32
 8000fb6:	6013      	str	r3, [r2, #0]
	if(UART_SetCallbacks[2]!= NULL)
 8000fb8:	4b05      	ldr	r3, [pc, #20]	; (8000fd0 <USART3_IRQHandler+0x28>)
 8000fba:	689b      	ldr	r3, [r3, #8]
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d002      	beq.n	8000fc6 <USART3_IRQHandler+0x1e>
	{
		UART_SetCallbacks[2]();
 8000fc0:	4b03      	ldr	r3, [pc, #12]	; (8000fd0 <USART3_IRQHandler+0x28>)
 8000fc2:	689b      	ldr	r3, [r3, #8]
 8000fc4:	4798      	blx	r3
	}
}
 8000fc6:	bf00      	nop
 8000fc8:	bd80      	pop	{r7, pc}
 8000fca:	bf00      	nop
 8000fcc:	40004800 	.word	0x40004800
 8000fd0:	200000e0 	.word	0x200000e0

08000fd4 <_delay_ms>:
 * 	SW: delay
 */
#include "LIB/ellithy_delay.h"
#include "LIB/STD_TYPES.h"
/*	for F_CPU = 8mhz */
void _delay_ms(u16 delay_in_ms){
 8000fd4:	b480      	push	{r7}
 8000fd6:	b085      	sub	sp, #20
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	4603      	mov	r3, r0
 8000fdc:	80fb      	strh	r3, [r7, #6]
	u16 i,j,fact=((u16)(F_CPU/8000000u));
 8000fde:	2301      	movs	r3, #1
 8000fe0:	817b      	strh	r3, [r7, #10]
	fact*=993;
 8000fe2:	897b      	ldrh	r3, [r7, #10]
 8000fe4:	461a      	mov	r2, r3
 8000fe6:	0152      	lsls	r2, r2, #5
 8000fe8:	1ad2      	subs	r2, r2, r3
 8000fea:	0152      	lsls	r2, r2, #5
 8000fec:	4413      	add	r3, r2
 8000fee:	817b      	strh	r3, [r7, #10]
	for(i=0;i<delay_in_ms; i++)
 8000ff0:	2300      	movs	r3, #0
 8000ff2:	81fb      	strh	r3, [r7, #14]
 8000ff4:	e00d      	b.n	8001012 <_delay_ms+0x3e>
	{
		for(j= 0 ; j < fact ; j++ )
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	81bb      	strh	r3, [r7, #12]
 8000ffa:	e003      	b.n	8001004 <_delay_ms+0x30>
		{
		__asm__("nop");
 8000ffc:	bf00      	nop
		for(j= 0 ; j < fact ; j++ )
 8000ffe:	89bb      	ldrh	r3, [r7, #12]
 8001000:	3301      	adds	r3, #1
 8001002:	81bb      	strh	r3, [r7, #12]
 8001004:	89ba      	ldrh	r2, [r7, #12]
 8001006:	897b      	ldrh	r3, [r7, #10]
 8001008:	429a      	cmp	r2, r3
 800100a:	d3f7      	bcc.n	8000ffc <_delay_ms+0x28>
	for(i=0;i<delay_in_ms; i++)
 800100c:	89fb      	ldrh	r3, [r7, #14]
 800100e:	3301      	adds	r3, #1
 8001010:	81fb      	strh	r3, [r7, #14]
 8001012:	89fa      	ldrh	r2, [r7, #14]
 8001014:	88fb      	ldrh	r3, [r7, #6]
 8001016:	429a      	cmp	r2, r3
 8001018:	d3ed      	bcc.n	8000ff6 <_delay_ms+0x22>
		}
	}
}
 800101a:	bf00      	nop
 800101c:	bf00      	nop
 800101e:	3714      	adds	r7, #20
 8001020:	46bd      	mov	sp, r7
 8001022:	bc80      	pop	{r7}
 8001024:	4770      	bx	lr
	...

08001028 <error>:
	Sympol,
	Second_Digit,
	Sympol_Result
}input_State;

void error(){
 8001028:	b590      	push	{r4, r7, lr}
 800102a:	b087      	sub	sp, #28
 800102c:	af00      	add	r7, sp, #0
	u8 STR_invalid[]="Invalid Input";
 800102e:	4b11      	ldr	r3, [pc, #68]	; (8001074 <error+0x4c>)
 8001030:	f107 0408 	add.w	r4, r7, #8
 8001034:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001036:	c407      	stmia	r4!, {r0, r1, r2}
 8001038:	8023      	strh	r3, [r4, #0]
	u8 STR_Error[]="Error!";
 800103a:	4a0f      	ldr	r2, [pc, #60]	; (8001078 <error+0x50>)
 800103c:	463b      	mov	r3, r7
 800103e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001042:	6018      	str	r0, [r3, #0]
 8001044:	3304      	adds	r3, #4
 8001046:	8019      	strh	r1, [r3, #0]
 8001048:	3302      	adds	r3, #2
 800104a:	0c0a      	lsrs	r2, r1, #16
 800104c:	701a      	strb	r2, [r3, #0]
	 CLCD_voidClearScreen();
 800104e:	f7ff fb39 	bl	80006c4 <CLCD_voidClearScreen>
	 CLCD_voidSendString(STR_invalid);
 8001052:	f107 0308 	add.w	r3, r7, #8
 8001056:	4618      	mov	r0, r3
 8001058:	f7ff fa77 	bl	800054a <CLCD_voidSendString>
	 CLCD_voidSetPosition(CLCD_ROW_2, CLCD_COL_1);
 800105c:	2101      	movs	r1, #1
 800105e:	2002      	movs	r0, #2
 8001060:	f7ff fb01 	bl	8000666 <CLCD_voidSetPosition>
	 CLCD_voidSendString(STR_Error);
 8001064:	463b      	mov	r3, r7
 8001066:	4618      	mov	r0, r3
 8001068:	f7ff fa6f 	bl	800054a <CLCD_voidSendString>
}
 800106c:	bf00      	nop
 800106e:	371c      	adds	r7, #28
 8001070:	46bd      	mov	sp, r7
 8001072:	bd90      	pop	{r4, r7, pc}
 8001074:	08001320 	.word	0x08001320
 8001078:	08001330 	.word	0x08001330

0800107c <main>:

int main(void)
{
 800107c:	b5b0      	push	{r4, r5, r7, lr}
 800107e:	b082      	sub	sp, #8
 8001080:	af00      	add	r7, sp, #0
    /* Loop forever */
	RCC_InitSysClk();
 8001082:	f7ff fe6f 	bl	8000d64 <RCC_InitSysClk>
	RCC_PeripheralClk(RCC_GPIOA, RCC_Enable);
 8001086:	2101      	movs	r1, #1
 8001088:	2022      	movs	r0, #34	; 0x22
 800108a:	f7ff feab 	bl	8000de4 <RCC_PeripheralClk>
	RCC_PeripheralClk(RCC_GPIOB, RCC_Enable);
 800108e:	2101      	movs	r1, #1
 8001090:	2023      	movs	r0, #35	; 0x23
 8001092:	f7ff fea7 	bl	8000de4 <RCC_PeripheralClk>
	GPIO_PORT_voidInit();
 8001096:	f7ff fcdd 	bl	8000a54 <GPIO_PORT_voidInit>
	CLCD_voidInit();
 800109a:	f7ff f9e9 	bl	8000470 <CLCD_voidInit>
	u8 pressed,result, num1,num2,sym,flag_negative=0;
 800109e:	2300      	movs	r3, #0
 80010a0:	713b      	strb	r3, [r7, #4]
	input_State input=First_Digit;
 80010a2:	2300      	movs	r3, #0
 80010a4:	70fb      	strb	r3, [r7, #3]
	while(1){
		if((pressed=Get_pressed())!=KPD_NotPressed){
 80010a6:	f7ff fb31 	bl	800070c <Get_pressed>
 80010aa:	4603      	mov	r3, r0
 80010ac:	70bb      	strb	r3, [r7, #2]
 80010ae:	78bb      	ldrb	r3, [r7, #2]
 80010b0:	2bff      	cmp	r3, #255	; 0xff
 80010b2:	d0f8      	beq.n	80010a6 <main+0x2a>
			switch(input){
 80010b4:	78fb      	ldrb	r3, [r7, #3]
 80010b6:	2b03      	cmp	r3, #3
 80010b8:	d8f5      	bhi.n	80010a6 <main+0x2a>
 80010ba:	a201      	add	r2, pc, #4	; (adr r2, 80010c0 <main+0x44>)
 80010bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80010c0:	080010d1 	.word	0x080010d1
 80010c4:	08001117 	.word	0x08001117
 80010c8:	08001163 	.word	0x08001163
 80010cc:	08001211 	.word	0x08001211
			 case First_Digit:
				 input=Sympol;
 80010d0:	2301      	movs	r3, #1
 80010d2:	70fb      	strb	r3, [r7, #3]
				 CLCD_voidClearScreen();
 80010d4:	f7ff faf6 	bl	80006c4 <CLCD_voidClearScreen>
				 if(pressed <='9' && pressed>='0'){
 80010d8:	78bb      	ldrb	r3, [r7, #2]
 80010da:	2b39      	cmp	r3, #57	; 0x39
 80010dc:	d80a      	bhi.n	80010f4 <main+0x78>
 80010de:	78bb      	ldrb	r3, [r7, #2]
 80010e0:	2b2f      	cmp	r3, #47	; 0x2f
 80010e2:	d907      	bls.n	80010f4 <main+0x78>
					 num1=pressed-'0';
 80010e4:	78bb      	ldrb	r3, [r7, #2]
 80010e6:	3b30      	subs	r3, #48	; 0x30
 80010e8:	71bb      	strb	r3, [r7, #6]
					 CLCD_voidSendData(pressed);
 80010ea:	78bb      	ldrb	r3, [r7, #2]
 80010ec:	4618      	mov	r0, r3
 80010ee:	f7ff f9e0 	bl	80004b2 <CLCD_voidSendData>
						CLCD_voidClearScreen();
					}
				 else{
					 error();
				 }
				 break;
 80010f2:	e0b9      	b.n	8001268 <main+0x1ec>
				 else if(pressed=='o' ){
 80010f4:	78bb      	ldrb	r3, [r7, #2]
 80010f6:	2b6f      	cmp	r3, #111	; 0x6f
 80010f8:	d10a      	bne.n	8001110 <main+0x94>
						num1=0,num2=0,result=0;
 80010fa:	2300      	movs	r3, #0
 80010fc:	71bb      	strb	r3, [r7, #6]
 80010fe:	2300      	movs	r3, #0
 8001100:	707b      	strb	r3, [r7, #1]
 8001102:	2300      	movs	r3, #0
 8001104:	71fb      	strb	r3, [r7, #7]
						input=First_Digit;
 8001106:	2300      	movs	r3, #0
 8001108:	70fb      	strb	r3, [r7, #3]
						CLCD_voidClearScreen();
 800110a:	f7ff fadb 	bl	80006c4 <CLCD_voidClearScreen>
				 break;
 800110e:	e0ab      	b.n	8001268 <main+0x1ec>
					 error();
 8001110:	f7ff ff8a 	bl	8001028 <error>
				 break;
 8001114:	e0a8      	b.n	8001268 <main+0x1ec>
			 case Sympol:
				 input=Second_Digit;
 8001116:	2302      	movs	r3, #2
 8001118:	70fb      	strb	r3, [r7, #3]
				 if(pressed!='+' && pressed!='-' && pressed!='*' && pressed!='/'){
 800111a:	78bb      	ldrb	r3, [r7, #2]
 800111c:	2b2b      	cmp	r3, #43	; 0x2b
 800111e:	d00b      	beq.n	8001138 <main+0xbc>
 8001120:	78bb      	ldrb	r3, [r7, #2]
 8001122:	2b2d      	cmp	r3, #45	; 0x2d
 8001124:	d008      	beq.n	8001138 <main+0xbc>
 8001126:	78bb      	ldrb	r3, [r7, #2]
 8001128:	2b2a      	cmp	r3, #42	; 0x2a
 800112a:	d005      	beq.n	8001138 <main+0xbc>
 800112c:	78bb      	ldrb	r3, [r7, #2]
 800112e:	2b2f      	cmp	r3, #47	; 0x2f
 8001130:	d002      	beq.n	8001138 <main+0xbc>
					 error();
 8001132:	f7ff ff79 	bl	8001028 <error>
				 }
				 else{
					 sym=pressed;
					 CLCD_voidSendData(pressed);
				 }
				 break;
 8001136:	e097      	b.n	8001268 <main+0x1ec>
			     else if(pressed=='o' ){
 8001138:	78bb      	ldrb	r3, [r7, #2]
 800113a:	2b6f      	cmp	r3, #111	; 0x6f
 800113c:	d10a      	bne.n	8001154 <main+0xd8>
						num1=0,num2=0,result=0;
 800113e:	2300      	movs	r3, #0
 8001140:	71bb      	strb	r3, [r7, #6]
 8001142:	2300      	movs	r3, #0
 8001144:	707b      	strb	r3, [r7, #1]
 8001146:	2300      	movs	r3, #0
 8001148:	71fb      	strb	r3, [r7, #7]
						input=First_Digit;
 800114a:	2300      	movs	r3, #0
 800114c:	70fb      	strb	r3, [r7, #3]
						CLCD_voidClearScreen();
 800114e:	f7ff fab9 	bl	80006c4 <CLCD_voidClearScreen>
				 break;
 8001152:	e089      	b.n	8001268 <main+0x1ec>
					 sym=pressed;
 8001154:	78bb      	ldrb	r3, [r7, #2]
 8001156:	717b      	strb	r3, [r7, #5]
					 CLCD_voidSendData(pressed);
 8001158:	78bb      	ldrb	r3, [r7, #2]
 800115a:	4618      	mov	r0, r3
 800115c:	f7ff f9a9 	bl	80004b2 <CLCD_voidSendData>
				 break;
 8001160:	e082      	b.n	8001268 <main+0x1ec>
			 case Second_Digit:
				 input=Sympol_Result;
 8001162:	2303      	movs	r3, #3
 8001164:	70fb      	strb	r3, [r7, #3]
				 if(pressed <='9' && pressed>='0'){
 8001166:	78bb      	ldrb	r3, [r7, #2]
 8001168:	2b39      	cmp	r3, #57	; 0x39
 800116a:	d83f      	bhi.n	80011ec <main+0x170>
 800116c:	78bb      	ldrb	r3, [r7, #2]
 800116e:	2b2f      	cmp	r3, #47	; 0x2f
 8001170:	d93c      	bls.n	80011ec <main+0x170>
					 num2=pressed-'0';
 8001172:	78bb      	ldrb	r3, [r7, #2]
 8001174:	3b30      	subs	r3, #48	; 0x30
 8001176:	707b      	strb	r3, [r7, #1]
					 CLCD_voidSendData(pressed);
 8001178:	78bb      	ldrb	r3, [r7, #2]
 800117a:	4618      	mov	r0, r3
 800117c:	f7ff f999 	bl	80004b2 <CLCD_voidSendData>
					 switch(sym){
 8001180:	797b      	ldrb	r3, [r7, #5]
 8001182:	3b2a      	subs	r3, #42	; 0x2a
 8001184:	2b05      	cmp	r3, #5
 8001186:	d842      	bhi.n	800120e <main+0x192>
 8001188:	a201      	add	r2, pc, #4	; (adr r2, 8001190 <main+0x114>)
 800118a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800118e:	bf00      	nop
 8001190:	080011df 	.word	0x080011df
 8001194:	080011a9 	.word	0x080011a9
 8001198:	0800120f 	.word	0x0800120f
 800119c:	080011b3 	.word	0x080011b3
 80011a0:	0800120f 	.word	0x0800120f
 80011a4:	080011d3 	.word	0x080011d3
					  case '+': result=num1+num2;   break;
 80011a8:	79ba      	ldrb	r2, [r7, #6]
 80011aa:	787b      	ldrb	r3, [r7, #1]
 80011ac:	4413      	add	r3, r2
 80011ae:	71fb      	strb	r3, [r7, #7]
 80011b0:	e01b      	b.n	80011ea <main+0x16e>
					  case '-':
					  	  if (num2>num1){
 80011b2:	787a      	ldrb	r2, [r7, #1]
 80011b4:	79bb      	ldrb	r3, [r7, #6]
 80011b6:	429a      	cmp	r2, r3
 80011b8:	d906      	bls.n	80011c8 <main+0x14c>
					  		  flag_negative=1;
 80011ba:	2301      	movs	r3, #1
 80011bc:	713b      	strb	r3, [r7, #4]
					  		  result=num2-num1;
 80011be:	787a      	ldrb	r2, [r7, #1]
 80011c0:	79bb      	ldrb	r3, [r7, #6]
 80011c2:	1ad3      	subs	r3, r2, r3
 80011c4:	71fb      	strb	r3, [r7, #7]
					  	  }
					  	  else{
					  		result=num1-num2;
					  	  }
					  		  break;
 80011c6:	e010      	b.n	80011ea <main+0x16e>
					  		result=num1-num2;
 80011c8:	79ba      	ldrb	r2, [r7, #6]
 80011ca:	787b      	ldrb	r3, [r7, #1]
 80011cc:	1ad3      	subs	r3, r2, r3
 80011ce:	71fb      	strb	r3, [r7, #7]
					  		  break;
 80011d0:	e00b      	b.n	80011ea <main+0x16e>
					  case '/': result=num1/num2;   break;
 80011d2:	79ba      	ldrb	r2, [r7, #6]
 80011d4:	787b      	ldrb	r3, [r7, #1]
 80011d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80011da:	71fb      	strb	r3, [r7, #7]
 80011dc:	e005      	b.n	80011ea <main+0x16e>
					  case '*': result=num1*num2;   break;
 80011de:	79bb      	ldrb	r3, [r7, #6]
 80011e0:	787a      	ldrb	r2, [r7, #1]
 80011e2:	fb02 f303 	mul.w	r3, r2, r3
 80011e6:	71fb      	strb	r3, [r7, #7]
 80011e8:	bf00      	nop
					 switch(sym){
 80011ea:	e010      	b.n	800120e <main+0x192>
					 }

				 }
		    	else if(pressed=='o' ){
 80011ec:	78bb      	ldrb	r3, [r7, #2]
 80011ee:	2b6f      	cmp	r3, #111	; 0x6f
 80011f0:	d10a      	bne.n	8001208 <main+0x18c>
					num1=0,num2=0,result=0;
 80011f2:	2300      	movs	r3, #0
 80011f4:	71bb      	strb	r3, [r7, #6]
 80011f6:	2300      	movs	r3, #0
 80011f8:	707b      	strb	r3, [r7, #1]
 80011fa:	2300      	movs	r3, #0
 80011fc:	71fb      	strb	r3, [r7, #7]
					input=First_Digit;
 80011fe:	2300      	movs	r3, #0
 8001200:	70fb      	strb	r3, [r7, #3]
					CLCD_voidClearScreen();
 8001202:	f7ff fa5f 	bl	80006c4 <CLCD_voidClearScreen>
				 }
				 else{
					 error();
				 }
				 break;
 8001206:	e02f      	b.n	8001268 <main+0x1ec>
					 error();
 8001208:	f7ff ff0e 	bl	8001028 <error>
				 break;
 800120c:	e02c      	b.n	8001268 <main+0x1ec>
 800120e:	e02b      	b.n	8001268 <main+0x1ec>
			 case Sympol_Result:
				 if((sym=pressed)=='='){
 8001210:	78bb      	ldrb	r3, [r7, #2]
 8001212:	717b      	strb	r3, [r7, #5]
 8001214:	797b      	ldrb	r3, [r7, #5]
 8001216:	2b3d      	cmp	r3, #61	; 0x3d
 8001218:	d114      	bne.n	8001244 <main+0x1c8>
					 sym=pressed;
 800121a:	78bb      	ldrb	r3, [r7, #2]
 800121c:	717b      	strb	r3, [r7, #5]
					 CLCD_voidSendData(pressed);
 800121e:	78bb      	ldrb	r3, [r7, #2]
 8001220:	4618      	mov	r0, r3
 8001222:	f7ff f946 	bl	80004b2 <CLCD_voidSendData>
					 if(flag_negative){
 8001226:	793b      	ldrb	r3, [r7, #4]
 8001228:	2b00      	cmp	r3, #0
 800122a:	d002      	beq.n	8001232 <main+0x1b6>
						 CLCD_voidSendData('-');
 800122c:	202d      	movs	r0, #45	; 0x2d
 800122e:	f7ff f940 	bl	80004b2 <CLCD_voidSendData>
					 }
					 CLCD_voidSendNumber(result);
 8001232:	79fb      	ldrb	r3, [r7, #7]
 8001234:	2200      	movs	r2, #0
 8001236:	461c      	mov	r4, r3
 8001238:	4615      	mov	r5, r2
 800123a:	4620      	mov	r0, r4
 800123c:	4629      	mov	r1, r5
 800123e:	f7ff f9a0 	bl	8000582 <CLCD_voidSendNumber>
						CLCD_voidClearScreen();
					}
				 else{
					 error();
				 }
				 break;
 8001242:	e00f      	b.n	8001264 <main+0x1e8>
			     else if(pressed=='o'){
 8001244:	78bb      	ldrb	r3, [r7, #2]
 8001246:	2b6f      	cmp	r3, #111	; 0x6f
 8001248:	d10a      	bne.n	8001260 <main+0x1e4>
						num1=0,num2=0,result=0;
 800124a:	2300      	movs	r3, #0
 800124c:	71bb      	strb	r3, [r7, #6]
 800124e:	2300      	movs	r3, #0
 8001250:	707b      	strb	r3, [r7, #1]
 8001252:	2300      	movs	r3, #0
 8001254:	71fb      	strb	r3, [r7, #7]
						input=First_Digit;
 8001256:	2300      	movs	r3, #0
 8001258:	70fb      	strb	r3, [r7, #3]
						CLCD_voidClearScreen();
 800125a:	f7ff fa33 	bl	80006c4 <CLCD_voidClearScreen>
				 break;
 800125e:	e001      	b.n	8001264 <main+0x1e8>
					 error();
 8001260:	f7ff fee2 	bl	8001028 <error>
				 break;
 8001264:	bf00      	nop
 8001266:	e71e      	b.n	80010a6 <main+0x2a>
		if((pressed=Get_pressed())!=KPD_NotPressed){
 8001268:	e71d      	b.n	80010a6 <main+0x2a>
 800126a:	bf00      	nop

0800126c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800126c:	480d      	ldr	r0, [pc, #52]	; (80012a4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800126e:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001270:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001274:	480c      	ldr	r0, [pc, #48]	; (80012a8 <LoopForever+0x6>)
  ldr r1, =_edata
 8001276:	490d      	ldr	r1, [pc, #52]	; (80012ac <LoopForever+0xa>)
  ldr r2, =_sidata
 8001278:	4a0d      	ldr	r2, [pc, #52]	; (80012b0 <LoopForever+0xe>)
  movs r3, #0
 800127a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800127c:	e002      	b.n	8001284 <LoopCopyDataInit>

0800127e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800127e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001280:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001282:	3304      	adds	r3, #4

08001284 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001284:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001286:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001288:	d3f9      	bcc.n	800127e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800128a:	4a0a      	ldr	r2, [pc, #40]	; (80012b4 <LoopForever+0x12>)
  ldr r4, =_ebss
 800128c:	4c0a      	ldr	r4, [pc, #40]	; (80012b8 <LoopForever+0x16>)
  movs r3, #0
 800128e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001290:	e001      	b.n	8001296 <LoopFillZerobss>

08001292 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001292:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001294:	3204      	adds	r2, #4

08001296 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001296:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001298:	d3fb      	bcc.n	8001292 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800129a:	f000 f811 	bl	80012c0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800129e:	f7ff feed 	bl	800107c <main>

080012a2 <LoopForever>:

LoopForever:
  b LoopForever
 80012a2:	e7fe      	b.n	80012a2 <LoopForever>
  ldr   r0, =_estack
 80012a4:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 80012a8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80012ac:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 80012b0:	08001348 	.word	0x08001348
  ldr r2, =_sbss
 80012b4:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 80012b8:	200000ec 	.word	0x200000ec

080012bc <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80012bc:	e7fe      	b.n	80012bc <ADC1_2_IRQHandler>
	...

080012c0 <__libc_init_array>:
 80012c0:	b570      	push	{r4, r5, r6, lr}
 80012c2:	2600      	movs	r6, #0
 80012c4:	4d0c      	ldr	r5, [pc, #48]	; (80012f8 <__libc_init_array+0x38>)
 80012c6:	4c0d      	ldr	r4, [pc, #52]	; (80012fc <__libc_init_array+0x3c>)
 80012c8:	1b64      	subs	r4, r4, r5
 80012ca:	10a4      	asrs	r4, r4, #2
 80012cc:	42a6      	cmp	r6, r4
 80012ce:	d109      	bne.n	80012e4 <__libc_init_array+0x24>
 80012d0:	f000 f81a 	bl	8001308 <_init>
 80012d4:	2600      	movs	r6, #0
 80012d6:	4d0a      	ldr	r5, [pc, #40]	; (8001300 <__libc_init_array+0x40>)
 80012d8:	4c0a      	ldr	r4, [pc, #40]	; (8001304 <__libc_init_array+0x44>)
 80012da:	1b64      	subs	r4, r4, r5
 80012dc:	10a4      	asrs	r4, r4, #2
 80012de:	42a6      	cmp	r6, r4
 80012e0:	d105      	bne.n	80012ee <__libc_init_array+0x2e>
 80012e2:	bd70      	pop	{r4, r5, r6, pc}
 80012e4:	f855 3b04 	ldr.w	r3, [r5], #4
 80012e8:	4798      	blx	r3
 80012ea:	3601      	adds	r6, #1
 80012ec:	e7ee      	b.n	80012cc <__libc_init_array+0xc>
 80012ee:	f855 3b04 	ldr.w	r3, [r5], #4
 80012f2:	4798      	blx	r3
 80012f4:	3601      	adds	r6, #1
 80012f6:	e7f2      	b.n	80012de <__libc_init_array+0x1e>
 80012f8:	08001340 	.word	0x08001340
 80012fc:	08001340 	.word	0x08001340
 8001300:	08001340 	.word	0x08001340
 8001304:	08001344 	.word	0x08001344

08001308 <_init>:
 8001308:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800130a:	bf00      	nop
 800130c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800130e:	bc08      	pop	{r3}
 8001310:	469e      	mov	lr, r3
 8001312:	4770      	bx	lr

08001314 <_fini>:
 8001314:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001316:	bf00      	nop
 8001318:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800131a:	bc08      	pop	{r3}
 800131c:	469e      	mov	lr, r3
 800131e:	4770      	bx	lr
