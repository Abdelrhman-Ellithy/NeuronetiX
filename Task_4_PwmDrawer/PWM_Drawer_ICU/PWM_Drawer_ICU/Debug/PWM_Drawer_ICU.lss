
PWM_Drawer_ICU.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000bbc  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000c  00800060  00000bbc  00000c50  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000014  0080006c  0080006c  00000c5c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000c5c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000c8c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000268  00000000  00000000  00000cc8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001e21  00000000  00000000  00000f30  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000b85  00000000  00000000  00002d51  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000010c7  00000000  00000000  000038d6  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000006fc  00000000  00000000  000049a0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000d9e  00000000  00000000  0000509c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000015fc  00000000  00000000  00005e3a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000218  00000000  00000000  00007436  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 ea 04 	jmp	0x9d4	; 0x9d4 <__vector_6>
  1c:	0c 94 98 04 	jmp	0x930	; 0x930 <__vector_7>
  20:	0c 94 c1 04 	jmp	0x982	; 0x982 <__vector_8>
  24:	0c 94 6f 04 	jmp	0x8de	; 0x8de <__vector_9>
  28:	0c 94 c8 02 	jmp	0x590	; 0x590 <__vector_10>
  2c:	0c 94 9f 02 	jmp	0x53e	; 0x53e <__vector_11>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ec eb       	ldi	r30, 0xBC	; 188
  68:	fb e0       	ldi	r31, 0x0B	; 11
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	ac 36       	cpi	r26, 0x6C	; 108
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	ac e6       	ldi	r26, 0x6C	; 108
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a0 38       	cpi	r26, 0x80	; 128
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 2b 02 	call	0x456	; 0x456 <main>
  8a:	0c 94 dc 05 	jmp	0xbb8	; 0xbb8 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <CLCD_voidSendFallingEdge>:
		CLCD_voidSendData( Copy_u8ptrString[LOC_u8Iterator] );
		LOC_u8Iterator++ ;

	}

}
  92:	41 e0       	ldi	r20, 0x01	; 1
  94:	61 e0       	ldi	r22, 0x01	; 1
  96:	80 e6       	ldi	r24, 0x60	; 96
  98:	90 e0       	ldi	r25, 0x00	; 0
  9a:	0e 94 65 02 	call	0x4ca	; 0x4ca <DIO_PIN_write>
  9e:	8f ec       	ldi	r24, 0xCF	; 207
  a0:	97 e0       	ldi	r25, 0x07	; 7
  a2:	01 97       	sbiw	r24, 0x01	; 1
  a4:	f1 f7       	brne	.-4      	; 0xa2 <CLCD_voidSendFallingEdge+0x10>
  a6:	00 c0       	rjmp	.+0      	; 0xa8 <CLCD_voidSendFallingEdge+0x16>
  a8:	00 00       	nop
  aa:	40 e0       	ldi	r20, 0x00	; 0
  ac:	61 e0       	ldi	r22, 0x01	; 1
  ae:	80 e6       	ldi	r24, 0x60	; 96
  b0:	90 e0       	ldi	r25, 0x00	; 0
  b2:	0e 94 65 02 	call	0x4ca	; 0x4ca <DIO_PIN_write>
  b6:	8f ec       	ldi	r24, 0xCF	; 207
  b8:	97 e0       	ldi	r25, 0x07	; 7
  ba:	01 97       	sbiw	r24, 0x01	; 1
  bc:	f1 f7       	brne	.-4      	; 0xba <CLCD_voidSendFallingEdge+0x28>
  be:	00 c0       	rjmp	.+0      	; 0xc0 <CLCD_voidSendFallingEdge+0x2e>
  c0:	00 00       	nop
  c2:	08 95       	ret

000000c4 <CLCD_voidSendData>:
  c4:	68 2f       	mov	r22, r24
  c6:	86 e6       	ldi	r24, 0x66	; 102
  c8:	90 e0       	ldi	r25, 0x00	; 0
  ca:	0e 94 8a 02 	call	0x514	; 0x514 <DIO_PORT_write>
  ce:	41 e0       	ldi	r20, 0x01	; 1
  d0:	60 e0       	ldi	r22, 0x00	; 0
  d2:	80 e6       	ldi	r24, 0x60	; 96
  d4:	90 e0       	ldi	r25, 0x00	; 0
  d6:	0e 94 65 02 	call	0x4ca	; 0x4ca <DIO_PIN_write>
  da:	0e 94 49 00 	call	0x92	; 0x92 <CLCD_voidSendFallingEdge>
  de:	8f ec       	ldi	r24, 0xCF	; 207
  e0:	97 e0       	ldi	r25, 0x07	; 7
  e2:	01 97       	sbiw	r24, 0x01	; 1
  e4:	f1 f7       	brne	.-4      	; 0xe2 <CLCD_voidSendData+0x1e>
  e6:	00 c0       	rjmp	.+0      	; 0xe8 <CLCD_voidSendData+0x24>
  e8:	00 00       	nop
  ea:	08 95       	ret

000000ec <CLCD_voidSendCommand>:
  ec:	68 2f       	mov	r22, r24
  ee:	86 e6       	ldi	r24, 0x66	; 102
  f0:	90 e0       	ldi	r25, 0x00	; 0
  f2:	0e 94 8a 02 	call	0x514	; 0x514 <DIO_PORT_write>
  f6:	40 e0       	ldi	r20, 0x00	; 0
  f8:	60 e0       	ldi	r22, 0x00	; 0
  fa:	80 e6       	ldi	r24, 0x60	; 96
  fc:	90 e0       	ldi	r25, 0x00	; 0
  fe:	0e 94 65 02 	call	0x4ca	; 0x4ca <DIO_PIN_write>
 102:	0e 94 49 00 	call	0x92	; 0x92 <CLCD_voidSendFallingEdge>
 106:	8f ec       	ldi	r24, 0xCF	; 207
 108:	97 e0       	ldi	r25, 0x07	; 7
 10a:	01 97       	sbiw	r24, 0x01	; 1
 10c:	f1 f7       	brne	.-4      	; 0x10a <CLCD_voidSendCommand+0x1e>
 10e:	00 c0       	rjmp	.+0      	; 0x110 <CLCD_voidSendCommand+0x24>
 110:	00 00       	nop
 112:	08 95       	ret

00000114 <CLCD_voidSendNumber>:
* Breif : This Function send number to the port which is defined in config.h
* Parameters :
            => Copy_u64Number --> number that you want to display
* return : nothing
*/
void CLCD_voidSendNumber   ( u64 Copy_u64Number    ){
 114:	2f 92       	push	r2
 116:	3f 92       	push	r3
 118:	4f 92       	push	r4
 11a:	5f 92       	push	r5
 11c:	6f 92       	push	r6
 11e:	7f 92       	push	r7
 120:	8f 92       	push	r8
 122:	9f 92       	push	r9
 124:	af 92       	push	r10
 126:	bf 92       	push	r11
 128:	cf 92       	push	r12
 12a:	df 92       	push	r13
 12c:	ef 92       	push	r14
 12e:	ff 92       	push	r15
 130:	0f 93       	push	r16
 132:	1f 93       	push	r17
 134:	cf 93       	push	r28
 136:	df 93       	push	r29
 138:	cd b7       	in	r28, 0x3d	; 61
 13a:	de b7       	in	r29, 0x3e	; 62
 13c:	28 97       	sbiw	r28, 0x08	; 8
 13e:	0f b6       	in	r0, 0x3f	; 63
 140:	f8 94       	cli
 142:	de bf       	out	0x3e, r29	; 62
 144:	0f be       	out	0x3f, r0	; 63
 146:	cd bf       	out	0x3d, r28	; 61
 148:	29 83       	std	Y+1, r18	; 0x01
 14a:	3a 83       	std	Y+2, r19	; 0x02
 14c:	4b 83       	std	Y+3, r20	; 0x03
 14e:	5c 83       	std	Y+4, r21	; 0x04
 150:	6d 83       	std	Y+5, r22	; 0x05
 152:	7e 83       	std	Y+6, r23	; 0x06
 154:	38 2e       	mov	r3, r24
 156:	29 2e       	mov	r2, r25

	u64 LOC_u64Reversed = 1 ;

	if( Copy_u64Number == 0 ){ CLCD_voidSendData('0'); }
 158:	a0 e0       	ldi	r26, 0x00	; 0
 15a:	0e 94 d0 05 	call	0xba0	; 0xba0 <__cmpdi2_s8>
 15e:	09 f0       	breq	.+2      	; 0x162 <CLCD_voidSendNumber+0x4e>
 160:	81 c0       	rjmp	.+258    	; 0x264 <CLCD_voidSendNumber+0x150>
 162:	80 e3       	ldi	r24, 0x30	; 48
 164:	0e 94 62 00 	call	0xc4	; 0xc4 <CLCD_voidSendData>
 168:	cb c0       	rjmp	.+406    	; 0x300 <CLCD_voidSendNumber+0x1ec>

	else{

		while( Copy_u64Number != 0 ){

			LOC_u64Reversed = ( LOC_u64Reversed * 10 ) + ( Copy_u64Number % 10 );
 16a:	2f 81       	ldd	r18, Y+7	; 0x07
 16c:	38 85       	ldd	r19, Y+8	; 0x08
 16e:	49 2d       	mov	r20, r9
 170:	58 2d       	mov	r21, r8
 172:	67 2d       	mov	r22, r7
 174:	76 2d       	mov	r23, r6
 176:	85 2d       	mov	r24, r5
 178:	94 2d       	mov	r25, r4
 17a:	01 e0       	ldi	r16, 0x01	; 1
 17c:	0e 94 ae 05 	call	0xb5c	; 0xb5c <__ashldi3>
 180:	82 2e       	mov	r8, r18
 182:	93 2e       	mov	r9, r19
 184:	48 87       	std	Y+8, r20	; 0x08
 186:	5f 83       	std	Y+7, r21	; 0x07
 188:	b6 2f       	mov	r27, r22
 18a:	a7 2f       	mov	r26, r23
 18c:	f8 2f       	mov	r31, r24
 18e:	e9 2f       	mov	r30, r25
 190:	02 e0       	ldi	r16, 0x02	; 2
 192:	0e 94 ae 05 	call	0xb5c	; 0xb5c <__ashldi3>
 196:	a2 2e       	mov	r10, r18
 198:	b3 2e       	mov	r11, r19
 19a:	c4 2e       	mov	r12, r20
 19c:	d5 2e       	mov	r13, r21
 19e:	e6 2e       	mov	r14, r22
 1a0:	f7 2e       	mov	r15, r23
 1a2:	08 2f       	mov	r16, r24
 1a4:	19 2f       	mov	r17, r25
 1a6:	28 2d       	mov	r18, r8
 1a8:	39 2d       	mov	r19, r9
 1aa:	48 85       	ldd	r20, Y+8	; 0x08
 1ac:	5f 81       	ldd	r21, Y+7	; 0x07
 1ae:	6b 2f       	mov	r22, r27
 1b0:	7a 2f       	mov	r23, r26
 1b2:	8f 2f       	mov	r24, r31
 1b4:	9e 2f       	mov	r25, r30
 1b6:	0e 94 c7 05 	call	0xb8e	; 0xb8e <__adddi3>
 1ba:	28 87       	std	Y+8, r18	; 0x08
 1bc:	3f 83       	std	Y+7, r19	; 0x07
 1be:	94 2e       	mov	r9, r20
 1c0:	85 2e       	mov	r8, r21
 1c2:	76 2e       	mov	r7, r22
 1c4:	67 2e       	mov	r6, r23
 1c6:	58 2e       	mov	r5, r24
 1c8:	49 2e       	mov	r4, r25
 1ca:	0f 2e       	mov	r0, r31
 1cc:	fa e0       	ldi	r31, 0x0A	; 10
 1ce:	af 2e       	mov	r10, r31
 1d0:	f0 2d       	mov	r31, r0
 1d2:	b1 2c       	mov	r11, r1
 1d4:	c1 2c       	mov	r12, r1
 1d6:	d1 2c       	mov	r13, r1
 1d8:	e1 2c       	mov	r14, r1
 1da:	f1 2c       	mov	r15, r1
 1dc:	00 e0       	ldi	r16, 0x00	; 0
 1de:	10 e0       	ldi	r17, 0x00	; 0
 1e0:	29 81       	ldd	r18, Y+1	; 0x01
 1e2:	3a 81       	ldd	r19, Y+2	; 0x02
 1e4:	4b 81       	ldd	r20, Y+3	; 0x03
 1e6:	5c 81       	ldd	r21, Y+4	; 0x04
 1e8:	6d 81       	ldd	r22, Y+5	; 0x05
 1ea:	7e 81       	ldd	r23, Y+6	; 0x06
 1ec:	83 2d       	mov	r24, r3
 1ee:	92 2d       	mov	r25, r2
 1f0:	0e 94 4f 05 	call	0xa9e	; 0xa9e <__umoddi3>
 1f4:	a2 2e       	mov	r10, r18
 1f6:	b3 2e       	mov	r11, r19
 1f8:	c4 2e       	mov	r12, r20
 1fa:	d5 2e       	mov	r13, r21
 1fc:	e6 2e       	mov	r14, r22
 1fe:	f7 2e       	mov	r15, r23
 200:	08 2f       	mov	r16, r24
 202:	19 2f       	mov	r17, r25
 204:	28 85       	ldd	r18, Y+8	; 0x08
 206:	3f 81       	ldd	r19, Y+7	; 0x07
 208:	49 2d       	mov	r20, r9
 20a:	58 2d       	mov	r21, r8
 20c:	67 2d       	mov	r22, r7
 20e:	76 2d       	mov	r23, r6
 210:	85 2d       	mov	r24, r5
 212:	94 2d       	mov	r25, r4
 214:	0e 94 c7 05 	call	0xb8e	; 0xb8e <__adddi3>
 218:	2f 83       	std	Y+7, r18	; 0x07
 21a:	38 87       	std	Y+8, r19	; 0x08
 21c:	94 2e       	mov	r9, r20
 21e:	85 2e       	mov	r8, r21
 220:	76 2e       	mov	r7, r22
 222:	67 2e       	mov	r6, r23
 224:	58 2e       	mov	r5, r24
 226:	49 2e       	mov	r4, r25
			Copy_u64Number /= 10 ;
 228:	0f 2e       	mov	r0, r31
 22a:	fa e0       	ldi	r31, 0x0A	; 10
 22c:	af 2e       	mov	r10, r31
 22e:	f0 2d       	mov	r31, r0
 230:	b1 2c       	mov	r11, r1
 232:	c1 2c       	mov	r12, r1
 234:	d1 2c       	mov	r13, r1
 236:	e1 2c       	mov	r14, r1
 238:	f1 2c       	mov	r15, r1
 23a:	00 e0       	ldi	r16, 0x00	; 0
 23c:	10 e0       	ldi	r17, 0x00	; 0
 23e:	29 81       	ldd	r18, Y+1	; 0x01
 240:	3a 81       	ldd	r19, Y+2	; 0x02
 242:	4b 81       	ldd	r20, Y+3	; 0x03
 244:	5c 81       	ldd	r21, Y+4	; 0x04
 246:	6d 81       	ldd	r22, Y+5	; 0x05
 248:	7e 81       	ldd	r23, Y+6	; 0x06
 24a:	83 2d       	mov	r24, r3
 24c:	92 2d       	mov	r25, r2
 24e:	0e 94 51 05 	call	0xaa2	; 0xaa2 <__udivdi3>
 252:	29 83       	std	Y+1, r18	; 0x01
 254:	3a 83       	std	Y+2, r19	; 0x02
 256:	4b 83       	std	Y+3, r20	; 0x03
 258:	5c 83       	std	Y+4, r21	; 0x04
 25a:	6d 83       	std	Y+5, r22	; 0x05
 25c:	7e 83       	std	Y+6, r23	; 0x06
 25e:	38 2e       	mov	r3, r24
 260:	29 2e       	mov	r2, r25
 262:	09 c0       	rjmp	.+18     	; 0x276 <CLCD_voidSendNumber+0x162>
 264:	81 e0       	ldi	r24, 0x01	; 1
 266:	18 86       	std	Y+8, r1	; 0x08
 268:	91 2c       	mov	r9, r1
 26a:	81 2c       	mov	r8, r1
 26c:	71 2c       	mov	r7, r1
 26e:	61 2c       	mov	r6, r1
 270:	51 2c       	mov	r5, r1
 272:	41 2c       	mov	r4, r1
 274:	8f 83       	std	Y+7, r24	; 0x07

	if( Copy_u64Number == 0 ){ CLCD_voidSendData('0'); }

	else{

		while( Copy_u64Number != 0 ){
 276:	29 81       	ldd	r18, Y+1	; 0x01
 278:	3a 81       	ldd	r19, Y+2	; 0x02
 27a:	4b 81       	ldd	r20, Y+3	; 0x03
 27c:	5c 81       	ldd	r21, Y+4	; 0x04
 27e:	6d 81       	ldd	r22, Y+5	; 0x05
 280:	7e 81       	ldd	r23, Y+6	; 0x06
 282:	83 2d       	mov	r24, r3
 284:	92 2d       	mov	r25, r2
 286:	a0 e0       	ldi	r26, 0x00	; 0
 288:	0e 94 d0 05 	call	0xba0	; 0xba0 <__cmpdi2_s8>
 28c:	09 f0       	breq	.+2      	; 0x290 <CLCD_voidSendNumber+0x17c>
 28e:	6d cf       	rjmp	.-294    	; 0x16a <CLCD_voidSendNumber+0x56>
 290:	2b c0       	rjmp	.+86     	; 0x2e8 <CLCD_voidSendNumber+0x1d4>
			Copy_u64Number /= 10 ;

		}
		while( LOC_u64Reversed != 1 ){

			CLCD_voidSendData( ( LOC_u64Reversed % 10 ) + 48 );
 292:	0f 2e       	mov	r0, r31
 294:	fa e0       	ldi	r31, 0x0A	; 10
 296:	af 2e       	mov	r10, r31
 298:	f0 2d       	mov	r31, r0
 29a:	b1 2c       	mov	r11, r1
 29c:	c1 2c       	mov	r12, r1
 29e:	d1 2c       	mov	r13, r1
 2a0:	e1 2c       	mov	r14, r1
 2a2:	f1 2c       	mov	r15, r1
 2a4:	00 e0       	ldi	r16, 0x00	; 0
 2a6:	10 e0       	ldi	r17, 0x00	; 0
 2a8:	2f 81       	ldd	r18, Y+7	; 0x07
 2aa:	38 85       	ldd	r19, Y+8	; 0x08
 2ac:	49 2d       	mov	r20, r9
 2ae:	58 2d       	mov	r21, r8
 2b0:	67 2d       	mov	r22, r7
 2b2:	76 2d       	mov	r23, r6
 2b4:	85 2d       	mov	r24, r5
 2b6:	94 2d       	mov	r25, r4
 2b8:	0e 94 4f 05 	call	0xa9e	; 0xa9e <__umoddi3>
 2bc:	80 e3       	ldi	r24, 0x30	; 48
 2be:	82 0f       	add	r24, r18
 2c0:	0e 94 62 00 	call	0xc4	; 0xc4 <CLCD_voidSendData>
			LOC_u64Reversed /= 10 ;
 2c4:	2f 81       	ldd	r18, Y+7	; 0x07
 2c6:	38 85       	ldd	r19, Y+8	; 0x08
 2c8:	49 2d       	mov	r20, r9
 2ca:	58 2d       	mov	r21, r8
 2cc:	67 2d       	mov	r22, r7
 2ce:	76 2d       	mov	r23, r6
 2d0:	85 2d       	mov	r24, r5
 2d2:	94 2d       	mov	r25, r4
 2d4:	0e 94 51 05 	call	0xaa2	; 0xaa2 <__udivdi3>
 2d8:	2f 83       	std	Y+7, r18	; 0x07
 2da:	38 87       	std	Y+8, r19	; 0x08
 2dc:	94 2e       	mov	r9, r20
 2de:	85 2e       	mov	r8, r21
 2e0:	76 2e       	mov	r7, r22
 2e2:	67 2e       	mov	r6, r23
 2e4:	58 2e       	mov	r5, r24
 2e6:	49 2e       	mov	r4, r25

			LOC_u64Reversed = ( LOC_u64Reversed * 10 ) + ( Copy_u64Number % 10 );
			Copy_u64Number /= 10 ;

		}
		while( LOC_u64Reversed != 1 ){
 2e8:	2f 81       	ldd	r18, Y+7	; 0x07
 2ea:	38 85       	ldd	r19, Y+8	; 0x08
 2ec:	49 2d       	mov	r20, r9
 2ee:	58 2d       	mov	r21, r8
 2f0:	67 2d       	mov	r22, r7
 2f2:	76 2d       	mov	r23, r6
 2f4:	85 2d       	mov	r24, r5
 2f6:	94 2d       	mov	r25, r4
 2f8:	a1 e0       	ldi	r26, 0x01	; 1
 2fa:	0e 94 d0 05 	call	0xba0	; 0xba0 <__cmpdi2_s8>
 2fe:	49 f6       	brne	.-110    	; 0x292 <CLCD_voidSendNumber+0x17e>

		}

	}

}
 300:	28 96       	adiw	r28, 0x08	; 8
 302:	0f b6       	in	r0, 0x3f	; 63
 304:	f8 94       	cli
 306:	de bf       	out	0x3e, r29	; 62
 308:	0f be       	out	0x3f, r0	; 63
 30a:	cd bf       	out	0x3d, r28	; 61
 30c:	df 91       	pop	r29
 30e:	cf 91       	pop	r28
 310:	1f 91       	pop	r17
 312:	0f 91       	pop	r16
 314:	ff 90       	pop	r15
 316:	ef 90       	pop	r14
 318:	df 90       	pop	r13
 31a:	cf 90       	pop	r12
 31c:	bf 90       	pop	r11
 31e:	af 90       	pop	r10
 320:	9f 90       	pop	r9
 322:	8f 90       	pop	r8
 324:	7f 90       	pop	r7
 326:	6f 90       	pop	r6
 328:	5f 90       	pop	r5
 32a:	4f 90       	pop	r4
 32c:	3f 90       	pop	r3
 32e:	2f 90       	pop	r2
 330:	08 95       	ret

00000332 <CLCD_voidSetPosition>:
*/
void CLCD_voidSetPosition ( u8 Copy_u8Row , u8 Copy_u8Col ){

	u8 LOC_u8data ;
	#if CLCD_Type == CLCd_2_16
		if(Copy_u8Row>2||Copy_u8Row<1||Copy_u8Col>16||Copy_u8Col<1)  //check
 332:	9f ef       	ldi	r25, 0xFF	; 255
 334:	98 0f       	add	r25, r24
 336:	92 30       	cpi	r25, 0x02	; 2
 338:	70 f4       	brcc	.+28     	; 0x356 <CLCD_voidSetPosition+0x24>
 33a:	61 31       	cpi	r22, 0x11	; 17
 33c:	70 f4       	brcc	.+28     	; 0x35a <CLCD_voidSetPosition+0x28>
 33e:	66 23       	and	r22, r22
 340:	71 f0       	breq	.+28     	; 0x35e <CLCD_voidSetPosition+0x2c>
		{
			LOC_u8data = lcd_Line_1 ;   // first location
		}

		else if( Copy_u8Row == CLCD_ROW_1 ){
 342:	81 30       	cpi	r24, 0x01	; 1
 344:	19 f4       	brne	.+6      	; 0x34c <CLCD_voidSetPosition+0x1a>

			LOC_u8data = ( ( lcd_Line_1 ) + ( Copy_u8Col - 1 ) );              //Row1 -> 0x80+col-1
 346:	2f e7       	ldi	r18, 0x7F	; 127
 348:	26 0f       	add	r18, r22
 34a:	0a c0       	rjmp	.+20     	; 0x360 <CLCD_voidSetPosition+0x2e>

		}

		else if( Copy_u8Row == CLCD_ROW_2 ){
 34c:	82 30       	cpi	r24, 0x02	; 2
 34e:	41 f4       	brne	.+16     	; 0x360 <CLCD_voidSetPosition+0x2e>

			LOC_u8data = ( ( lcd_Line_2)+  ( Copy_u8Col - 1 ) );       //Row2 -> 0xc0+col-1
 350:	2f eb       	ldi	r18, 0xBF	; 191
 352:	26 0f       	add	r18, r22
 354:	05 c0       	rjmp	.+10     	; 0x360 <CLCD_voidSetPosition+0x2e>

	u8 LOC_u8data ;
	#if CLCD_Type == CLCd_2_16
		if(Copy_u8Row>2||Copy_u8Row<1||Copy_u8Col>16||Copy_u8Col<1)  //check
		{
			LOC_u8data = lcd_Line_1 ;   // first location
 356:	20 e8       	ldi	r18, 0x80	; 128
 358:	03 c0       	rjmp	.+6      	; 0x360 <CLCD_voidSetPosition+0x2e>
 35a:	20 e8       	ldi	r18, 0x80	; 128
 35c:	01 c0       	rjmp	.+2      	; 0x360 <CLCD_voidSetPosition+0x2e>
 35e:	20 e8       	ldi	r18, 0x80	; 128

					LOC_u8data = ( ( lcd_Line_4) + ( Copy_u8Col - 1 ) );       //Row4 -> 0xc0+col-1

				}
	#endif
	CLCD_voidSendCommand ( LOC_u8data );
 360:	82 2f       	mov	r24, r18
 362:	0e 94 76 00 	call	0xec	; 0xec <CLCD_voidSendCommand>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 366:	8f ec       	ldi	r24, 0xCF	; 207
 368:	97 e0       	ldi	r25, 0x07	; 7
 36a:	01 97       	sbiw	r24, 0x01	; 1
 36c:	f1 f7       	brne	.-4      	; 0x36a <CLCD_voidSetPosition+0x38>
 36e:	00 c0       	rjmp	.+0      	; 0x370 <CLCD_voidSetPosition+0x3e>
 370:	00 00       	nop
 372:	08 95       	ret

00000374 <CLCD_voidClearScreen>:
* Parameters : nothing
* return : nothing
*/
void CLCD_voidClearScreen(void)
{
	CLCD_voidSendCommand(lcd_Clear);
 374:	81 e0       	ldi	r24, 0x01	; 1
 376:	0e 94 76 00 	call	0xec	; 0xec <CLCD_voidSendCommand>
	CLCD_voidSendCommand(lcd_Home);
 37a:	82 e0       	ldi	r24, 0x02	; 2
 37c:	0e 94 76 00 	call	0xec	; 0xec <CLCD_voidSendCommand>
 380:	8f e9       	ldi	r24, 0x9F	; 159
 382:	9f e0       	ldi	r25, 0x0F	; 15
 384:	01 97       	sbiw	r24, 0x01	; 1
 386:	f1 f7       	brne	.-4      	; 0x384 <CLCD_voidClearScreen+0x10>
 388:	00 c0       	rjmp	.+0      	; 0x38a <CLCD_voidClearScreen+0x16>
 38a:	00 00       	nop
 38c:	08 95       	ret

0000038e <CLCD_voidInit>:
 38e:	2f eb       	ldi	r18, 0xBF	; 191
 390:	8a ed       	ldi	r24, 0xDA	; 218
 392:	90 e0       	ldi	r25, 0x00	; 0
 394:	21 50       	subi	r18, 0x01	; 1
 396:	80 40       	sbci	r24, 0x00	; 0
 398:	90 40       	sbci	r25, 0x00	; 0
 39a:	e1 f7       	brne	.-8      	; 0x394 <CLCD_voidInit+0x6>
 39c:	00 c0       	rjmp	.+0      	; 0x39e <CLCD_voidInit+0x10>
 39e:	00 00       	nop
	DIO_PIN_init ( CLCD_CONTROL_PORT , CLCD_RS , DIO_PORT_OUTPUT  );
	DIO_PIN_init ( CLCD_CONTROL_PORT , CLCD_RW , DIO_PORT_OUTPUT  );
	DIO_PIN_init ( CLCD_CONTROL_PORT , CLCD_EN , DIO_PORT_OUTPUT  );
*/
	/* Return cursor to the first position on the first line  */
	CLCD_voidSendCommand(lcd_Home);
 3a0:	82 e0       	ldi	r24, 0x02	; 2
 3a2:	0e 94 76 00 	call	0xec	; 0xec <CLCD_voidSendCommand>
 3a6:	8f ec       	ldi	r24, 0xCF	; 207
 3a8:	97 e0       	ldi	r25, 0x07	; 7
 3aa:	01 97       	sbiw	r24, 0x01	; 1
 3ac:	f1 f7       	brne	.-4      	; 0x3aa <CLCD_voidInit+0x1c>
 3ae:	00 c0       	rjmp	.+0      	; 0x3b0 <CLCD_voidInit+0x22>
 3b0:	00 00       	nop
	_delay_ms(1);

	/*FUNCTION SET Command : 2 lines , 5*8 font size */
	CLCD_voidSendCommand( EIGHT_BITS ); // 8 Bit Mode ==> 0x38
 3b2:	88 e3       	ldi	r24, 0x38	; 56
 3b4:	0e 94 76 00 	call	0xec	; 0xec <CLCD_voidSendCommand>
 3b8:	8f ec       	ldi	r24, 0xCF	; 207
 3ba:	97 e0       	ldi	r25, 0x07	; 7
 3bc:	01 97       	sbiw	r24, 0x01	; 1
 3be:	f1 f7       	brne	.-4      	; 0x3bc <CLCD_voidInit+0x2e>
 3c0:	00 c0       	rjmp	.+0      	; 0x3c2 <CLCD_voidInit+0x34>
 3c2:	00 00       	nop
	_delay_ms(1); // wait more than 39 Ms

	/* DISPLAY & Cursor (ON / OFF) Control */
	CLCD_voidSendCommand( Cursor_Mode );
 3c4:	8c e0       	ldi	r24, 0x0C	; 12
 3c6:	0e 94 76 00 	call	0xec	; 0xec <CLCD_voidSendCommand>
 3ca:	8f ec       	ldi	r24, 0xCF	; 207
 3cc:	97 e0       	ldi	r25, 0x07	; 7
 3ce:	01 97       	sbiw	r24, 0x01	; 1
 3d0:	f1 f7       	brne	.-4      	; 0x3ce <CLCD_voidInit+0x40>
 3d2:	00 c0       	rjmp	.+0      	; 0x3d4 <CLCD_voidInit+0x46>
 3d4:	00 00       	nop
	_delay_ms(1);

	/* DISPLAY CLEAR */
	CLCD_voidClearScreen();
 3d6:	0e 94 ba 01 	call	0x374	; 0x374 <CLCD_voidClearScreen>

	/* ENTRY MODE  SET*/
	CLCD_voidSendCommand( lcd_EntryMode );
 3da:	86 e0       	ldi	r24, 0x06	; 6
 3dc:	0e 94 76 00 	call	0xec	; 0xec <CLCD_voidSendCommand>
 3e0:	8f ec       	ldi	r24, 0xCF	; 207
 3e2:	97 e0       	ldi	r25, 0x07	; 7
 3e4:	01 97       	sbiw	r24, 0x01	; 1
 3e6:	f1 f7       	brne	.-4      	; 0x3e4 <CLCD_voidInit+0x56>
 3e8:	00 c0       	rjmp	.+0      	; 0x3ea <CLCD_voidInit+0x5c>
 3ea:	00 00       	nop
 3ec:	08 95       	ret

000003ee <Increamnt_ovICU>:
#include "LIB/BIT_OPERATIONS.h"

volatile u8  ICU_OV_CountTemp=0;

void Increamnt_ovICU(){
	ICU_OV_CountTemp++;
 3ee:	80 91 6c 00 	lds	r24, 0x006C	; 0x80006c <__data_end>
 3f2:	8f 5f       	subi	r24, 0xFF	; 255
 3f4:	80 93 6c 00 	sts	0x006C, r24	; 0x80006c <__data_end>
 3f8:	08 95       	ret

000003fa <Print_On_Screen>:
}

void Print_On_Screen(u8 pwm, u32 freq){
 3fa:	cf 92       	push	r12
 3fc:	df 92       	push	r13
 3fe:	ef 92       	push	r14
 400:	ff 92       	push	r15
 402:	1f 93       	push	r17
 404:	cf 93       	push	r28
 406:	df 93       	push	r29
 408:	18 2f       	mov	r17, r24
 40a:	6a 01       	movw	r12, r20
 40c:	7b 01       	movw	r14, r22
	
	CLCD_voidClearScreen();
 40e:	0e 94 ba 01 	call	0x374	; 0x374 <CLCD_voidClearScreen>
	CLCD_voidSendNumber((u64)freq);
 412:	d7 01       	movw	r26, r14
 414:	c6 01       	movw	r24, r12
 416:	2c 2d       	mov	r18, r12
 418:	39 2f       	mov	r19, r25
 41a:	4a 2f       	mov	r20, r26
 41c:	5b 2f       	mov	r21, r27
 41e:	60 e0       	ldi	r22, 0x00	; 0
 420:	70 e0       	ldi	r23, 0x00	; 0
 422:	80 e0       	ldi	r24, 0x00	; 0
 424:	90 e0       	ldi	r25, 0x00	; 0
 426:	0e 94 8a 00 	call	0x114	; 0x114 <CLCD_voidSendNumber>
	CLCD_voidSetPosition(CLCD_ROW_2,CLCD_COL_1);
 42a:	61 e0       	ldi	r22, 0x01	; 1
 42c:	82 e0       	ldi	r24, 0x02	; 2
 42e:	0e 94 99 01 	call	0x332	; 0x332 <CLCD_voidSetPosition>
	CLCD_voidSendNumber((u64)pwm);
 432:	21 2f       	mov	r18, r17
 434:	30 e0       	ldi	r19, 0x00	; 0
 436:	40 e0       	ldi	r20, 0x00	; 0
 438:	50 e0       	ldi	r21, 0x00	; 0
 43a:	60 e0       	ldi	r22, 0x00	; 0
 43c:	70 e0       	ldi	r23, 0x00	; 0
 43e:	80 e0       	ldi	r24, 0x00	; 0
 440:	90 e0       	ldi	r25, 0x00	; 0
 442:	0e 94 8a 00 	call	0x114	; 0x114 <CLCD_voidSendNumber>
	
}
 446:	df 91       	pop	r29
 448:	cf 91       	pop	r28
 44a:	1f 91       	pop	r17
 44c:	ff 90       	pop	r15
 44e:	ef 90       	pop	r14
 450:	df 90       	pop	r13
 452:	cf 90       	pop	r12
 454:	08 95       	ret

00000456 <main>:


int main(void)
{
 456:	cf 93       	push	r28
 458:	df 93       	push	r29
 45a:	00 d0       	rcall	.+0      	; 0x45c <main+0x6>
 45c:	00 d0       	rcall	.+0      	; 0x45e <main+0x8>
 45e:	1f 92       	push	r1
 460:	cd b7       	in	r28, 0x3d	; 61
 462:	de b7       	in	r29, 0x3e	; 62
	PORT_voidInit();
 464:	0e 94 91 02 	call	0x522	; 0x522 <PORT_voidInit>
	Timer1_Init_PostBuild( TIMER1_NORMAL_MODE , TIMER1_SCALER_1, OCRA_DISCONNECTED,OCRB_NON_INVERTING);
 468:	22 e0       	ldi	r18, 0x02	; 2
 46a:	40 e0       	ldi	r20, 0x00	; 0
 46c:	61 e0       	ldi	r22, 0x01	; 1
 46e:	80 e0       	ldi	r24, 0x00	; 0
 470:	0e 94 f1 02 	call	0x5e2	; 0x5e2 <Timer1_Init_PostBuild>
	Timer1_OVF_SetCallBack(Increamnt_ovICU);
 474:	87 ef       	ldi	r24, 0xF7	; 247
 476:	91 e0       	ldi	r25, 0x01	; 1
 478:	0e 94 e0 03 	call	0x7c0	; 0x7c0 <Timer1_OVF_SetCallBack>
	CLCD_voidInit();
 47c:	0e 94 c7 01 	call	0x38e	; 0x38e <CLCD_voidInit>
	//Timer1_OVF_InterruptEnable();
	sei();
 480:	78 94       	sei
	u32  volatile Freq_ICU;
	u8   volatile PWM_ICU;
	u8	 PWM_Prevouis=0;
	u32	 Freq_Prevouis=0;
 482:	c1 2c       	mov	r12, r1
 484:	d1 2c       	mov	r13, r1
 486:	76 01       	movw	r14, r12
	CLCD_voidInit();
	//Timer1_OVF_InterruptEnable();
	sei();
	u32  volatile Freq_ICU;
	u8   volatile PWM_ICU;
	u8	 PWM_Prevouis=0;
 488:	10 e0       	ldi	r17, 0x00	; 0
	u32	 Freq_Prevouis=0;
	
    while (1) 
    {	
		// ICU_u8PWM_Mesure(&PWM_ICU, &Freq_ICU);
		  PWM_Measure(&Freq_ICU, &PWM_ICU);
 48a:	be 01       	movw	r22, r28
 48c:	6b 5f       	subi	r22, 0xFB	; 251
 48e:	7f 4f       	sbci	r23, 0xFF	; 255
 490:	ce 01       	movw	r24, r28
 492:	01 96       	adiw	r24, 0x01	; 1
 494:	0e 94 ea 03 	call	0x7d4	; 0x7d4 <PWM_Measure>
		 if( (Freq_ICU!=Freq_Prevouis) || (PWM_ICU!=PWM_Prevouis) ){
 498:	89 81       	ldd	r24, Y+1	; 0x01
 49a:	9a 81       	ldd	r25, Y+2	; 0x02
 49c:	ab 81       	ldd	r26, Y+3	; 0x03
 49e:	bc 81       	ldd	r27, Y+4	; 0x04
 4a0:	c8 16       	cp	r12, r24
 4a2:	d9 06       	cpc	r13, r25
 4a4:	ea 06       	cpc	r14, r26
 4a6:	fb 06       	cpc	r15, r27
 4a8:	19 f4       	brne	.+6      	; 0x4b0 <main+0x5a>
 4aa:	8d 81       	ldd	r24, Y+5	; 0x05
 4ac:	18 17       	cp	r17, r24
 4ae:	69 f3       	breq	.-38     	; 0x48a <main+0x34>
			
				 Print_On_Screen(PWM_ICU,Freq_ICU); 
 4b0:	49 81       	ldd	r20, Y+1	; 0x01
 4b2:	5a 81       	ldd	r21, Y+2	; 0x02
 4b4:	6b 81       	ldd	r22, Y+3	; 0x03
 4b6:	7c 81       	ldd	r23, Y+4	; 0x04
 4b8:	8d 81       	ldd	r24, Y+5	; 0x05
 4ba:	0e 94 fd 01 	call	0x3fa	; 0x3fa <Print_On_Screen>
				 PWM_Prevouis=PWM_ICU;
 4be:	1d 81       	ldd	r17, Y+5	; 0x05
				 Freq_Prevouis=Freq_ICU; 
 4c0:	c9 80       	ldd	r12, Y+1	; 0x01
 4c2:	da 80       	ldd	r13, Y+2	; 0x02
 4c4:	eb 80       	ldd	r14, Y+3	; 0x03
 4c6:	fc 80       	ldd	r15, Y+4	; 0x04
 4c8:	e0 cf       	rjmp	.-64     	; 0x48a <main+0x34>

000004ca <DIO_PIN_write>:
}

void DIO_PIN_write(  GPIO_PORT* portname ,u8 pinnumber , u8 value ){
	

		if (value==DIO_PIN_HIGH)
 4ca:	41 30       	cpi	r20, 0x01	; 1
 4cc:	81 f4       	brne	.+32     	; 0x4ee <DIO_PIN_write+0x24>
		{
			SET_BIT(*(portname->PORT),pinnumber);
 4ce:	dc 01       	movw	r26, r24
 4d0:	12 96       	adiw	r26, 0x02	; 2
 4d2:	ed 91       	ld	r30, X+
 4d4:	fc 91       	ld	r31, X
 4d6:	13 97       	sbiw	r26, 0x03	; 3
 4d8:	20 81       	ld	r18, Z
 4da:	81 e0       	ldi	r24, 0x01	; 1
 4dc:	90 e0       	ldi	r25, 0x00	; 0
 4de:	02 c0       	rjmp	.+4      	; 0x4e4 <DIO_PIN_write+0x1a>
 4e0:	88 0f       	add	r24, r24
 4e2:	99 1f       	adc	r25, r25
 4e4:	6a 95       	dec	r22
 4e6:	e2 f7       	brpl	.-8      	; 0x4e0 <DIO_PIN_write+0x16>
 4e8:	82 2b       	or	r24, r18
 4ea:	80 83       	st	Z, r24
 4ec:	08 95       	ret
			
		}
		else if (value==DIO_PIN_LOW)
 4ee:	41 11       	cpse	r20, r1
 4f0:	10 c0       	rjmp	.+32     	; 0x512 <DIO_PIN_write+0x48>
		{
			CLEAR_BIT(*(portname->PORT),pinnumber);
 4f2:	dc 01       	movw	r26, r24
 4f4:	12 96       	adiw	r26, 0x02	; 2
 4f6:	ed 91       	ld	r30, X+
 4f8:	fc 91       	ld	r31, X
 4fa:	13 97       	sbiw	r26, 0x03	; 3
 4fc:	20 81       	ld	r18, Z
 4fe:	81 e0       	ldi	r24, 0x01	; 1
 500:	90 e0       	ldi	r25, 0x00	; 0
 502:	02 c0       	rjmp	.+4      	; 0x508 <DIO_PIN_write+0x3e>
 504:	88 0f       	add	r24, r24
 506:	99 1f       	adc	r25, r25
 508:	6a 95       	dec	r22
 50a:	e2 f7       	brpl	.-8      	; 0x504 <DIO_PIN_write+0x3a>
 50c:	80 95       	com	r24
 50e:	82 23       	and	r24, r18
 510:	80 83       	st	Z, r24
 512:	08 95       	ret

00000514 <DIO_PORT_write>:
		}
		
	
}
void DIO_PORT_write(  GPIO_PORT* portname , u8 value ){
			WRITE_REG(*(portname->PORT),value);		
 514:	dc 01       	movw	r26, r24
 516:	12 96       	adiw	r26, 0x02	; 2
 518:	ed 91       	ld	r30, X+
 51a:	fc 91       	ld	r31, X
 51c:	13 97       	sbiw	r26, 0x03	; 3
 51e:	60 83       	st	Z, r22
 520:	08 95       	ret

00000522 <PORT_voidInit>:
#include "PORT_private.h"
#include "PORT_interface.h"

void PORT_voidInit(void)
{
	DDRA_Register=PORTA_DIR;
 522:	9e ef       	ldi	r25, 0xFE	; 254
 524:	9a bb       	out	0x1a, r25	; 26
	DDRB_Register=PORTB_DIR;
 526:	8f ef       	ldi	r24, 0xFF	; 255
 528:	87 bb       	out	0x17, r24	; 23
	DDRC_Register=PORTC_DIR;
 52a:	27 e0       	ldi	r18, 0x07	; 7
 52c:	24 bb       	out	0x14, r18	; 20
	DDRD_Register=PORTD_DIR;
 52e:	23 eb       	ldi	r18, 0xB3	; 179
 530:	21 bb       	out	0x11, r18	; 17
	
	/* 
		Hint : will set 1 if The pin input Pullup
	*/
	PORTA_Register=PORTA_INITIAL_VALUE;
 532:	9b bb       	out	0x1b, r25	; 27
	PORTB_Register=PORTB_INITIAL_VALUE;
 534:	88 bb       	out	0x18, r24	; 24
	PORTC_Register=PORTC_INITIAL_VALUE;
 536:	15 ba       	out	0x15, r1	; 21
	PORTD_Register=PORTD_INITIAL_VALUE;
 538:	8c e0       	ldi	r24, 0x0C	; 12
 53a:	82 bb       	out	0x12, r24	; 18
 53c:	08 95       	ret

0000053e <__vector_11>:
		Timer1_ICU_SetCallBack(ICU_Flag);
		Timer1_InputCaptureEdge(RISING);
		Timer1_ICU_InterruptEnable();
	}
	
}
 53e:	1f 92       	push	r1
 540:	0f 92       	push	r0
 542:	0f b6       	in	r0, 0x3f	; 63
 544:	0f 92       	push	r0
 546:	11 24       	eor	r1, r1
 548:	2f 93       	push	r18
 54a:	3f 93       	push	r19
 54c:	4f 93       	push	r20
 54e:	5f 93       	push	r21
 550:	6f 93       	push	r22
 552:	7f 93       	push	r23
 554:	8f 93       	push	r24
 556:	9f 93       	push	r25
 558:	af 93       	push	r26
 55a:	bf 93       	push	r27
 55c:	ef 93       	push	r30
 55e:	ff 93       	push	r31
 560:	e0 91 77 00 	lds	r30, 0x0077	; 0x800077 <TM0_OV_Fptr_callback>
 564:	f0 91 78 00 	lds	r31, 0x0078	; 0x800078 <TM0_OV_Fptr_callback+0x1>
 568:	30 97       	sbiw	r30, 0x00	; 0
 56a:	09 f0       	breq	.+2      	; 0x56e <__vector_11+0x30>
 56c:	09 95       	icall
 56e:	ff 91       	pop	r31
 570:	ef 91       	pop	r30
 572:	bf 91       	pop	r27
 574:	af 91       	pop	r26
 576:	9f 91       	pop	r25
 578:	8f 91       	pop	r24
 57a:	7f 91       	pop	r23
 57c:	6f 91       	pop	r22
 57e:	5f 91       	pop	r21
 580:	4f 91       	pop	r20
 582:	3f 91       	pop	r19
 584:	2f 91       	pop	r18
 586:	0f 90       	pop	r0
 588:	0f be       	out	0x3f, r0	; 63
 58a:	0f 90       	pop	r0
 58c:	1f 90       	pop	r1
 58e:	18 95       	reti

00000590 <__vector_10>:
 590:	1f 92       	push	r1
 592:	0f 92       	push	r0
 594:	0f b6       	in	r0, 0x3f	; 63
 596:	0f 92       	push	r0
 598:	11 24       	eor	r1, r1
 59a:	2f 93       	push	r18
 59c:	3f 93       	push	r19
 59e:	4f 93       	push	r20
 5a0:	5f 93       	push	r21
 5a2:	6f 93       	push	r22
 5a4:	7f 93       	push	r23
 5a6:	8f 93       	push	r24
 5a8:	9f 93       	push	r25
 5aa:	af 93       	push	r26
 5ac:	bf 93       	push	r27
 5ae:	ef 93       	push	r30
 5b0:	ff 93       	push	r31
 5b2:	e0 91 75 00 	lds	r30, 0x0075	; 0x800075 <TM0_OCO_Fptr_callback>
 5b6:	f0 91 76 00 	lds	r31, 0x0076	; 0x800076 <TM0_OCO_Fptr_callback+0x1>
 5ba:	30 97       	sbiw	r30, 0x00	; 0
 5bc:	09 f0       	breq	.+2      	; 0x5c0 <__vector_10+0x30>
 5be:	09 95       	icall
 5c0:	ff 91       	pop	r31
 5c2:	ef 91       	pop	r30
 5c4:	bf 91       	pop	r27
 5c6:	af 91       	pop	r26
 5c8:	9f 91       	pop	r25
 5ca:	8f 91       	pop	r24
 5cc:	7f 91       	pop	r23
 5ce:	6f 91       	pop	r22
 5d0:	5f 91       	pop	r21
 5d2:	4f 91       	pop	r20
 5d4:	3f 91       	pop	r19
 5d6:	2f 91       	pop	r18
 5d8:	0f 90       	pop	r0
 5da:	0f be       	out	0x3f, r0	; 63
 5dc:	0f 90       	pop	r0
 5de:	1f 90       	pop	r1
 5e0:	18 95       	reti

000005e2 <Timer1_Init_PostBuild>:
 5e2:	82 30       	cpi	r24, 0x02	; 2
 5e4:	39 f1       	breq	.+78     	; 0x634 <Timer1_Init_PostBuild+0x52>
 5e6:	28 f4       	brcc	.+10     	; 0x5f2 <Timer1_Init_PostBuild+0x10>
 5e8:	88 23       	and	r24, r24
 5ea:	51 f0       	breq	.+20     	; 0x600 <Timer1_Init_PostBuild+0x1e>
 5ec:	81 30       	cpi	r24, 0x01	; 1
 5ee:	a9 f0       	breq	.+42     	; 0x61a <Timer1_Init_PostBuild+0x38>
 5f0:	54 c0       	rjmp	.+168    	; 0x69a <Timer1_Init_PostBuild+0xb8>
 5f2:	84 30       	cpi	r24, 0x04	; 4
 5f4:	c9 f1       	breq	.+114    	; 0x668 <Timer1_Init_PostBuild+0x86>
 5f6:	58 f1       	brcs	.+86     	; 0x64e <Timer1_Init_PostBuild+0x6c>
 5f8:	85 30       	cpi	r24, 0x05	; 5
 5fa:	09 f4       	brne	.+2      	; 0x5fe <Timer1_Init_PostBuild+0x1c>
 5fc:	42 c0       	rjmp	.+132    	; 0x682 <Timer1_Init_PostBuild+0xa0>
 5fe:	4d c0       	rjmp	.+154    	; 0x69a <Timer1_Init_PostBuild+0xb8>
 600:	8f b5       	in	r24, 0x2f	; 47
 602:	8e 7f       	andi	r24, 0xFE	; 254
 604:	8f bd       	out	0x2f, r24	; 47
 606:	8f b5       	in	r24, 0x2f	; 47
 608:	8d 7f       	andi	r24, 0xFD	; 253
 60a:	8f bd       	out	0x2f, r24	; 47
 60c:	8e b5       	in	r24, 0x2e	; 46
 60e:	87 7f       	andi	r24, 0xF7	; 247
 610:	8e bd       	out	0x2e, r24	; 46
 612:	8e b5       	in	r24, 0x2e	; 46
 614:	8f 7e       	andi	r24, 0xEF	; 239
 616:	8e bd       	out	0x2e, r24	; 46
 618:	40 c0       	rjmp	.+128    	; 0x69a <Timer1_Init_PostBuild+0xb8>
 61a:	8f b5       	in	r24, 0x2f	; 47
 61c:	8e 7f       	andi	r24, 0xFE	; 254
 61e:	8f bd       	out	0x2f, r24	; 47
 620:	8f b5       	in	r24, 0x2f	; 47
 622:	8d 7f       	andi	r24, 0xFD	; 253
 624:	8f bd       	out	0x2f, r24	; 47
 626:	8e b5       	in	r24, 0x2e	; 46
 628:	88 60       	ori	r24, 0x08	; 8
 62a:	8e bd       	out	0x2e, r24	; 46
 62c:	8e b5       	in	r24, 0x2e	; 46
 62e:	80 61       	ori	r24, 0x10	; 16
 630:	8e bd       	out	0x2e, r24	; 46
 632:	33 c0       	rjmp	.+102    	; 0x69a <Timer1_Init_PostBuild+0xb8>
 634:	8f b5       	in	r24, 0x2f	; 47
 636:	8e 7f       	andi	r24, 0xFE	; 254
 638:	8f bd       	out	0x2f, r24	; 47
 63a:	8f b5       	in	r24, 0x2f	; 47
 63c:	8d 7f       	andi	r24, 0xFD	; 253
 63e:	8f bd       	out	0x2f, r24	; 47
 640:	8e b5       	in	r24, 0x2e	; 46
 642:	88 60       	ori	r24, 0x08	; 8
 644:	8e bd       	out	0x2e, r24	; 46
 646:	8e b5       	in	r24, 0x2e	; 46
 648:	8f 7e       	andi	r24, 0xEF	; 239
 64a:	8e bd       	out	0x2e, r24	; 46
 64c:	26 c0       	rjmp	.+76     	; 0x69a <Timer1_Init_PostBuild+0xb8>
 64e:	8f b5       	in	r24, 0x2f	; 47
 650:	8e 7f       	andi	r24, 0xFE	; 254
 652:	8f bd       	out	0x2f, r24	; 47
 654:	8f b5       	in	r24, 0x2f	; 47
 656:	82 60       	ori	r24, 0x02	; 2
 658:	8f bd       	out	0x2f, r24	; 47
 65a:	8e b5       	in	r24, 0x2e	; 46
 65c:	88 60       	ori	r24, 0x08	; 8
 65e:	8e bd       	out	0x2e, r24	; 46
 660:	8e b5       	in	r24, 0x2e	; 46
 662:	80 61       	ori	r24, 0x10	; 16
 664:	8e bd       	out	0x2e, r24	; 46
 666:	19 c0       	rjmp	.+50     	; 0x69a <Timer1_Init_PostBuild+0xb8>
 668:	8f b5       	in	r24, 0x2f	; 47
 66a:	81 60       	ori	r24, 0x01	; 1
 66c:	8f bd       	out	0x2f, r24	; 47
 66e:	8f b5       	in	r24, 0x2f	; 47
 670:	82 60       	ori	r24, 0x02	; 2
 672:	8f bd       	out	0x2f, r24	; 47
 674:	8e b5       	in	r24, 0x2e	; 46
 676:	88 60       	ori	r24, 0x08	; 8
 678:	8e bd       	out	0x2e, r24	; 46
 67a:	8e b5       	in	r24, 0x2e	; 46
 67c:	80 61       	ori	r24, 0x10	; 16
 67e:	8e bd       	out	0x2e, r24	; 46
 680:	0c c0       	rjmp	.+24     	; 0x69a <Timer1_Init_PostBuild+0xb8>
 682:	8f b5       	in	r24, 0x2f	; 47
 684:	81 60       	ori	r24, 0x01	; 1
 686:	8f bd       	out	0x2f, r24	; 47
 688:	8f b5       	in	r24, 0x2f	; 47
 68a:	82 60       	ori	r24, 0x02	; 2
 68c:	8f bd       	out	0x2f, r24	; 47
 68e:	8e b5       	in	r24, 0x2e	; 46
 690:	87 7f       	andi	r24, 0xF7	; 247
 692:	8e bd       	out	0x2e, r24	; 46
 694:	8e b5       	in	r24, 0x2e	; 46
 696:	80 61       	ori	r24, 0x10	; 16
 698:	8e bd       	out	0x2e, r24	; 46
 69a:	41 30       	cpi	r20, 0x01	; 1
 69c:	69 f0       	breq	.+26     	; 0x6b8 <Timer1_Init_PostBuild+0xd6>
 69e:	28 f0       	brcs	.+10     	; 0x6aa <Timer1_Init_PostBuild+0xc8>
 6a0:	42 30       	cpi	r20, 0x02	; 2
 6a2:	89 f0       	breq	.+34     	; 0x6c6 <Timer1_Init_PostBuild+0xe4>
 6a4:	43 30       	cpi	r20, 0x03	; 3
 6a6:	b1 f0       	breq	.+44     	; 0x6d4 <Timer1_Init_PostBuild+0xf2>
 6a8:	1b c0       	rjmp	.+54     	; 0x6e0 <Timer1_Init_PostBuild+0xfe>
 6aa:	8f b5       	in	r24, 0x2f	; 47
 6ac:	8f 7b       	andi	r24, 0xBF	; 191
 6ae:	8f bd       	out	0x2f, r24	; 47
 6b0:	8f b5       	in	r24, 0x2f	; 47
 6b2:	8f 77       	andi	r24, 0x7F	; 127
 6b4:	8f bd       	out	0x2f, r24	; 47
 6b6:	14 c0       	rjmp	.+40     	; 0x6e0 <Timer1_Init_PostBuild+0xfe>
 6b8:	8f b5       	in	r24, 0x2f	; 47
 6ba:	80 64       	ori	r24, 0x40	; 64
 6bc:	8f bd       	out	0x2f, r24	; 47
 6be:	8f b5       	in	r24, 0x2f	; 47
 6c0:	8f 77       	andi	r24, 0x7F	; 127
 6c2:	8f bd       	out	0x2f, r24	; 47
 6c4:	0d c0       	rjmp	.+26     	; 0x6e0 <Timer1_Init_PostBuild+0xfe>
 6c6:	8f b5       	in	r24, 0x2f	; 47
 6c8:	8f 7b       	andi	r24, 0xBF	; 191
 6ca:	8f bd       	out	0x2f, r24	; 47
 6cc:	8f b5       	in	r24, 0x2f	; 47
 6ce:	80 68       	ori	r24, 0x80	; 128
 6d0:	8f bd       	out	0x2f, r24	; 47
 6d2:	06 c0       	rjmp	.+12     	; 0x6e0 <Timer1_Init_PostBuild+0xfe>
 6d4:	8f b5       	in	r24, 0x2f	; 47
 6d6:	80 64       	ori	r24, 0x40	; 64
 6d8:	8f bd       	out	0x2f, r24	; 47
 6da:	8f b5       	in	r24, 0x2f	; 47
 6dc:	80 68       	ori	r24, 0x80	; 128
 6de:	8f bd       	out	0x2f, r24	; 47
 6e0:	21 30       	cpi	r18, 0x01	; 1
 6e2:	69 f0       	breq	.+26     	; 0x6fe <Timer1_Init_PostBuild+0x11c>
 6e4:	28 f0       	brcs	.+10     	; 0x6f0 <Timer1_Init_PostBuild+0x10e>
 6e6:	22 30       	cpi	r18, 0x02	; 2
 6e8:	89 f0       	breq	.+34     	; 0x70c <Timer1_Init_PostBuild+0x12a>
 6ea:	23 30       	cpi	r18, 0x03	; 3
 6ec:	b1 f0       	breq	.+44     	; 0x71a <Timer1_Init_PostBuild+0x138>
 6ee:	1b c0       	rjmp	.+54     	; 0x726 <Timer1_Init_PostBuild+0x144>
 6f0:	8f b5       	in	r24, 0x2f	; 47
 6f2:	8f 7e       	andi	r24, 0xEF	; 239
 6f4:	8f bd       	out	0x2f, r24	; 47
 6f6:	8f b5       	in	r24, 0x2f	; 47
 6f8:	8f 7d       	andi	r24, 0xDF	; 223
 6fa:	8f bd       	out	0x2f, r24	; 47
 6fc:	14 c0       	rjmp	.+40     	; 0x726 <Timer1_Init_PostBuild+0x144>
 6fe:	8f b5       	in	r24, 0x2f	; 47
 700:	80 61       	ori	r24, 0x10	; 16
 702:	8f bd       	out	0x2f, r24	; 47
 704:	8f b5       	in	r24, 0x2f	; 47
 706:	8f 7d       	andi	r24, 0xDF	; 223
 708:	8f bd       	out	0x2f, r24	; 47
 70a:	0d c0       	rjmp	.+26     	; 0x726 <Timer1_Init_PostBuild+0x144>
 70c:	8f b5       	in	r24, 0x2f	; 47
 70e:	8f 7e       	andi	r24, 0xEF	; 239
 710:	8f bd       	out	0x2f, r24	; 47
 712:	8f b5       	in	r24, 0x2f	; 47
 714:	80 62       	ori	r24, 0x20	; 32
 716:	8f bd       	out	0x2f, r24	; 47
 718:	06 c0       	rjmp	.+12     	; 0x726 <Timer1_Init_PostBuild+0x144>
 71a:	8f b5       	in	r24, 0x2f	; 47
 71c:	80 61       	ori	r24, 0x10	; 16
 71e:	8f bd       	out	0x2f, r24	; 47
 720:	8f b5       	in	r24, 0x2f	; 47
 722:	80 62       	ori	r24, 0x20	; 32
 724:	8f bd       	out	0x2f, r24	; 47
 726:	8e b5       	in	r24, 0x2e	; 46
 728:	88 7f       	andi	r24, 0xF8	; 248
 72a:	8e bd       	out	0x2e, r24	; 46
 72c:	8e b5       	in	r24, 0x2e	; 46
 72e:	68 2b       	or	r22, r24
 730:	6e bd       	out	0x2e, r22	; 46
 732:	08 95       	ret

00000734 <Timer1_InputCaptureEdge>:
 734:	81 11       	cpse	r24, r1
 736:	04 c0       	rjmp	.+8      	; 0x740 <Timer1_InputCaptureEdge+0xc>
 738:	8e b5       	in	r24, 0x2e	; 46
 73a:	80 64       	ori	r24, 0x40	; 64
 73c:	8e bd       	out	0x2e, r24	; 46
 73e:	08 95       	ret
 740:	81 30       	cpi	r24, 0x01	; 1
 742:	19 f4       	brne	.+6      	; 0x74a <Timer1_InputCaptureEdge+0x16>
 744:	8e b5       	in	r24, 0x2e	; 46
 746:	8f 7b       	andi	r24, 0xBF	; 191
 748:	8e bd       	out	0x2e, r24	; 46
 74a:	08 95       	ret

0000074c <Timer1_ICU_InterruptEnable>:
 74c:	89 b7       	in	r24, 0x39	; 57
 74e:	80 62       	ori	r24, 0x20	; 32
 750:	89 bf       	out	0x39, r24	; 57
 752:	08 95       	ret

00000754 <Timer1_ICU_InterruptDisable>:
 754:	89 b7       	in	r24, 0x39	; 57
 756:	8f 7d       	andi	r24, 0xDF	; 223
 758:	89 bf       	out	0x39, r24	; 57
 75a:	08 95       	ret

0000075c <Func_ICU>:
 75c:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <flag>
 760:	81 11       	cpse	r24, r1
 762:	0d c0       	rjmp	.+26     	; 0x77e <Func_ICU+0x22>
 764:	86 b5       	in	r24, 0x26	; 38
 766:	97 b5       	in	r25, 0x27	; 39
 768:	90 93 7f 00 	sts	0x007F, r25	; 0x80007f <T1+0x1>
 76c:	80 93 7e 00 	sts	0x007E, r24	; 0x80007e <T1>
 770:	81 e0       	ldi	r24, 0x01	; 1
 772:	0e 94 9a 03 	call	0x734	; 0x734 <Timer1_InputCaptureEdge>
 776:	81 e0       	ldi	r24, 0x01	; 1
 778:	80 93 79 00 	sts	0x0079, r24	; 0x800079 <flag>
 77c:	08 95       	ret
 77e:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <flag>
 782:	81 30       	cpi	r24, 0x01	; 1
 784:	69 f4       	brne	.+26     	; 0x7a0 <Func_ICU+0x44>
 786:	86 b5       	in	r24, 0x26	; 38
 788:	97 b5       	in	r25, 0x27	; 39
 78a:	90 93 7d 00 	sts	0x007D, r25	; 0x80007d <T2+0x1>
 78e:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <T2>
 792:	80 e0       	ldi	r24, 0x00	; 0
 794:	0e 94 9a 03 	call	0x734	; 0x734 <Timer1_InputCaptureEdge>
 798:	82 e0       	ldi	r24, 0x02	; 2
 79a:	80 93 79 00 	sts	0x0079, r24	; 0x800079 <flag>
 79e:	08 95       	ret
 7a0:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <flag>
 7a4:	82 30       	cpi	r24, 0x02	; 2
 7a6:	59 f4       	brne	.+22     	; 0x7be <Func_ICU+0x62>
 7a8:	0e 94 aa 03 	call	0x754	; 0x754 <Timer1_ICU_InterruptDisable>
 7ac:	86 b5       	in	r24, 0x26	; 38
 7ae:	97 b5       	in	r25, 0x27	; 39
 7b0:	90 93 7b 00 	sts	0x007B, r25	; 0x80007b <T3+0x1>
 7b4:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <T3>
 7b8:	83 e0       	ldi	r24, 0x03	; 3
 7ba:	80 93 79 00 	sts	0x0079, r24	; 0x800079 <flag>
 7be:	08 95       	ret

000007c0 <Timer1_OVF_SetCallBack>:
 7c0:	90 93 74 00 	sts	0x0074, r25	; 0x800074 <Timer1_OVF_Fptr_callback+0x1>
 7c4:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <Timer1_OVF_Fptr_callback>
 7c8:	08 95       	ret

000007ca <Timer1_ICU_SetCallBack>:
 7ca:	90 93 6e 00 	sts	0x006E, r25	; 0x80006e <Timer1_ICU_Fptr_callback+0x1>
 7ce:	80 93 6d 00 	sts	0x006D, r24	; 0x80006d <Timer1_ICU_Fptr_callback>
 7d2:	08 95       	ret

000007d4 <PWM_Measure>:
		flag=3;
	}
	
}
void PWM_Measure(u32* Pfreq,u8* Pduty)
{
 7d4:	4f 92       	push	r4
 7d6:	5f 92       	push	r5
 7d8:	6f 92       	push	r6
 7da:	7f 92       	push	r7
 7dc:	8f 92       	push	r8
 7de:	9f 92       	push	r9
 7e0:	af 92       	push	r10
 7e2:	bf 92       	push	r11
 7e4:	cf 92       	push	r12
 7e6:	df 92       	push	r13
 7e8:	ef 92       	push	r14
 7ea:	ff 92       	push	r15
 7ec:	0f 93       	push	r16
 7ee:	1f 93       	push	r17
 7f0:	cf 93       	push	r28
 7f2:	df 93       	push	r29
 7f4:	8c 01       	movw	r16, r24
 7f6:	eb 01       	movw	r28, r22
	u32 Ton,Toff;
	Timer1_ICU_SetCallBack(Func_ICU);
 7f8:	8e ea       	ldi	r24, 0xAE	; 174
 7fa:	93 e0       	ldi	r25, 0x03	; 3
 7fc:	0e 94 e5 03 	call	0x7ca	; 0x7ca <Timer1_ICU_SetCallBack>
	Timer1_InputCaptureEdge(RISING);
 800:	80 e0       	ldi	r24, 0x00	; 0
 802:	0e 94 9a 03 	call	0x734	; 0x734 <Timer1_InputCaptureEdge>
	TCNT1=0;
 806:	1d bc       	out	0x2d, r1	; 45
 808:	1c bc       	out	0x2c, r1	; 44
	Timer1_ICU_InterruptEnable();
 80a:	0e 94 a6 03 	call	0x74c	; 0x74c <Timer1_ICU_InterruptEnable>
	flag=0;
 80e:	10 92 79 00 	sts	0x0079, r1	; 0x800079 <flag>
	while(flag<3);
 812:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <flag>
 816:	83 30       	cpi	r24, 0x03	; 3
 818:	e0 f3       	brcs	.-8      	; 0x812 <__DATA_REGION_LENGTH__+0x12>
	Ton=T2-T1;
 81a:	c0 90 7c 00 	lds	r12, 0x007C	; 0x80007c <T2>
 81e:	d0 90 7d 00 	lds	r13, 0x007D	; 0x80007d <T2+0x1>
 822:	80 91 7e 00 	lds	r24, 0x007E	; 0x80007e <T1>
 826:	90 91 7f 00 	lds	r25, 0x007F	; 0x80007f <T1+0x1>
 82a:	c8 1a       	sub	r12, r24
 82c:	d9 0a       	sbc	r13, r25
 82e:	e1 2c       	mov	r14, r1
 830:	f1 2c       	mov	r15, r1
	Toff=T3-T2;
 832:	e0 91 7a 00 	lds	r30, 0x007A	; 0x80007a <T3>
 836:	f0 91 7b 00 	lds	r31, 0x007B	; 0x80007b <T3+0x1>
 83a:	80 91 7c 00 	lds	r24, 0x007C	; 0x80007c <T2>
 83e:	90 91 7d 00 	lds	r25, 0x007D	; 0x80007d <T2+0x1>
 842:	e8 1b       	sub	r30, r24
 844:	f9 0b       	sbc	r31, r25
	u32 tot=((u32)Ton*100U);
 846:	a4 e6       	ldi	r26, 0x64	; 100
 848:	b0 e0       	ldi	r27, 0x00	; 0
 84a:	a7 01       	movw	r20, r14
 84c:	96 01       	movw	r18, r12
 84e:	0e 94 44 05 	call	0xa88	; 0xa88 <__muluhisi3>
	u32 sum=Ton+Toff;
 852:	ce 0e       	add	r12, r30
 854:	df 1e       	adc	r13, r31
 856:	e1 1c       	adc	r14, r1
 858:	f1 1c       	adc	r15, r1
	u16 mod=( (u32)tot % (u32)sum);
 85a:	a7 01       	movw	r20, r14
 85c:	96 01       	movw	r18, r12
 85e:	0e 94 13 05 	call	0xa26	; 0xa26 <__udivmodsi4>
	*Pduty=((u32)tot/(u32)sum);
 862:	28 83       	st	Y, r18
	if(mod>= ( (sum>>1)+(sum>>3)) ){
 864:	46 01       	movw	r8, r12
 866:	57 01       	movw	r10, r14
 868:	b6 94       	lsr	r11
 86a:	a7 94       	ror	r10
 86c:	97 94       	ror	r9
 86e:	87 94       	ror	r8
 870:	26 01       	movw	r4, r12
 872:	37 01       	movw	r6, r14
 874:	68 94       	set
 876:	12 f8       	bld	r1, 2
 878:	76 94       	lsr	r7
 87a:	67 94       	ror	r6
 87c:	57 94       	ror	r5
 87e:	47 94       	ror	r4
 880:	16 94       	lsr	r1
 882:	d1 f7       	brne	.-12     	; 0x878 <__stack+0x19>
 884:	84 0c       	add	r8, r4
 886:	95 1c       	adc	r9, r5
 888:	a6 1c       	adc	r10, r6
 88a:	b7 1c       	adc	r11, r7
 88c:	ab 01       	movw	r20, r22
 88e:	bc 01       	movw	r22, r24
 890:	66 27       	eor	r22, r22
 892:	77 27       	eor	r23, r23
 894:	48 15       	cp	r20, r8
 896:	59 05       	cpc	r21, r9
 898:	6a 05       	cpc	r22, r10
 89a:	7b 05       	cpc	r23, r11
 89c:	10 f0       	brcs	.+4      	; 0x8a2 <__stack+0x43>
		(*Pduty)++;
 89e:	2f 5f       	subi	r18, 0xFF	; 255
 8a0:	28 83       	st	Y, r18
	}
	*Pfreq=(u32)((u64)8000000UL/(sum));;
 8a2:	60 e0       	ldi	r22, 0x00	; 0
 8a4:	72 e1       	ldi	r23, 0x12	; 18
 8a6:	8a e7       	ldi	r24, 0x7A	; 122
 8a8:	90 e0       	ldi	r25, 0x00	; 0
 8aa:	a7 01       	movw	r20, r14
 8ac:	96 01       	movw	r18, r12
 8ae:	0e 94 13 05 	call	0xa26	; 0xa26 <__udivmodsi4>
 8b2:	f8 01       	movw	r30, r16
 8b4:	20 83       	st	Z, r18
 8b6:	31 83       	std	Z+1, r19	; 0x01
 8b8:	42 83       	std	Z+2, r20	; 0x02
 8ba:	53 83       	std	Z+3, r21	; 0x03
			CLCD_voidSendData(' ');
			CLCD_voidSendNumber((u64)T2);
			CLCD_voidSetPosition(CLCD_ROW_2,CLCD_COL_1);
			_delay_ms(3000);
		*/
}
 8bc:	df 91       	pop	r29
 8be:	cf 91       	pop	r28
 8c0:	1f 91       	pop	r17
 8c2:	0f 91       	pop	r16
 8c4:	ff 90       	pop	r15
 8c6:	ef 90       	pop	r14
 8c8:	df 90       	pop	r13
 8ca:	cf 90       	pop	r12
 8cc:	bf 90       	pop	r11
 8ce:	af 90       	pop	r10
 8d0:	9f 90       	pop	r9
 8d2:	8f 90       	pop	r8
 8d4:	7f 90       	pop	r7
 8d6:	6f 90       	pop	r6
 8d8:	5f 90       	pop	r5
 8da:	4f 90       	pop	r4
 8dc:	08 95       	ret

000008de <__vector_9>:


ISR(INT_TIMER1_OVF)
{
 8de:	1f 92       	push	r1
 8e0:	0f 92       	push	r0
 8e2:	0f b6       	in	r0, 0x3f	; 63
 8e4:	0f 92       	push	r0
 8e6:	11 24       	eor	r1, r1
 8e8:	2f 93       	push	r18
 8ea:	3f 93       	push	r19
 8ec:	4f 93       	push	r20
 8ee:	5f 93       	push	r21
 8f0:	6f 93       	push	r22
 8f2:	7f 93       	push	r23
 8f4:	8f 93       	push	r24
 8f6:	9f 93       	push	r25
 8f8:	af 93       	push	r26
 8fa:	bf 93       	push	r27
 8fc:	ef 93       	push	r30
 8fe:	ff 93       	push	r31
	if(Timer1_OVF_Fptr_callback!=NULLPTR)
 900:	e0 91 73 00 	lds	r30, 0x0073	; 0x800073 <Timer1_OVF_Fptr_callback>
 904:	f0 91 74 00 	lds	r31, 0x0074	; 0x800074 <Timer1_OVF_Fptr_callback+0x1>
 908:	30 97       	sbiw	r30, 0x00	; 0
 90a:	09 f0       	breq	.+2      	; 0x90e <__vector_9+0x30>
	{
		Timer1_OVF_Fptr_callback();
 90c:	09 95       	icall
	}
}
 90e:	ff 91       	pop	r31
 910:	ef 91       	pop	r30
 912:	bf 91       	pop	r27
 914:	af 91       	pop	r26
 916:	9f 91       	pop	r25
 918:	8f 91       	pop	r24
 91a:	7f 91       	pop	r23
 91c:	6f 91       	pop	r22
 91e:	5f 91       	pop	r21
 920:	4f 91       	pop	r20
 922:	3f 91       	pop	r19
 924:	2f 91       	pop	r18
 926:	0f 90       	pop	r0
 928:	0f be       	out	0x3f, r0	; 63
 92a:	0f 90       	pop	r0
 92c:	1f 90       	pop	r1
 92e:	18 95       	reti

00000930 <__vector_7>:
ISR(INT_TIMER1_COMPA)
{
 930:	1f 92       	push	r1
 932:	0f 92       	push	r0
 934:	0f b6       	in	r0, 0x3f	; 63
 936:	0f 92       	push	r0
 938:	11 24       	eor	r1, r1
 93a:	2f 93       	push	r18
 93c:	3f 93       	push	r19
 93e:	4f 93       	push	r20
 940:	5f 93       	push	r21
 942:	6f 93       	push	r22
 944:	7f 93       	push	r23
 946:	8f 93       	push	r24
 948:	9f 93       	push	r25
 94a:	af 93       	push	r26
 94c:	bf 93       	push	r27
 94e:	ef 93       	push	r30
 950:	ff 93       	push	r31
	if(Timer1_OCA_Fptr_callback!=NULLPTR)
 952:	e0 91 71 00 	lds	r30, 0x0071	; 0x800071 <Timer1_OCA_Fptr_callback>
 956:	f0 91 72 00 	lds	r31, 0x0072	; 0x800072 <Timer1_OCA_Fptr_callback+0x1>
 95a:	30 97       	sbiw	r30, 0x00	; 0
 95c:	09 f0       	breq	.+2      	; 0x960 <__vector_7+0x30>
	{
		Timer1_OCA_Fptr_callback();
 95e:	09 95       	icall
	}
}
 960:	ff 91       	pop	r31
 962:	ef 91       	pop	r30
 964:	bf 91       	pop	r27
 966:	af 91       	pop	r26
 968:	9f 91       	pop	r25
 96a:	8f 91       	pop	r24
 96c:	7f 91       	pop	r23
 96e:	6f 91       	pop	r22
 970:	5f 91       	pop	r21
 972:	4f 91       	pop	r20
 974:	3f 91       	pop	r19
 976:	2f 91       	pop	r18
 978:	0f 90       	pop	r0
 97a:	0f be       	out	0x3f, r0	; 63
 97c:	0f 90       	pop	r0
 97e:	1f 90       	pop	r1
 980:	18 95       	reti

00000982 <__vector_8>:
ISR(INT_TIMER1_COMPB)
{
 982:	1f 92       	push	r1
 984:	0f 92       	push	r0
 986:	0f b6       	in	r0, 0x3f	; 63
 988:	0f 92       	push	r0
 98a:	11 24       	eor	r1, r1
 98c:	2f 93       	push	r18
 98e:	3f 93       	push	r19
 990:	4f 93       	push	r20
 992:	5f 93       	push	r21
 994:	6f 93       	push	r22
 996:	7f 93       	push	r23
 998:	8f 93       	push	r24
 99a:	9f 93       	push	r25
 99c:	af 93       	push	r26
 99e:	bf 93       	push	r27
 9a0:	ef 93       	push	r30
 9a2:	ff 93       	push	r31
	if(Timer1_OCB_Fptr_callback!=NULLPTR)
 9a4:	e0 91 6f 00 	lds	r30, 0x006F	; 0x80006f <Timer1_OCB_Fptr_callback>
 9a8:	f0 91 70 00 	lds	r31, 0x0070	; 0x800070 <Timer1_OCB_Fptr_callback+0x1>
 9ac:	30 97       	sbiw	r30, 0x00	; 0
 9ae:	09 f0       	breq	.+2      	; 0x9b2 <__vector_8+0x30>
	{
		Timer1_OCB_Fptr_callback();
 9b0:	09 95       	icall
	}
}
 9b2:	ff 91       	pop	r31
 9b4:	ef 91       	pop	r30
 9b6:	bf 91       	pop	r27
 9b8:	af 91       	pop	r26
 9ba:	9f 91       	pop	r25
 9bc:	8f 91       	pop	r24
 9be:	7f 91       	pop	r23
 9c0:	6f 91       	pop	r22
 9c2:	5f 91       	pop	r21
 9c4:	4f 91       	pop	r20
 9c6:	3f 91       	pop	r19
 9c8:	2f 91       	pop	r18
 9ca:	0f 90       	pop	r0
 9cc:	0f be       	out	0x3f, r0	; 63
 9ce:	0f 90       	pop	r0
 9d0:	1f 90       	pop	r1
 9d2:	18 95       	reti

000009d4 <__vector_6>:
ISR(INT_TIMER1_CAPT)
{
 9d4:	1f 92       	push	r1
 9d6:	0f 92       	push	r0
 9d8:	0f b6       	in	r0, 0x3f	; 63
 9da:	0f 92       	push	r0
 9dc:	11 24       	eor	r1, r1
 9de:	2f 93       	push	r18
 9e0:	3f 93       	push	r19
 9e2:	4f 93       	push	r20
 9e4:	5f 93       	push	r21
 9e6:	6f 93       	push	r22
 9e8:	7f 93       	push	r23
 9ea:	8f 93       	push	r24
 9ec:	9f 93       	push	r25
 9ee:	af 93       	push	r26
 9f0:	bf 93       	push	r27
 9f2:	ef 93       	push	r30
 9f4:	ff 93       	push	r31
	if(Timer1_ICU_Fptr_callback!=NULLPTR)
 9f6:	e0 91 6d 00 	lds	r30, 0x006D	; 0x80006d <Timer1_ICU_Fptr_callback>
 9fa:	f0 91 6e 00 	lds	r31, 0x006E	; 0x80006e <Timer1_ICU_Fptr_callback+0x1>
 9fe:	30 97       	sbiw	r30, 0x00	; 0
 a00:	09 f0       	breq	.+2      	; 0xa04 <__vector_6+0x30>
	{
		Timer1_ICU_Fptr_callback();
 a02:	09 95       	icall
	}
}
 a04:	ff 91       	pop	r31
 a06:	ef 91       	pop	r30
 a08:	bf 91       	pop	r27
 a0a:	af 91       	pop	r26
 a0c:	9f 91       	pop	r25
 a0e:	8f 91       	pop	r24
 a10:	7f 91       	pop	r23
 a12:	6f 91       	pop	r22
 a14:	5f 91       	pop	r21
 a16:	4f 91       	pop	r20
 a18:	3f 91       	pop	r19
 a1a:	2f 91       	pop	r18
 a1c:	0f 90       	pop	r0
 a1e:	0f be       	out	0x3f, r0	; 63
 a20:	0f 90       	pop	r0
 a22:	1f 90       	pop	r1
 a24:	18 95       	reti

00000a26 <__udivmodsi4>:
 a26:	a1 e2       	ldi	r26, 0x21	; 33
 a28:	1a 2e       	mov	r1, r26
 a2a:	aa 1b       	sub	r26, r26
 a2c:	bb 1b       	sub	r27, r27
 a2e:	fd 01       	movw	r30, r26
 a30:	0d c0       	rjmp	.+26     	; 0xa4c <__udivmodsi4_ep>

00000a32 <__udivmodsi4_loop>:
 a32:	aa 1f       	adc	r26, r26
 a34:	bb 1f       	adc	r27, r27
 a36:	ee 1f       	adc	r30, r30
 a38:	ff 1f       	adc	r31, r31
 a3a:	a2 17       	cp	r26, r18
 a3c:	b3 07       	cpc	r27, r19
 a3e:	e4 07       	cpc	r30, r20
 a40:	f5 07       	cpc	r31, r21
 a42:	20 f0       	brcs	.+8      	; 0xa4c <__udivmodsi4_ep>
 a44:	a2 1b       	sub	r26, r18
 a46:	b3 0b       	sbc	r27, r19
 a48:	e4 0b       	sbc	r30, r20
 a4a:	f5 0b       	sbc	r31, r21

00000a4c <__udivmodsi4_ep>:
 a4c:	66 1f       	adc	r22, r22
 a4e:	77 1f       	adc	r23, r23
 a50:	88 1f       	adc	r24, r24
 a52:	99 1f       	adc	r25, r25
 a54:	1a 94       	dec	r1
 a56:	69 f7       	brne	.-38     	; 0xa32 <__udivmodsi4_loop>
 a58:	60 95       	com	r22
 a5a:	70 95       	com	r23
 a5c:	80 95       	com	r24
 a5e:	90 95       	com	r25
 a60:	9b 01       	movw	r18, r22
 a62:	ac 01       	movw	r20, r24
 a64:	bd 01       	movw	r22, r26
 a66:	cf 01       	movw	r24, r30
 a68:	08 95       	ret

00000a6a <__umulhisi3>:
 a6a:	a2 9f       	mul	r26, r18
 a6c:	b0 01       	movw	r22, r0
 a6e:	b3 9f       	mul	r27, r19
 a70:	c0 01       	movw	r24, r0
 a72:	a3 9f       	mul	r26, r19
 a74:	70 0d       	add	r23, r0
 a76:	81 1d       	adc	r24, r1
 a78:	11 24       	eor	r1, r1
 a7a:	91 1d       	adc	r25, r1
 a7c:	b2 9f       	mul	r27, r18
 a7e:	70 0d       	add	r23, r0
 a80:	81 1d       	adc	r24, r1
 a82:	11 24       	eor	r1, r1
 a84:	91 1d       	adc	r25, r1
 a86:	08 95       	ret

00000a88 <__muluhisi3>:
 a88:	0e 94 35 05 	call	0xa6a	; 0xa6a <__umulhisi3>
 a8c:	a5 9f       	mul	r26, r21
 a8e:	90 0d       	add	r25, r0
 a90:	b4 9f       	mul	r27, r20
 a92:	90 0d       	add	r25, r0
 a94:	a4 9f       	mul	r26, r20
 a96:	80 0d       	add	r24, r0
 a98:	91 1d       	adc	r25, r1
 a9a:	11 24       	eor	r1, r1
 a9c:	08 95       	ret

00000a9e <__umoddi3>:
 a9e:	68 94       	set
 aa0:	01 c0       	rjmp	.+2      	; 0xaa4 <__udivdi3_umoddi3>

00000aa2 <__udivdi3>:
 aa2:	e8 94       	clt

00000aa4 <__udivdi3_umoddi3>:
 aa4:	8f 92       	push	r8
 aa6:	9f 92       	push	r9
 aa8:	cf 93       	push	r28
 aaa:	df 93       	push	r29
 aac:	0e 94 5d 05 	call	0xaba	; 0xaba <__udivmod64>
 ab0:	df 91       	pop	r29
 ab2:	cf 91       	pop	r28
 ab4:	9f 90       	pop	r9
 ab6:	8f 90       	pop	r8
 ab8:	08 95       	ret

00000aba <__udivmod64>:
 aba:	88 24       	eor	r8, r8
 abc:	99 24       	eor	r9, r9
 abe:	f4 01       	movw	r30, r8
 ac0:	e4 01       	movw	r28, r8
 ac2:	b0 e4       	ldi	r27, 0x40	; 64
 ac4:	9f 93       	push	r25
 ac6:	aa 27       	eor	r26, r26
 ac8:	9a 15       	cp	r25, r10
 aca:	8b 04       	cpc	r8, r11
 acc:	9c 04       	cpc	r9, r12
 ace:	ed 05       	cpc	r30, r13
 ad0:	fe 05       	cpc	r31, r14
 ad2:	cf 05       	cpc	r28, r15
 ad4:	d0 07       	cpc	r29, r16
 ad6:	a1 07       	cpc	r26, r17
 ad8:	98 f4       	brcc	.+38     	; 0xb00 <__udivmod64+0x46>
 ada:	ad 2f       	mov	r26, r29
 adc:	dc 2f       	mov	r29, r28
 ade:	cf 2f       	mov	r28, r31
 ae0:	fe 2f       	mov	r31, r30
 ae2:	e9 2d       	mov	r30, r9
 ae4:	98 2c       	mov	r9, r8
 ae6:	89 2e       	mov	r8, r25
 ae8:	98 2f       	mov	r25, r24
 aea:	87 2f       	mov	r24, r23
 aec:	76 2f       	mov	r23, r22
 aee:	65 2f       	mov	r22, r21
 af0:	54 2f       	mov	r21, r20
 af2:	43 2f       	mov	r20, r19
 af4:	32 2f       	mov	r19, r18
 af6:	22 27       	eor	r18, r18
 af8:	b8 50       	subi	r27, 0x08	; 8
 afa:	31 f7       	brne	.-52     	; 0xac8 <__udivmod64+0xe>
 afc:	bf 91       	pop	r27
 afe:	27 c0       	rjmp	.+78     	; 0xb4e <__udivmod64+0x94>
 b00:	1b 2e       	mov	r1, r27
 b02:	bf 91       	pop	r27
 b04:	bb 27       	eor	r27, r27
 b06:	22 0f       	add	r18, r18
 b08:	33 1f       	adc	r19, r19
 b0a:	44 1f       	adc	r20, r20
 b0c:	55 1f       	adc	r21, r21
 b0e:	66 1f       	adc	r22, r22
 b10:	77 1f       	adc	r23, r23
 b12:	88 1f       	adc	r24, r24
 b14:	99 1f       	adc	r25, r25
 b16:	88 1c       	adc	r8, r8
 b18:	99 1c       	adc	r9, r9
 b1a:	ee 1f       	adc	r30, r30
 b1c:	ff 1f       	adc	r31, r31
 b1e:	cc 1f       	adc	r28, r28
 b20:	dd 1f       	adc	r29, r29
 b22:	aa 1f       	adc	r26, r26
 b24:	bb 1f       	adc	r27, r27
 b26:	8a 14       	cp	r8, r10
 b28:	9b 04       	cpc	r9, r11
 b2a:	ec 05       	cpc	r30, r12
 b2c:	fd 05       	cpc	r31, r13
 b2e:	ce 05       	cpc	r28, r14
 b30:	df 05       	cpc	r29, r15
 b32:	a0 07       	cpc	r26, r16
 b34:	b1 07       	cpc	r27, r17
 b36:	48 f0       	brcs	.+18     	; 0xb4a <__udivmod64+0x90>
 b38:	8a 18       	sub	r8, r10
 b3a:	9b 08       	sbc	r9, r11
 b3c:	ec 09       	sbc	r30, r12
 b3e:	fd 09       	sbc	r31, r13
 b40:	ce 09       	sbc	r28, r14
 b42:	df 09       	sbc	r29, r15
 b44:	a0 0b       	sbc	r26, r16
 b46:	b1 0b       	sbc	r27, r17
 b48:	21 60       	ori	r18, 0x01	; 1
 b4a:	1a 94       	dec	r1
 b4c:	e1 f6       	brne	.-72     	; 0xb06 <__udivmod64+0x4c>
 b4e:	2e f4       	brtc	.+10     	; 0xb5a <__udivmod64+0xa0>
 b50:	94 01       	movw	r18, r8
 b52:	af 01       	movw	r20, r30
 b54:	be 01       	movw	r22, r28
 b56:	cd 01       	movw	r24, r26
 b58:	00 0c       	add	r0, r0
 b5a:	08 95       	ret

00000b5c <__ashldi3>:
 b5c:	0f 93       	push	r16
 b5e:	08 30       	cpi	r16, 0x08	; 8
 b60:	90 f0       	brcs	.+36     	; 0xb86 <__ashldi3+0x2a>
 b62:	98 2f       	mov	r25, r24
 b64:	87 2f       	mov	r24, r23
 b66:	76 2f       	mov	r23, r22
 b68:	65 2f       	mov	r22, r21
 b6a:	54 2f       	mov	r21, r20
 b6c:	43 2f       	mov	r20, r19
 b6e:	32 2f       	mov	r19, r18
 b70:	22 27       	eor	r18, r18
 b72:	08 50       	subi	r16, 0x08	; 8
 b74:	f4 cf       	rjmp	.-24     	; 0xb5e <__ashldi3+0x2>
 b76:	22 0f       	add	r18, r18
 b78:	33 1f       	adc	r19, r19
 b7a:	44 1f       	adc	r20, r20
 b7c:	55 1f       	adc	r21, r21
 b7e:	66 1f       	adc	r22, r22
 b80:	77 1f       	adc	r23, r23
 b82:	88 1f       	adc	r24, r24
 b84:	99 1f       	adc	r25, r25
 b86:	0a 95       	dec	r16
 b88:	b2 f7       	brpl	.-20     	; 0xb76 <__ashldi3+0x1a>
 b8a:	0f 91       	pop	r16
 b8c:	08 95       	ret

00000b8e <__adddi3>:
 b8e:	2a 0d       	add	r18, r10
 b90:	3b 1d       	adc	r19, r11
 b92:	4c 1d       	adc	r20, r12
 b94:	5d 1d       	adc	r21, r13
 b96:	6e 1d       	adc	r22, r14
 b98:	7f 1d       	adc	r23, r15
 b9a:	80 1f       	adc	r24, r16
 b9c:	91 1f       	adc	r25, r17
 b9e:	08 95       	ret

00000ba0 <__cmpdi2_s8>:
 ba0:	00 24       	eor	r0, r0
 ba2:	a7 fd       	sbrc	r26, 7
 ba4:	00 94       	com	r0
 ba6:	2a 17       	cp	r18, r26
 ba8:	30 05       	cpc	r19, r0
 baa:	40 05       	cpc	r20, r0
 bac:	50 05       	cpc	r21, r0
 bae:	60 05       	cpc	r22, r0
 bb0:	70 05       	cpc	r23, r0
 bb2:	80 05       	cpc	r24, r0
 bb4:	90 05       	cpc	r25, r0
 bb6:	08 95       	ret

00000bb8 <_exit>:
 bb8:	f8 94       	cli

00000bba <__stop_program>:
 bba:	ff cf       	rjmp	.-2      	; 0xbba <__stop_program>
