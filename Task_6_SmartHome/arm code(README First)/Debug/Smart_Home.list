
Smart_Home.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001c08  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08001d38  08001d38  0002009c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08001d38  08001d38  0002009c  2**0
                  CONTENTS
  4 .ARM          00000008  08001d38  08001d38  00011d38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08001d40  08001d40  0002009c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001d40  08001d40  00011d40  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001d44  08001d44  00011d44  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000009c  20000000  08001d48  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000009c  2000009c  08001de4  0002009c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000138  08001de4  00020138  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002009c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200c5  2**0
                  CONTENTS, READONLY
 13 .debug_info   00002bf7  00000000  00000000  00020108  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000ee1  00000000  00000000  00022cff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000408  00000000  00000000  00023be0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000002e5  00000000  00000000  00023fe8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00000ac1  00000000  00000000  000242cd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00001bb6  00000000  00000000  00024d8e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00006d34  00000000  00000000  00026944  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00000d70  00000000  00000000  0002d678  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005f  00000000  00000000  0002e3e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	2000009c 	.word	0x2000009c
 800014c:	00000000 	.word	0x00000000
 8000150:	08001d20 	.word	0x08001d20

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	200000a0 	.word	0x200000a0
 800016c:	08001d20 	.word	0x08001d20

08000170 <__aeabi_uldivmod>:
 8000170:	b953      	cbnz	r3, 8000188 <__aeabi_uldivmod+0x18>
 8000172:	b94a      	cbnz	r2, 8000188 <__aeabi_uldivmod+0x18>
 8000174:	2900      	cmp	r1, #0
 8000176:	bf08      	it	eq
 8000178:	2800      	cmpeq	r0, #0
 800017a:	bf1c      	itt	ne
 800017c:	f04f 31ff 	movne.w	r1, #4294967295
 8000180:	f04f 30ff 	movne.w	r0, #4294967295
 8000184:	f000 b972 	b.w	800046c <__aeabi_idiv0>
 8000188:	f1ad 0c08 	sub.w	ip, sp, #8
 800018c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000190:	f000 f806 	bl	80001a0 <__udivmoddi4>
 8000194:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000198:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800019c:	b004      	add	sp, #16
 800019e:	4770      	bx	lr

080001a0 <__udivmoddi4>:
 80001a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001a4:	9e08      	ldr	r6, [sp, #32]
 80001a6:	460d      	mov	r5, r1
 80001a8:	4604      	mov	r4, r0
 80001aa:	468e      	mov	lr, r1
 80001ac:	2b00      	cmp	r3, #0
 80001ae:	d14c      	bne.n	800024a <__udivmoddi4+0xaa>
 80001b0:	428a      	cmp	r2, r1
 80001b2:	4694      	mov	ip, r2
 80001b4:	d967      	bls.n	8000286 <__udivmoddi4+0xe6>
 80001b6:	fab2 f382 	clz	r3, r2
 80001ba:	b153      	cbz	r3, 80001d2 <__udivmoddi4+0x32>
 80001bc:	fa02 fc03 	lsl.w	ip, r2, r3
 80001c0:	f1c3 0220 	rsb	r2, r3, #32
 80001c4:	fa01 fe03 	lsl.w	lr, r1, r3
 80001c8:	fa20 f202 	lsr.w	r2, r0, r2
 80001cc:	ea42 0e0e 	orr.w	lr, r2, lr
 80001d0:	409c      	lsls	r4, r3
 80001d2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80001d6:	fbbe f1f7 	udiv	r1, lr, r7
 80001da:	fa1f f58c 	uxth.w	r5, ip
 80001de:	fb07 ee11 	mls	lr, r7, r1, lr
 80001e2:	fb01 f005 	mul.w	r0, r1, r5
 80001e6:	0c22      	lsrs	r2, r4, #16
 80001e8:	ea42 420e 	orr.w	r2, r2, lr, lsl #16
 80001ec:	4290      	cmp	r0, r2
 80001ee:	d90a      	bls.n	8000206 <__udivmoddi4+0x66>
 80001f0:	eb1c 0202 	adds.w	r2, ip, r2
 80001f4:	f101 3eff 	add.w	lr, r1, #4294967295
 80001f8:	f080 8119 	bcs.w	800042e <__udivmoddi4+0x28e>
 80001fc:	4290      	cmp	r0, r2
 80001fe:	f240 8116 	bls.w	800042e <__udivmoddi4+0x28e>
 8000202:	3902      	subs	r1, #2
 8000204:	4462      	add	r2, ip
 8000206:	1a12      	subs	r2, r2, r0
 8000208:	fbb2 f0f7 	udiv	r0, r2, r7
 800020c:	fb07 2210 	mls	r2, r7, r0, r2
 8000210:	fb00 f505 	mul.w	r5, r0, r5
 8000214:	b2a4      	uxth	r4, r4
 8000216:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800021a:	42a5      	cmp	r5, r4
 800021c:	d90a      	bls.n	8000234 <__udivmoddi4+0x94>
 800021e:	eb1c 0404 	adds.w	r4, ip, r4
 8000222:	f100 32ff 	add.w	r2, r0, #4294967295
 8000226:	f080 8104 	bcs.w	8000432 <__udivmoddi4+0x292>
 800022a:	42a5      	cmp	r5, r4
 800022c:	f240 8101 	bls.w	8000432 <__udivmoddi4+0x292>
 8000230:	4464      	add	r4, ip
 8000232:	3802      	subs	r0, #2
 8000234:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000238:	2100      	movs	r1, #0
 800023a:	1b64      	subs	r4, r4, r5
 800023c:	b11e      	cbz	r6, 8000246 <__udivmoddi4+0xa6>
 800023e:	40dc      	lsrs	r4, r3
 8000240:	2300      	movs	r3, #0
 8000242:	e9c6 4300 	strd	r4, r3, [r6]
 8000246:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800024a:	428b      	cmp	r3, r1
 800024c:	d908      	bls.n	8000260 <__udivmoddi4+0xc0>
 800024e:	2e00      	cmp	r6, #0
 8000250:	f000 80ea 	beq.w	8000428 <__udivmoddi4+0x288>
 8000254:	2100      	movs	r1, #0
 8000256:	e9c6 0500 	strd	r0, r5, [r6]
 800025a:	4608      	mov	r0, r1
 800025c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000260:	fab3 f183 	clz	r1, r3
 8000264:	2900      	cmp	r1, #0
 8000266:	d148      	bne.n	80002fa <__udivmoddi4+0x15a>
 8000268:	42ab      	cmp	r3, r5
 800026a:	d302      	bcc.n	8000272 <__udivmoddi4+0xd2>
 800026c:	4282      	cmp	r2, r0
 800026e:	f200 80f8 	bhi.w	8000462 <__udivmoddi4+0x2c2>
 8000272:	1a84      	subs	r4, r0, r2
 8000274:	eb65 0203 	sbc.w	r2, r5, r3
 8000278:	2001      	movs	r0, #1
 800027a:	4696      	mov	lr, r2
 800027c:	2e00      	cmp	r6, #0
 800027e:	d0e2      	beq.n	8000246 <__udivmoddi4+0xa6>
 8000280:	e9c6 4e00 	strd	r4, lr, [r6]
 8000284:	e7df      	b.n	8000246 <__udivmoddi4+0xa6>
 8000286:	b902      	cbnz	r2, 800028a <__udivmoddi4+0xea>
 8000288:	deff      	udf	#255	; 0xff
 800028a:	fab2 f382 	clz	r3, r2
 800028e:	2b00      	cmp	r3, #0
 8000290:	f040 808e 	bne.w	80003b0 <__udivmoddi4+0x210>
 8000294:	1a88      	subs	r0, r1, r2
 8000296:	2101      	movs	r1, #1
 8000298:	0c17      	lsrs	r7, r2, #16
 800029a:	fa1f fe82 	uxth.w	lr, r2
 800029e:	fbb0 f5f7 	udiv	r5, r0, r7
 80002a2:	fb07 0015 	mls	r0, r7, r5, r0
 80002a6:	0c22      	lsrs	r2, r4, #16
 80002a8:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80002ac:	fb0e f005 	mul.w	r0, lr, r5
 80002b0:	4290      	cmp	r0, r2
 80002b2:	d908      	bls.n	80002c6 <__udivmoddi4+0x126>
 80002b4:	eb1c 0202 	adds.w	r2, ip, r2
 80002b8:	f105 38ff 	add.w	r8, r5, #4294967295
 80002bc:	d202      	bcs.n	80002c4 <__udivmoddi4+0x124>
 80002be:	4290      	cmp	r0, r2
 80002c0:	f200 80cc 	bhi.w	800045c <__udivmoddi4+0x2bc>
 80002c4:	4645      	mov	r5, r8
 80002c6:	1a12      	subs	r2, r2, r0
 80002c8:	fbb2 f0f7 	udiv	r0, r2, r7
 80002cc:	fb07 2210 	mls	r2, r7, r0, r2
 80002d0:	fb0e fe00 	mul.w	lr, lr, r0
 80002d4:	b2a4      	uxth	r4, r4
 80002d6:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002da:	45a6      	cmp	lr, r4
 80002dc:	d908      	bls.n	80002f0 <__udivmoddi4+0x150>
 80002de:	eb1c 0404 	adds.w	r4, ip, r4
 80002e2:	f100 32ff 	add.w	r2, r0, #4294967295
 80002e6:	d202      	bcs.n	80002ee <__udivmoddi4+0x14e>
 80002e8:	45a6      	cmp	lr, r4
 80002ea:	f200 80b4 	bhi.w	8000456 <__udivmoddi4+0x2b6>
 80002ee:	4610      	mov	r0, r2
 80002f0:	eba4 040e 	sub.w	r4, r4, lr
 80002f4:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80002f8:	e7a0      	b.n	800023c <__udivmoddi4+0x9c>
 80002fa:	f1c1 0720 	rsb	r7, r1, #32
 80002fe:	408b      	lsls	r3, r1
 8000300:	fa22 fc07 	lsr.w	ip, r2, r7
 8000304:	ea4c 0c03 	orr.w	ip, ip, r3
 8000308:	fa25 fa07 	lsr.w	sl, r5, r7
 800030c:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000310:	fbba f8f9 	udiv	r8, sl, r9
 8000314:	408d      	lsls	r5, r1
 8000316:	fa20 f307 	lsr.w	r3, r0, r7
 800031a:	fb09 aa18 	mls	sl, r9, r8, sl
 800031e:	fa1f fe8c 	uxth.w	lr, ip
 8000322:	432b      	orrs	r3, r5
 8000324:	fa00 f501 	lsl.w	r5, r0, r1
 8000328:	fb08 f00e 	mul.w	r0, r8, lr
 800032c:	0c1c      	lsrs	r4, r3, #16
 800032e:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8000332:	42a0      	cmp	r0, r4
 8000334:	fa02 f201 	lsl.w	r2, r2, r1
 8000338:	d90b      	bls.n	8000352 <__udivmoddi4+0x1b2>
 800033a:	eb1c 0404 	adds.w	r4, ip, r4
 800033e:	f108 3aff 	add.w	sl, r8, #4294967295
 8000342:	f080 8086 	bcs.w	8000452 <__udivmoddi4+0x2b2>
 8000346:	42a0      	cmp	r0, r4
 8000348:	f240 8083 	bls.w	8000452 <__udivmoddi4+0x2b2>
 800034c:	f1a8 0802 	sub.w	r8, r8, #2
 8000350:	4464      	add	r4, ip
 8000352:	1a24      	subs	r4, r4, r0
 8000354:	b298      	uxth	r0, r3
 8000356:	fbb4 f3f9 	udiv	r3, r4, r9
 800035a:	fb09 4413 	mls	r4, r9, r3, r4
 800035e:	fb03 fe0e 	mul.w	lr, r3, lr
 8000362:	ea40 4404 	orr.w	r4, r0, r4, lsl #16
 8000366:	45a6      	cmp	lr, r4
 8000368:	d908      	bls.n	800037c <__udivmoddi4+0x1dc>
 800036a:	eb1c 0404 	adds.w	r4, ip, r4
 800036e:	f103 30ff 	add.w	r0, r3, #4294967295
 8000372:	d26a      	bcs.n	800044a <__udivmoddi4+0x2aa>
 8000374:	45a6      	cmp	lr, r4
 8000376:	d968      	bls.n	800044a <__udivmoddi4+0x2aa>
 8000378:	3b02      	subs	r3, #2
 800037a:	4464      	add	r4, ip
 800037c:	ea43 4008 	orr.w	r0, r3, r8, lsl #16
 8000380:	fba0 9302 	umull	r9, r3, r0, r2
 8000384:	eba4 040e 	sub.w	r4, r4, lr
 8000388:	429c      	cmp	r4, r3
 800038a:	46c8      	mov	r8, r9
 800038c:	469e      	mov	lr, r3
 800038e:	d354      	bcc.n	800043a <__udivmoddi4+0x29a>
 8000390:	d051      	beq.n	8000436 <__udivmoddi4+0x296>
 8000392:	2e00      	cmp	r6, #0
 8000394:	d067      	beq.n	8000466 <__udivmoddi4+0x2c6>
 8000396:	ebb5 0308 	subs.w	r3, r5, r8
 800039a:	eb64 040e 	sbc.w	r4, r4, lr
 800039e:	40cb      	lsrs	r3, r1
 80003a0:	fa04 f707 	lsl.w	r7, r4, r7
 80003a4:	431f      	orrs	r7, r3
 80003a6:	40cc      	lsrs	r4, r1
 80003a8:	e9c6 7400 	strd	r7, r4, [r6]
 80003ac:	2100      	movs	r1, #0
 80003ae:	e74a      	b.n	8000246 <__udivmoddi4+0xa6>
 80003b0:	fa02 fc03 	lsl.w	ip, r2, r3
 80003b4:	f1c3 0020 	rsb	r0, r3, #32
 80003b8:	40c1      	lsrs	r1, r0
 80003ba:	409d      	lsls	r5, r3
 80003bc:	fa24 f000 	lsr.w	r0, r4, r0
 80003c0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003c4:	4328      	orrs	r0, r5
 80003c6:	fbb1 f5f7 	udiv	r5, r1, r7
 80003ca:	fb07 1115 	mls	r1, r7, r5, r1
 80003ce:	fa1f fe8c 	uxth.w	lr, ip
 80003d2:	0c02      	lsrs	r2, r0, #16
 80003d4:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80003d8:	fb05 f10e 	mul.w	r1, r5, lr
 80003dc:	4291      	cmp	r1, r2
 80003de:	fa04 f403 	lsl.w	r4, r4, r3
 80003e2:	d908      	bls.n	80003f6 <__udivmoddi4+0x256>
 80003e4:	eb1c 0202 	adds.w	r2, ip, r2
 80003e8:	f105 38ff 	add.w	r8, r5, #4294967295
 80003ec:	d22f      	bcs.n	800044e <__udivmoddi4+0x2ae>
 80003ee:	4291      	cmp	r1, r2
 80003f0:	d92d      	bls.n	800044e <__udivmoddi4+0x2ae>
 80003f2:	3d02      	subs	r5, #2
 80003f4:	4462      	add	r2, ip
 80003f6:	1a52      	subs	r2, r2, r1
 80003f8:	fbb2 f1f7 	udiv	r1, r2, r7
 80003fc:	fb07 2211 	mls	r2, r7, r1, r2
 8000400:	b280      	uxth	r0, r0
 8000402:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 8000406:	fb01 f20e 	mul.w	r2, r1, lr
 800040a:	4282      	cmp	r2, r0
 800040c:	d908      	bls.n	8000420 <__udivmoddi4+0x280>
 800040e:	eb1c 0000 	adds.w	r0, ip, r0
 8000412:	f101 38ff 	add.w	r8, r1, #4294967295
 8000416:	d216      	bcs.n	8000446 <__udivmoddi4+0x2a6>
 8000418:	4282      	cmp	r2, r0
 800041a:	d914      	bls.n	8000446 <__udivmoddi4+0x2a6>
 800041c:	3902      	subs	r1, #2
 800041e:	4460      	add	r0, ip
 8000420:	1a80      	subs	r0, r0, r2
 8000422:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000426:	e73a      	b.n	800029e <__udivmoddi4+0xfe>
 8000428:	4631      	mov	r1, r6
 800042a:	4630      	mov	r0, r6
 800042c:	e70b      	b.n	8000246 <__udivmoddi4+0xa6>
 800042e:	4671      	mov	r1, lr
 8000430:	e6e9      	b.n	8000206 <__udivmoddi4+0x66>
 8000432:	4610      	mov	r0, r2
 8000434:	e6fe      	b.n	8000234 <__udivmoddi4+0x94>
 8000436:	454d      	cmp	r5, r9
 8000438:	d2ab      	bcs.n	8000392 <__udivmoddi4+0x1f2>
 800043a:	ebb9 0802 	subs.w	r8, r9, r2
 800043e:	eb63 0e0c 	sbc.w	lr, r3, ip
 8000442:	3801      	subs	r0, #1
 8000444:	e7a5      	b.n	8000392 <__udivmoddi4+0x1f2>
 8000446:	4641      	mov	r1, r8
 8000448:	e7ea      	b.n	8000420 <__udivmoddi4+0x280>
 800044a:	4603      	mov	r3, r0
 800044c:	e796      	b.n	800037c <__udivmoddi4+0x1dc>
 800044e:	4645      	mov	r5, r8
 8000450:	e7d1      	b.n	80003f6 <__udivmoddi4+0x256>
 8000452:	46d0      	mov	r8, sl
 8000454:	e77d      	b.n	8000352 <__udivmoddi4+0x1b2>
 8000456:	4464      	add	r4, ip
 8000458:	3802      	subs	r0, #2
 800045a:	e749      	b.n	80002f0 <__udivmoddi4+0x150>
 800045c:	3d02      	subs	r5, #2
 800045e:	4462      	add	r2, ip
 8000460:	e731      	b.n	80002c6 <__udivmoddi4+0x126>
 8000462:	4608      	mov	r0, r1
 8000464:	e70a      	b.n	800027c <__udivmoddi4+0xdc>
 8000466:	4631      	mov	r1, r6
 8000468:	e6ed      	b.n	8000246 <__udivmoddi4+0xa6>
 800046a:	bf00      	nop

0800046c <__aeabi_idiv0>:
 800046c:	4770      	bx	lr
 800046e:	bf00      	nop

08000470 <CLCD_voidInit>:

* Breif : This Function Apply initialization sequence for LCD module
* Parameters : nothing
* return : nothing
*/
void CLCD_voidInit ( void ){
 8000470:	b580      	push	{r7, lr}
 8000472:	af00      	add	r7, sp, #0
	//<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<      4 Bits Mode       >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

	#elif   CLCD_MODE == 4

	// 1- must wait more than 30 ms before any action (VDD rises to 4.5 v)
	_delay_ms(35);
 8000474:	2023      	movs	r0, #35	; 0x23
 8000476:	f001 fa69 	bl	800194c <_delay_ms>
	/*return home*/
	CLCD_voidSendCommand( lcd_Home );
 800047a:	2002      	movs	r0, #2
 800047c:	f000 f83f 	bl	80004fe <CLCD_voidSendCommand>
	_delay_ms(20);
 8000480:	2014      	movs	r0, #20
 8000482:	f001 fa63 	bl	800194c <_delay_ms>

	/*FUNCTION SET Command*/
	CLCD_voidSendCommand( FOUR_BITS ); // 4 Bit Mode
 8000486:	2028      	movs	r0, #40	; 0x28
 8000488:	f000 f839 	bl	80004fe <CLCD_voidSendCommand>
	_delay_ms(1);
 800048c:	2001      	movs	r0, #1
 800048e:	f001 fa5d 	bl	800194c <_delay_ms>
	/* DISPLAY & Cursor (ON / OFF) Control */
	CLCD_voidSendCommand( Cursor_Mode );
 8000492:	200c      	movs	r0, #12
 8000494:	f000 f833 	bl	80004fe <CLCD_voidSendCommand>
	_delay_ms(1);
 8000498:	2001      	movs	r0, #1
 800049a:	f001 fa57 	bl	800194c <_delay_ms>
	/* DISPLAY CLEAR */
	CLCD_voidClearScreen();
 800049e:	f000 f89f 	bl	80005e0 <CLCD_voidClearScreen>
	/* ENTRY MODE  Set*/
	CLCD_voidSendCommand( lcd_EntryMode );
 80004a2:	2006      	movs	r0, #6
 80004a4:	f000 f82b 	bl	80004fe <CLCD_voidSendCommand>
	_delay_ms(1);
 80004a8:	2001      	movs	r0, #1
 80004aa:	f001 fa4f 	bl	800194c <_delay_ms>
	#endif




}
 80004ae:	bf00      	nop
 80004b0:	bd80      	pop	{r7, pc}

080004b2 <CLCD_voidSendData>:
* Breif : This Function send data to the port which is defined in config.h
* Parameters :
            => Copy_u8Data --> Data that you want to display (for every pixel )
* return : nothing
*/
void CLCD_voidSendData    ( u8 Copy_u8Data ){
 80004b2:	b580      	push	{r7, lr}
 80004b4:	b082      	sub	sp, #8
 80004b6:	af00      	add	r7, sp, #0
 80004b8:	4603      	mov	r3, r0
 80004ba:	71fb      	strb	r3, [r7, #7]
	GPIO_WritePinValue( CLCD_CONTROL_PORT , CLCD_RS , GPIO_HIGH );
	CLCD_voidSendFallingEdge();

	//<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<      4 Bits Mode       >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
	#elif   CLCD_MODE == 4
	GPIO_WritePinValue( CLCD_CONTROL_PORT , CLCD_RS , GPIO_HIGH );
 80004bc:	2201      	movs	r2, #1
 80004be:	2100      	movs	r1, #0
 80004c0:	2001      	movs	r0, #1
 80004c2:	f000 febd 	bl	8001240 <GPIO_WritePinValue>
	GPIO_Nibble_Write ( CLCD_DATA_PORT, CLCD_DATA_PORT_NIBBLE   , (Copy_u8Data>>4) ); // send the most 4 bits of data to high nibbles
 80004c6:	79fb      	ldrb	r3, [r7, #7]
 80004c8:	091b      	lsrs	r3, r3, #4
 80004ca:	b2db      	uxtb	r3, r3
 80004cc:	461a      	mov	r2, r3
 80004ce:	210c      	movs	r1, #12
 80004d0:	2001      	movs	r0, #1
 80004d2:	f000 fd53 	bl	8000f7c <GPIO_Nibble_Write>
	CLCD_voidSendFallingEdge();
 80004d6:	f000 f893 	bl	8000600 <CLCD_voidSendFallingEdge>
	GPIO_Nibble_Write ( CLCD_DATA_PORT, CLCD_DATA_PORT_NIBBLE    , (Copy_u8Data&0x0f)        );
 80004da:	79fb      	ldrb	r3, [r7, #7]
 80004dc:	f003 030f 	and.w	r3, r3, #15
 80004e0:	b2db      	uxtb	r3, r3
 80004e2:	461a      	mov	r2, r3
 80004e4:	210c      	movs	r1, #12
 80004e6:	2001      	movs	r0, #1
 80004e8:	f000 fd48 	bl	8000f7c <GPIO_Nibble_Write>
	CLCD_voidSendFallingEdge();
 80004ec:	f000 f888 	bl	8000600 <CLCD_voidSendFallingEdge>

	// send the most 4 bits of data to high nibbles
	#endif
	_delay_ms(1);
 80004f0:	2001      	movs	r0, #1
 80004f2:	f001 fa2b 	bl	800194c <_delay_ms>
}
 80004f6:	bf00      	nop
 80004f8:	3708      	adds	r7, #8
 80004fa:	46bd      	mov	sp, r7
 80004fc:	bd80      	pop	{r7, pc}

080004fe <CLCD_voidSendCommand>:
* Parameters :
            => Copy_u8Command --> Command number
* return : nothing
*Hint : RS pin Mode is the difference between this function and the previous (CLCD_voidSendData)
*/
void CLCD_voidSendCommand ( u8 Copy_u8Command ){
 80004fe:	b580      	push	{r7, lr}
 8000500:	b082      	sub	sp, #8
 8000502:	af00      	add	r7, sp, #0
 8000504:	4603      	mov	r3, r0
 8000506:	71fb      	strb	r3, [r7, #7]
	GPIO_WritePinValue (CLCD_CONTROL_PORT, CLCD_RS , GPIO_LOW );
	CLCD_voidSendFallingEdge();

	//<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<      4 Bits Mode       >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
	#elif   CLCD_MODE == 4
		GPIO_WritePinValue( CLCD_CONTROL_PORT , CLCD_RS , GPIO_LOW );
 8000508:	2200      	movs	r2, #0
 800050a:	2100      	movs	r1, #0
 800050c:	2001      	movs	r0, #1
 800050e:	f000 fe97 	bl	8001240 <GPIO_WritePinValue>
		GPIO_Nibble_Write ( CLCD_DATA_PORT, CLCD_DATA_PORT_NIBBLE    , (Copy_u8Command>>4) ); // send the most 4 bits of data to high nibbles
 8000512:	79fb      	ldrb	r3, [r7, #7]
 8000514:	091b      	lsrs	r3, r3, #4
 8000516:	b2db      	uxtb	r3, r3
 8000518:	461a      	mov	r2, r3
 800051a:	210c      	movs	r1, #12
 800051c:	2001      	movs	r0, #1
 800051e:	f000 fd2d 	bl	8000f7c <GPIO_Nibble_Write>
		CLCD_voidSendFallingEdge();
 8000522:	f000 f86d 	bl	8000600 <CLCD_voidSendFallingEdge>
		GPIO_Nibble_Write ( CLCD_DATA_PORT, CLCD_DATA_PORT_NIBBLE    , (Copy_u8Command&0x0f)        );
 8000526:	79fb      	ldrb	r3, [r7, #7]
 8000528:	f003 030f 	and.w	r3, r3, #15
 800052c:	b2db      	uxtb	r3, r3
 800052e:	461a      	mov	r2, r3
 8000530:	210c      	movs	r1, #12
 8000532:	2001      	movs	r0, #1
 8000534:	f000 fd22 	bl	8000f7c <GPIO_Nibble_Write>
		CLCD_voidSendFallingEdge();
 8000538:	f000 f862 	bl	8000600 <CLCD_voidSendFallingEdge>

	#endif
		_delay_ms(1);
 800053c:	2001      	movs	r0, #1
 800053e:	f001 fa05 	bl	800194c <_delay_ms>

}
 8000542:	bf00      	nop
 8000544:	3708      	adds	r7, #8
 8000546:	46bd      	mov	sp, r7
 8000548:	bd80      	pop	{r7, pc}

0800054a <CLCD_voidSendString>:
* Breif : This Function send string to the port which is defined in config.h
* Parameters :
            => * Copy_u8ptrString  --> Pointer to the string
* return : nothing
*/
void CLCD_voidSendString  (  u8 * Copy_u8ptrString ){
 800054a:	b580      	push	{r7, lr}
 800054c:	b084      	sub	sp, #16
 800054e:	af00      	add	r7, sp, #0
 8000550:	6078      	str	r0, [r7, #4]

	u8 LOC_u8Iterator = 0 ;
 8000552:	2300      	movs	r3, #0
 8000554:	73fb      	strb	r3, [r7, #15]

	while( Copy_u8ptrString[LOC_u8Iterator] != '\0' ){
 8000556:	e009      	b.n	800056c <CLCD_voidSendString+0x22>

		CLCD_voidSendData( Copy_u8ptrString[LOC_u8Iterator] );
 8000558:	7bfb      	ldrb	r3, [r7, #15]
 800055a:	687a      	ldr	r2, [r7, #4]
 800055c:	4413      	add	r3, r2
 800055e:	781b      	ldrb	r3, [r3, #0]
 8000560:	4618      	mov	r0, r3
 8000562:	f7ff ffa6 	bl	80004b2 <CLCD_voidSendData>
		LOC_u8Iterator++ ;
 8000566:	7bfb      	ldrb	r3, [r7, #15]
 8000568:	3301      	adds	r3, #1
 800056a:	73fb      	strb	r3, [r7, #15]
	while( Copy_u8ptrString[LOC_u8Iterator] != '\0' ){
 800056c:	7bfb      	ldrb	r3, [r7, #15]
 800056e:	687a      	ldr	r2, [r7, #4]
 8000570:	4413      	add	r3, r2
 8000572:	781b      	ldrb	r3, [r3, #0]
 8000574:	2b00      	cmp	r3, #0
 8000576:	d1ef      	bne.n	8000558 <CLCD_voidSendString+0xe>

	}

}
 8000578:	bf00      	nop
 800057a:	bf00      	nop
 800057c:	3710      	adds	r7, #16
 800057e:	46bd      	mov	sp, r7
 8000580:	bd80      	pop	{r7, pc}

08000582 <CLCD_voidSetPosition>:
*Hint :-
   In This function we send a command which =0b1xxxxxxx
   MSB = 1  ===> refers that it is command to set cursor
   xxxxxxx  ===> refers to AC ( Address Counter 7Bits / DDRAM Locations 128Location )
*/
void CLCD_voidSetPosition ( u8 Copy_u8Row , u8 Copy_u8Col ){
 8000582:	b580      	push	{r7, lr}
 8000584:	b084      	sub	sp, #16
 8000586:	af00      	add	r7, sp, #0
 8000588:	4603      	mov	r3, r0
 800058a:	460a      	mov	r2, r1
 800058c:	71fb      	strb	r3, [r7, #7]
 800058e:	4613      	mov	r3, r2
 8000590:	71bb      	strb	r3, [r7, #6]

	u8 LOC_u8data ;
	#if CLCD_Type == CLCd_2_16
		if(Copy_u8Row>2||Copy_u8Row<1||Copy_u8Col>16||Copy_u8Col<1)  //check
 8000592:	79fb      	ldrb	r3, [r7, #7]
 8000594:	2b02      	cmp	r3, #2
 8000596:	d808      	bhi.n	80005aa <CLCD_voidSetPosition+0x28>
 8000598:	79fb      	ldrb	r3, [r7, #7]
 800059a:	2b00      	cmp	r3, #0
 800059c:	d005      	beq.n	80005aa <CLCD_voidSetPosition+0x28>
 800059e:	79bb      	ldrb	r3, [r7, #6]
 80005a0:	2b10      	cmp	r3, #16
 80005a2:	d802      	bhi.n	80005aa <CLCD_voidSetPosition+0x28>
 80005a4:	79bb      	ldrb	r3, [r7, #6]
 80005a6:	2b00      	cmp	r3, #0
 80005a8:	d102      	bne.n	80005b0 <CLCD_voidSetPosition+0x2e>
		{
			LOC_u8data = lcd_Line_1 ;   // first location
 80005aa:	2380      	movs	r3, #128	; 0x80
 80005ac:	73fb      	strb	r3, [r7, #15]
 80005ae:	e00c      	b.n	80005ca <CLCD_voidSetPosition+0x48>
		}

		else if( Copy_u8Row == CLCD_ROW_1 ){
 80005b0:	79fb      	ldrb	r3, [r7, #7]
 80005b2:	2b01      	cmp	r3, #1
 80005b4:	d103      	bne.n	80005be <CLCD_voidSetPosition+0x3c>

			LOC_u8data = ( ( lcd_Line_1 ) + ( Copy_u8Col - 1 ) );              //Row1 -> 0x80+col-1
 80005b6:	79bb      	ldrb	r3, [r7, #6]
 80005b8:	337f      	adds	r3, #127	; 0x7f
 80005ba:	73fb      	strb	r3, [r7, #15]
 80005bc:	e005      	b.n	80005ca <CLCD_voidSetPosition+0x48>

		}

		else if( Copy_u8Row == CLCD_ROW_2 ){
 80005be:	79fb      	ldrb	r3, [r7, #7]
 80005c0:	2b02      	cmp	r3, #2
 80005c2:	d102      	bne.n	80005ca <CLCD_voidSetPosition+0x48>

			LOC_u8data = ( ( lcd_Line_2)+  ( Copy_u8Col - 1 ) );       //Row2 -> 0xc0+col-1
 80005c4:	79bb      	ldrb	r3, [r7, #6]
 80005c6:	3b41      	subs	r3, #65	; 0x41
 80005c8:	73fb      	strb	r3, [r7, #15]

					LOC_u8data = ( ( lcd_Line_4) + ( Copy_u8Col - 1 ) );       //Row4 -> 0xc0+col-1

				}
	#endif
	CLCD_voidSendCommand ( LOC_u8data );
 80005ca:	7bfb      	ldrb	r3, [r7, #15]
 80005cc:	4618      	mov	r0, r3
 80005ce:	f7ff ff96 	bl	80004fe <CLCD_voidSendCommand>
	_delay_ms(1);
 80005d2:	2001      	movs	r0, #1
 80005d4:	f001 f9ba 	bl	800194c <_delay_ms>
}
 80005d8:	bf00      	nop
 80005da:	3710      	adds	r7, #16
 80005dc:	46bd      	mov	sp, r7
 80005de:	bd80      	pop	{r7, pc}

080005e0 <CLCD_voidClearScreen>:
* Breif : This Function clear LCD
* Parameters : nothing
* return : nothing
*/
void CLCD_voidClearScreen(void)
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	af00      	add	r7, sp, #0
	CLCD_voidSendCommand(lcd_Clear);
 80005e4:	2001      	movs	r0, #1
 80005e6:	f7ff ff8a 	bl	80004fe <CLCD_voidSendCommand>
	_delay_ms(1);
 80005ea:	2001      	movs	r0, #1
 80005ec:	f001 f9ae 	bl	800194c <_delay_ms>
	CLCD_voidSendCommand(lcd_Home);
 80005f0:	2002      	movs	r0, #2
 80005f2:	f7ff ff84 	bl	80004fe <CLCD_voidSendCommand>
	_delay_ms(1); //wait more than 1.53 ms
 80005f6:	2001      	movs	r0, #1
 80005f8:	f001 f9a8 	bl	800194c <_delay_ms>
}
 80005fc:	bf00      	nop
 80005fe:	bd80      	pop	{r7, pc}

08000600 <CLCD_voidSendFallingEdge>:
*
* Hint : static Function to forbid calling it out this file
*
*/
static void CLCD_voidSendFallingEdge(void)
{
 8000600:	b580      	push	{r7, lr}
 8000602:	af00      	add	r7, sp, #0
	GPIO_WritePinValue  ( CLCD_CONTROL_PORT , CLCD_EN ,GPIO_HIGH );
 8000604:	2201      	movs	r2, #1
 8000606:	2101      	movs	r1, #1
 8000608:	2001      	movs	r0, #1
 800060a:	f000 fe19 	bl	8001240 <GPIO_WritePinValue>
	_delay_ms(1);
 800060e:	2001      	movs	r0, #1
 8000610:	f001 f99c 	bl	800194c <_delay_ms>
	GPIO_WritePinValue  ( CLCD_CONTROL_PORT , CLCD_EN ,GPIO_LOW  );
 8000614:	2200      	movs	r2, #0
 8000616:	2101      	movs	r1, #1
 8000618:	2001      	movs	r0, #1
 800061a:	f000 fe11 	bl	8001240 <GPIO_WritePinValue>
	_delay_ms(1);
 800061e:	2001      	movs	r0, #1
 8000620:	f001 f994 	bl	800194c <_delay_ms>
}
 8000624:	bf00      	nop
 8000626:	bd80      	pop	{r7, pc}

08000628 <AFIO_EXTI_Port_Source>:
	  case AFIO_TIMER4 : CLR_BIT(AFIO->MAPR,12); break;
	}
}

void AFIO_EXTI_Port_Source(AFIO_EXTI_ID Copy_u8EXTINumber , AFIO_PORT Copy_u8PortNumber)
{
 8000628:	b480      	push	{r7}
 800062a:	b085      	sub	sp, #20
 800062c:	af00      	add	r7, sp, #0
 800062e:	4603      	mov	r3, r0
 8000630:	460a      	mov	r2, r1
 8000632:	71fb      	strb	r3, [r7, #7]
 8000634:	4613      	mov	r3, r2
 8000636:	71bb      	strb	r3, [r7, #6]

	if(Copy_u8EXTINumber <= AFIO_EXTI_LINE15)
 8000638:	79fb      	ldrb	r3, [r7, #7]
 800063a:	2b0f      	cmp	r3, #15
 800063c:	d829      	bhi.n	8000692 <AFIO_EXTI_Port_Source+0x6a>
	{
		u8 Local_RegisterNumber = Copy_u8EXTINumber/4;
 800063e:	79fb      	ldrb	r3, [r7, #7]
 8000640:	089b      	lsrs	r3, r3, #2
 8000642:	73fb      	strb	r3, [r7, #15]
		u8 Local_ByteNumber = Copy_u8EXTINumber%4;
 8000644:	79fb      	ldrb	r3, [r7, #7]
 8000646:	f003 0303 	and.w	r3, r3, #3
 800064a:	73bb      	strb	r3, [r7, #14]

		AFIO->EXTICR[Local_RegisterNumber] &= ~(0b1111 << (4*Local_ByteNumber));
 800064c:	4a13      	ldr	r2, [pc, #76]	; (800069c <AFIO_EXTI_Port_Source+0x74>)
 800064e:	7bfb      	ldrb	r3, [r7, #15]
 8000650:	3302      	adds	r3, #2
 8000652:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000656:	7bbb      	ldrb	r3, [r7, #14]
 8000658:	009b      	lsls	r3, r3, #2
 800065a:	210f      	movs	r1, #15
 800065c:	fa01 f303 	lsl.w	r3, r1, r3
 8000660:	43db      	mvns	r3, r3
 8000662:	4618      	mov	r0, r3
 8000664:	490d      	ldr	r1, [pc, #52]	; (800069c <AFIO_EXTI_Port_Source+0x74>)
 8000666:	7bfb      	ldrb	r3, [r7, #15]
 8000668:	4002      	ands	r2, r0
 800066a:	3302      	adds	r3, #2
 800066c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		AFIO->EXTICR[Local_RegisterNumber] |= (Copy_u8PortNumber << (4*Local_ByteNumber));
 8000670:	4a0a      	ldr	r2, [pc, #40]	; (800069c <AFIO_EXTI_Port_Source+0x74>)
 8000672:	7bfb      	ldrb	r3, [r7, #15]
 8000674:	3302      	adds	r3, #2
 8000676:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800067a:	79b9      	ldrb	r1, [r7, #6]
 800067c:	7bbb      	ldrb	r3, [r7, #14]
 800067e:	009b      	lsls	r3, r3, #2
 8000680:	fa01 f303 	lsl.w	r3, r1, r3
 8000684:	4618      	mov	r0, r3
 8000686:	4905      	ldr	r1, [pc, #20]	; (800069c <AFIO_EXTI_Port_Source+0x74>)
 8000688:	7bfb      	ldrb	r3, [r7, #15]
 800068a:	4302      	orrs	r2, r0
 800068c:	3302      	adds	r3, #2
 800068e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	}

}
 8000692:	bf00      	nop
 8000694:	3714      	adds	r7, #20
 8000696:	46bd      	mov	sp, r7
 8000698:	bc80      	pop	{r7}
 800069a:	4770      	bx	lr
 800069c:	40010000 	.word	0x40010000

080006a0 <DMA_voidChannelInit>:
							  DMA_DATA_Transfer_type_t DataTransferType ,
							  DMA_Source_INC_t  source_IncrementMode    ,
							  DMA_DIST_INC_t Dist_IncrementMode  ,
							  DMA_TC_INT_EN_t EnableTCInt   ,
							  DMA_Cicular_Mode_t cicular_mode   )
{
 80006a0:	b490      	push	{r4, r7}
 80006a2:	b082      	sub	sp, #8
 80006a4:	af00      	add	r7, sp, #0
 80006a6:	4604      	mov	r4, r0
 80006a8:	4608      	mov	r0, r1
 80006aa:	4611      	mov	r1, r2
 80006ac:	461a      	mov	r2, r3
 80006ae:	4623      	mov	r3, r4
 80006b0:	71fb      	strb	r3, [r7, #7]
 80006b2:	4603      	mov	r3, r0
 80006b4:	71bb      	strb	r3, [r7, #6]
 80006b6:	460b      	mov	r3, r1
 80006b8:	717b      	strb	r3, [r7, #5]
 80006ba:	4613      	mov	r3, r2
 80006bc:	713b      	strb	r3, [r7, #4]
	// wait until DMA CHannel is disabled
		DMA->CHANNEL[ChannelNumber].CCR=0;
 80006be:	4993      	ldr	r1, [pc, #588]	; (800090c <DMA_voidChannelInit+0x26c>)
 80006c0:	79fa      	ldrb	r2, [r7, #7]
 80006c2:	4613      	mov	r3, r2
 80006c4:	009b      	lsls	r3, r3, #2
 80006c6:	4413      	add	r3, r2
 80006c8:	009b      	lsls	r3, r3, #2
 80006ca:	440b      	add	r3, r1
 80006cc:	3308      	adds	r3, #8
 80006ce:	2200      	movs	r2, #0
 80006d0:	601a      	str	r2, [r3, #0]
		while(GET_BIT(DMA->CHANNEL[ChannelNumber].CCR,0)==1);
 80006d2:	bf00      	nop
 80006d4:	498d      	ldr	r1, [pc, #564]	; (800090c <DMA_voidChannelInit+0x26c>)
 80006d6:	79fa      	ldrb	r2, [r7, #7]
 80006d8:	4613      	mov	r3, r2
 80006da:	009b      	lsls	r3, r3, #2
 80006dc:	4413      	add	r3, r2
 80006de:	009b      	lsls	r3, r3, #2
 80006e0:	440b      	add	r3, r1
 80006e2:	3308      	adds	r3, #8
 80006e4:	681b      	ldr	r3, [r3, #0]
 80006e6:	f003 0301 	and.w	r3, r3, #1
 80006ea:	2b01      	cmp	r3, #1
 80006ec:	d0f2      	beq.n	80006d4 <DMA_voidChannelInit+0x34>
		switch(DataTransferType){
 80006ee:	7c3b      	ldrb	r3, [r7, #16]
 80006f0:	2b03      	cmp	r3, #3
 80006f2:	f200 8162 	bhi.w	80009ba <DMA_voidChannelInit+0x31a>
 80006f6:	a201      	add	r2, pc, #4	; (adr r2, 80006fc <DMA_voidChannelInit+0x5c>)
 80006f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80006fc:	0800070d 	.word	0x0800070d
 8000700:	08000861 	.word	0x08000861
 8000704:	080007b7 	.word	0x080007b7
 8000708:	08000911 	.word	0x08000911
		 case DMA_PER_TO_MEM:
			 CLEAR_BIT(DMA->CHANNEL[ChannelNumber].CCR,14);
 800070c:	497f      	ldr	r1, [pc, #508]	; (800090c <DMA_voidChannelInit+0x26c>)
 800070e:	79fa      	ldrb	r2, [r7, #7]
 8000710:	4613      	mov	r3, r2
 8000712:	009b      	lsls	r3, r3, #2
 8000714:	4413      	add	r3, r2
 8000716:	009b      	lsls	r3, r3, #2
 8000718:	440b      	add	r3, r1
 800071a:	3308      	adds	r3, #8
 800071c:	681b      	ldr	r3, [r3, #0]
 800071e:	487b      	ldr	r0, [pc, #492]	; (800090c <DMA_voidChannelInit+0x26c>)
 8000720:	79fa      	ldrb	r2, [r7, #7]
 8000722:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 8000726:	4613      	mov	r3, r2
 8000728:	009b      	lsls	r3, r3, #2
 800072a:	4413      	add	r3, r2
 800072c:	009b      	lsls	r3, r3, #2
 800072e:	4403      	add	r3, r0
 8000730:	3308      	adds	r3, #8
 8000732:	6019      	str	r1, [r3, #0]
			 CLEAR_BIT(DMA->CHANNEL[ChannelNumber].CCR,4);
 8000734:	4975      	ldr	r1, [pc, #468]	; (800090c <DMA_voidChannelInit+0x26c>)
 8000736:	79fa      	ldrb	r2, [r7, #7]
 8000738:	4613      	mov	r3, r2
 800073a:	009b      	lsls	r3, r3, #2
 800073c:	4413      	add	r3, r2
 800073e:	009b      	lsls	r3, r3, #2
 8000740:	440b      	add	r3, r1
 8000742:	3308      	adds	r3, #8
 8000744:	681b      	ldr	r3, [r3, #0]
 8000746:	4871      	ldr	r0, [pc, #452]	; (800090c <DMA_voidChannelInit+0x26c>)
 8000748:	79fa      	ldrb	r2, [r7, #7]
 800074a:	f023 0110 	bic.w	r1, r3, #16
 800074e:	4613      	mov	r3, r2
 8000750:	009b      	lsls	r3, r3, #2
 8000752:	4413      	add	r3, r2
 8000754:	009b      	lsls	r3, r3, #2
 8000756:	4403      	add	r3, r0
 8000758:	3308      	adds	r3, #8
 800075a:	6019      	str	r1, [r3, #0]
				DMA->CHANNEL[ChannelNumber].CCR|=(source_IncrementMode<<6); // suppose Peripheral is source
 800075c:	496b      	ldr	r1, [pc, #428]	; (800090c <DMA_voidChannelInit+0x26c>)
 800075e:	79fa      	ldrb	r2, [r7, #7]
 8000760:	4613      	mov	r3, r2
 8000762:	009b      	lsls	r3, r3, #2
 8000764:	4413      	add	r3, r2
 8000766:	009b      	lsls	r3, r3, #2
 8000768:	440b      	add	r3, r1
 800076a:	3308      	adds	r3, #8
 800076c:	681b      	ldr	r3, [r3, #0]
 800076e:	7d3a      	ldrb	r2, [r7, #20]
 8000770:	0192      	lsls	r2, r2, #6
 8000772:	4611      	mov	r1, r2
 8000774:	4865      	ldr	r0, [pc, #404]	; (800090c <DMA_voidChannelInit+0x26c>)
 8000776:	79fa      	ldrb	r2, [r7, #7]
 8000778:	4319      	orrs	r1, r3
 800077a:	4613      	mov	r3, r2
 800077c:	009b      	lsls	r3, r3, #2
 800077e:	4413      	add	r3, r2
 8000780:	009b      	lsls	r3, r3, #2
 8000782:	4403      	add	r3, r0
 8000784:	3308      	adds	r3, #8
 8000786:	6019      	str	r1, [r3, #0]
				DMA->CHANNEL[ChannelNumber].CCR|=(Dist_IncrementMode<<7);	// suppose memory is destination
 8000788:	4960      	ldr	r1, [pc, #384]	; (800090c <DMA_voidChannelInit+0x26c>)
 800078a:	79fa      	ldrb	r2, [r7, #7]
 800078c:	4613      	mov	r3, r2
 800078e:	009b      	lsls	r3, r3, #2
 8000790:	4413      	add	r3, r2
 8000792:	009b      	lsls	r3, r3, #2
 8000794:	440b      	add	r3, r1
 8000796:	3308      	adds	r3, #8
 8000798:	681b      	ldr	r3, [r3, #0]
 800079a:	7e3a      	ldrb	r2, [r7, #24]
 800079c:	01d2      	lsls	r2, r2, #7
 800079e:	4611      	mov	r1, r2
 80007a0:	485a      	ldr	r0, [pc, #360]	; (800090c <DMA_voidChannelInit+0x26c>)
 80007a2:	79fa      	ldrb	r2, [r7, #7]
 80007a4:	4319      	orrs	r1, r3
 80007a6:	4613      	mov	r3, r2
 80007a8:	009b      	lsls	r3, r3, #2
 80007aa:	4413      	add	r3, r2
 80007ac:	009b      	lsls	r3, r3, #2
 80007ae:	4403      	add	r3, r0
 80007b0:	3308      	adds	r3, #8
 80007b2:	6019      	str	r1, [r3, #0]
			 break;
 80007b4:	e101      	b.n	80009ba <DMA_voidChannelInit+0x31a>
		 case DMA_MEM_TO_MEM:
			 SET_BIT(DMA->CHANNEL[ChannelNumber].CCR,14);
 80007b6:	4955      	ldr	r1, [pc, #340]	; (800090c <DMA_voidChannelInit+0x26c>)
 80007b8:	79fa      	ldrb	r2, [r7, #7]
 80007ba:	4613      	mov	r3, r2
 80007bc:	009b      	lsls	r3, r3, #2
 80007be:	4413      	add	r3, r2
 80007c0:	009b      	lsls	r3, r3, #2
 80007c2:	440b      	add	r3, r1
 80007c4:	3308      	adds	r3, #8
 80007c6:	681b      	ldr	r3, [r3, #0]
 80007c8:	4850      	ldr	r0, [pc, #320]	; (800090c <DMA_voidChannelInit+0x26c>)
 80007ca:	79fa      	ldrb	r2, [r7, #7]
 80007cc:	f443 4180 	orr.w	r1, r3, #16384	; 0x4000
 80007d0:	4613      	mov	r3, r2
 80007d2:	009b      	lsls	r3, r3, #2
 80007d4:	4413      	add	r3, r2
 80007d6:	009b      	lsls	r3, r3, #2
 80007d8:	4403      	add	r3, r0
 80007da:	3308      	adds	r3, #8
 80007dc:	6019      	str	r1, [r3, #0]
			 SET_BIT(DMA->CHANNEL[ChannelNumber].CCR,4);
 80007de:	494b      	ldr	r1, [pc, #300]	; (800090c <DMA_voidChannelInit+0x26c>)
 80007e0:	79fa      	ldrb	r2, [r7, #7]
 80007e2:	4613      	mov	r3, r2
 80007e4:	009b      	lsls	r3, r3, #2
 80007e6:	4413      	add	r3, r2
 80007e8:	009b      	lsls	r3, r3, #2
 80007ea:	440b      	add	r3, r1
 80007ec:	3308      	adds	r3, #8
 80007ee:	681b      	ldr	r3, [r3, #0]
 80007f0:	4846      	ldr	r0, [pc, #280]	; (800090c <DMA_voidChannelInit+0x26c>)
 80007f2:	79fa      	ldrb	r2, [r7, #7]
 80007f4:	f043 0110 	orr.w	r1, r3, #16
 80007f8:	4613      	mov	r3, r2
 80007fa:	009b      	lsls	r3, r3, #2
 80007fc:	4413      	add	r3, r2
 80007fe:	009b      	lsls	r3, r3, #2
 8000800:	4403      	add	r3, r0
 8000802:	3308      	adds	r3, #8
 8000804:	6019      	str	r1, [r3, #0]
				DMA->CHANNEL[ChannelNumber].CCR|=(source_IncrementMode<<6); // suppose Peripheral is source
 8000806:	4941      	ldr	r1, [pc, #260]	; (800090c <DMA_voidChannelInit+0x26c>)
 8000808:	79fa      	ldrb	r2, [r7, #7]
 800080a:	4613      	mov	r3, r2
 800080c:	009b      	lsls	r3, r3, #2
 800080e:	4413      	add	r3, r2
 8000810:	009b      	lsls	r3, r3, #2
 8000812:	440b      	add	r3, r1
 8000814:	3308      	adds	r3, #8
 8000816:	681b      	ldr	r3, [r3, #0]
 8000818:	7d3a      	ldrb	r2, [r7, #20]
 800081a:	0192      	lsls	r2, r2, #6
 800081c:	4611      	mov	r1, r2
 800081e:	483b      	ldr	r0, [pc, #236]	; (800090c <DMA_voidChannelInit+0x26c>)
 8000820:	79fa      	ldrb	r2, [r7, #7]
 8000822:	4319      	orrs	r1, r3
 8000824:	4613      	mov	r3, r2
 8000826:	009b      	lsls	r3, r3, #2
 8000828:	4413      	add	r3, r2
 800082a:	009b      	lsls	r3, r3, #2
 800082c:	4403      	add	r3, r0
 800082e:	3308      	adds	r3, #8
 8000830:	6019      	str	r1, [r3, #0]
				DMA->CHANNEL[ChannelNumber].CCR|=(Dist_IncrementMode<<7);	// suppose memory is destination
 8000832:	4936      	ldr	r1, [pc, #216]	; (800090c <DMA_voidChannelInit+0x26c>)
 8000834:	79fa      	ldrb	r2, [r7, #7]
 8000836:	4613      	mov	r3, r2
 8000838:	009b      	lsls	r3, r3, #2
 800083a:	4413      	add	r3, r2
 800083c:	009b      	lsls	r3, r3, #2
 800083e:	440b      	add	r3, r1
 8000840:	3308      	adds	r3, #8
 8000842:	681b      	ldr	r3, [r3, #0]
 8000844:	7e3a      	ldrb	r2, [r7, #24]
 8000846:	01d2      	lsls	r2, r2, #7
 8000848:	4611      	mov	r1, r2
 800084a:	4830      	ldr	r0, [pc, #192]	; (800090c <DMA_voidChannelInit+0x26c>)
 800084c:	79fa      	ldrb	r2, [r7, #7]
 800084e:	4319      	orrs	r1, r3
 8000850:	4613      	mov	r3, r2
 8000852:	009b      	lsls	r3, r3, #2
 8000854:	4413      	add	r3, r2
 8000856:	009b      	lsls	r3, r3, #2
 8000858:	4403      	add	r3, r0
 800085a:	3308      	adds	r3, #8
 800085c:	6019      	str	r1, [r3, #0]
			 break;
 800085e:	e0ac      	b.n	80009ba <DMA_voidChannelInit+0x31a>
		 case DMA_MEM_TO_PER:
			 CLEAR_BIT(DMA->CHANNEL[ChannelNumber].CCR,14);
 8000860:	492a      	ldr	r1, [pc, #168]	; (800090c <DMA_voidChannelInit+0x26c>)
 8000862:	79fa      	ldrb	r2, [r7, #7]
 8000864:	4613      	mov	r3, r2
 8000866:	009b      	lsls	r3, r3, #2
 8000868:	4413      	add	r3, r2
 800086a:	009b      	lsls	r3, r3, #2
 800086c:	440b      	add	r3, r1
 800086e:	3308      	adds	r3, #8
 8000870:	681b      	ldr	r3, [r3, #0]
 8000872:	4826      	ldr	r0, [pc, #152]	; (800090c <DMA_voidChannelInit+0x26c>)
 8000874:	79fa      	ldrb	r2, [r7, #7]
 8000876:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 800087a:	4613      	mov	r3, r2
 800087c:	009b      	lsls	r3, r3, #2
 800087e:	4413      	add	r3, r2
 8000880:	009b      	lsls	r3, r3, #2
 8000882:	4403      	add	r3, r0
 8000884:	3308      	adds	r3, #8
 8000886:	6019      	str	r1, [r3, #0]
			 SET_BIT(DMA->CHANNEL[ChannelNumber].CCR,4);
 8000888:	4920      	ldr	r1, [pc, #128]	; (800090c <DMA_voidChannelInit+0x26c>)
 800088a:	79fa      	ldrb	r2, [r7, #7]
 800088c:	4613      	mov	r3, r2
 800088e:	009b      	lsls	r3, r3, #2
 8000890:	4413      	add	r3, r2
 8000892:	009b      	lsls	r3, r3, #2
 8000894:	440b      	add	r3, r1
 8000896:	3308      	adds	r3, #8
 8000898:	681b      	ldr	r3, [r3, #0]
 800089a:	481c      	ldr	r0, [pc, #112]	; (800090c <DMA_voidChannelInit+0x26c>)
 800089c:	79fa      	ldrb	r2, [r7, #7]
 800089e:	f043 0110 	orr.w	r1, r3, #16
 80008a2:	4613      	mov	r3, r2
 80008a4:	009b      	lsls	r3, r3, #2
 80008a6:	4413      	add	r3, r2
 80008a8:	009b      	lsls	r3, r3, #2
 80008aa:	4403      	add	r3, r0
 80008ac:	3308      	adds	r3, #8
 80008ae:	6019      	str	r1, [r3, #0]
				DMA->CHANNEL[ChannelNumber].CCR|=(source_IncrementMode<<7); // suppose Peripheral is source
 80008b0:	4916      	ldr	r1, [pc, #88]	; (800090c <DMA_voidChannelInit+0x26c>)
 80008b2:	79fa      	ldrb	r2, [r7, #7]
 80008b4:	4613      	mov	r3, r2
 80008b6:	009b      	lsls	r3, r3, #2
 80008b8:	4413      	add	r3, r2
 80008ba:	009b      	lsls	r3, r3, #2
 80008bc:	440b      	add	r3, r1
 80008be:	3308      	adds	r3, #8
 80008c0:	681b      	ldr	r3, [r3, #0]
 80008c2:	7d3a      	ldrb	r2, [r7, #20]
 80008c4:	01d2      	lsls	r2, r2, #7
 80008c6:	4611      	mov	r1, r2
 80008c8:	4810      	ldr	r0, [pc, #64]	; (800090c <DMA_voidChannelInit+0x26c>)
 80008ca:	79fa      	ldrb	r2, [r7, #7]
 80008cc:	4319      	orrs	r1, r3
 80008ce:	4613      	mov	r3, r2
 80008d0:	009b      	lsls	r3, r3, #2
 80008d2:	4413      	add	r3, r2
 80008d4:	009b      	lsls	r3, r3, #2
 80008d6:	4403      	add	r3, r0
 80008d8:	3308      	adds	r3, #8
 80008da:	6019      	str	r1, [r3, #0]
				DMA->CHANNEL[ChannelNumber].CCR|=(Dist_IncrementMode<<6);	// suppose memory is destination
 80008dc:	490b      	ldr	r1, [pc, #44]	; (800090c <DMA_voidChannelInit+0x26c>)
 80008de:	79fa      	ldrb	r2, [r7, #7]
 80008e0:	4613      	mov	r3, r2
 80008e2:	009b      	lsls	r3, r3, #2
 80008e4:	4413      	add	r3, r2
 80008e6:	009b      	lsls	r3, r3, #2
 80008e8:	440b      	add	r3, r1
 80008ea:	3308      	adds	r3, #8
 80008ec:	681b      	ldr	r3, [r3, #0]
 80008ee:	7e3a      	ldrb	r2, [r7, #24]
 80008f0:	0192      	lsls	r2, r2, #6
 80008f2:	4611      	mov	r1, r2
 80008f4:	4805      	ldr	r0, [pc, #20]	; (800090c <DMA_voidChannelInit+0x26c>)
 80008f6:	79fa      	ldrb	r2, [r7, #7]
 80008f8:	4319      	orrs	r1, r3
 80008fa:	4613      	mov	r3, r2
 80008fc:	009b      	lsls	r3, r3, #2
 80008fe:	4413      	add	r3, r2
 8000900:	009b      	lsls	r3, r3, #2
 8000902:	4403      	add	r3, r0
 8000904:	3308      	adds	r3, #8
 8000906:	6019      	str	r1, [r3, #0]
			 break;
 8000908:	e057      	b.n	80009ba <DMA_voidChannelInit+0x31a>
 800090a:	bf00      	nop
 800090c:	40020000 	.word	0x40020000
		 case DMA_PER_TO_PER:
			 CLEAR_BIT(DMA->CHANNEL[ChannelNumber].CCR,14);
 8000910:	4964      	ldr	r1, [pc, #400]	; (8000aa4 <DMA_voidChannelInit+0x404>)
 8000912:	79fa      	ldrb	r2, [r7, #7]
 8000914:	4613      	mov	r3, r2
 8000916:	009b      	lsls	r3, r3, #2
 8000918:	4413      	add	r3, r2
 800091a:	009b      	lsls	r3, r3, #2
 800091c:	440b      	add	r3, r1
 800091e:	3308      	adds	r3, #8
 8000920:	681b      	ldr	r3, [r3, #0]
 8000922:	4860      	ldr	r0, [pc, #384]	; (8000aa4 <DMA_voidChannelInit+0x404>)
 8000924:	79fa      	ldrb	r2, [r7, #7]
 8000926:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 800092a:	4613      	mov	r3, r2
 800092c:	009b      	lsls	r3, r3, #2
 800092e:	4413      	add	r3, r2
 8000930:	009b      	lsls	r3, r3, #2
 8000932:	4403      	add	r3, r0
 8000934:	3308      	adds	r3, #8
 8000936:	6019      	str	r1, [r3, #0]
			 CLEAR_BIT(DMA->CHANNEL[ChannelNumber].CCR,4);
 8000938:	495a      	ldr	r1, [pc, #360]	; (8000aa4 <DMA_voidChannelInit+0x404>)
 800093a:	79fa      	ldrb	r2, [r7, #7]
 800093c:	4613      	mov	r3, r2
 800093e:	009b      	lsls	r3, r3, #2
 8000940:	4413      	add	r3, r2
 8000942:	009b      	lsls	r3, r3, #2
 8000944:	440b      	add	r3, r1
 8000946:	3308      	adds	r3, #8
 8000948:	681b      	ldr	r3, [r3, #0]
 800094a:	4856      	ldr	r0, [pc, #344]	; (8000aa4 <DMA_voidChannelInit+0x404>)
 800094c:	79fa      	ldrb	r2, [r7, #7]
 800094e:	f023 0110 	bic.w	r1, r3, #16
 8000952:	4613      	mov	r3, r2
 8000954:	009b      	lsls	r3, r3, #2
 8000956:	4413      	add	r3, r2
 8000958:	009b      	lsls	r3, r3, #2
 800095a:	4403      	add	r3, r0
 800095c:	3308      	adds	r3, #8
 800095e:	6019      	str	r1, [r3, #0]
				DMA->CHANNEL[ChannelNumber].CCR|=(source_IncrementMode<<7); // suppose Peripheral is source
 8000960:	4950      	ldr	r1, [pc, #320]	; (8000aa4 <DMA_voidChannelInit+0x404>)
 8000962:	79fa      	ldrb	r2, [r7, #7]
 8000964:	4613      	mov	r3, r2
 8000966:	009b      	lsls	r3, r3, #2
 8000968:	4413      	add	r3, r2
 800096a:	009b      	lsls	r3, r3, #2
 800096c:	440b      	add	r3, r1
 800096e:	3308      	adds	r3, #8
 8000970:	681b      	ldr	r3, [r3, #0]
 8000972:	7d3a      	ldrb	r2, [r7, #20]
 8000974:	01d2      	lsls	r2, r2, #7
 8000976:	4611      	mov	r1, r2
 8000978:	484a      	ldr	r0, [pc, #296]	; (8000aa4 <DMA_voidChannelInit+0x404>)
 800097a:	79fa      	ldrb	r2, [r7, #7]
 800097c:	4319      	orrs	r1, r3
 800097e:	4613      	mov	r3, r2
 8000980:	009b      	lsls	r3, r3, #2
 8000982:	4413      	add	r3, r2
 8000984:	009b      	lsls	r3, r3, #2
 8000986:	4403      	add	r3, r0
 8000988:	3308      	adds	r3, #8
 800098a:	6019      	str	r1, [r3, #0]
				DMA->CHANNEL[ChannelNumber].CCR|=(Dist_IncrementMode<<6);	// suppose memory is destination
 800098c:	4945      	ldr	r1, [pc, #276]	; (8000aa4 <DMA_voidChannelInit+0x404>)
 800098e:	79fa      	ldrb	r2, [r7, #7]
 8000990:	4613      	mov	r3, r2
 8000992:	009b      	lsls	r3, r3, #2
 8000994:	4413      	add	r3, r2
 8000996:	009b      	lsls	r3, r3, #2
 8000998:	440b      	add	r3, r1
 800099a:	3308      	adds	r3, #8
 800099c:	681b      	ldr	r3, [r3, #0]
 800099e:	7e3a      	ldrb	r2, [r7, #24]
 80009a0:	0192      	lsls	r2, r2, #6
 80009a2:	4611      	mov	r1, r2
 80009a4:	483f      	ldr	r0, [pc, #252]	; (8000aa4 <DMA_voidChannelInit+0x404>)
 80009a6:	79fa      	ldrb	r2, [r7, #7]
 80009a8:	4319      	orrs	r1, r3
 80009aa:	4613      	mov	r3, r2
 80009ac:	009b      	lsls	r3, r3, #2
 80009ae:	4413      	add	r3, r2
 80009b0:	009b      	lsls	r3, r3, #2
 80009b2:	4403      	add	r3, r0
 80009b4:	3308      	adds	r3, #8
 80009b6:	6019      	str	r1, [r3, #0]
			 break;
 80009b8:	bf00      	nop
		}
		DMA->CHANNEL[ChannelNumber].CCR|=(ChannelPriority<<12);
 80009ba:	493a      	ldr	r1, [pc, #232]	; (8000aa4 <DMA_voidChannelInit+0x404>)
 80009bc:	79fa      	ldrb	r2, [r7, #7]
 80009be:	4613      	mov	r3, r2
 80009c0:	009b      	lsls	r3, r3, #2
 80009c2:	4413      	add	r3, r2
 80009c4:	009b      	lsls	r3, r3, #2
 80009c6:	440b      	add	r3, r1
 80009c8:	3308      	adds	r3, #8
 80009ca:	681b      	ldr	r3, [r3, #0]
 80009cc:	79ba      	ldrb	r2, [r7, #6]
 80009ce:	0312      	lsls	r2, r2, #12
 80009d0:	4611      	mov	r1, r2
 80009d2:	4834      	ldr	r0, [pc, #208]	; (8000aa4 <DMA_voidChannelInit+0x404>)
 80009d4:	79fa      	ldrb	r2, [r7, #7]
 80009d6:	4319      	orrs	r1, r3
 80009d8:	4613      	mov	r3, r2
 80009da:	009b      	lsls	r3, r3, #2
 80009dc:	4413      	add	r3, r2
 80009de:	009b      	lsls	r3, r3, #2
 80009e0:	4403      	add	r3, r0
 80009e2:	3308      	adds	r3, #8
 80009e4:	6019      	str	r1, [r3, #0]
		DMA->CHANNEL[ChannelNumber].CCR|=(Per_DataSize<<8);
 80009e6:	492f      	ldr	r1, [pc, #188]	; (8000aa4 <DMA_voidChannelInit+0x404>)
 80009e8:	79fa      	ldrb	r2, [r7, #7]
 80009ea:	4613      	mov	r3, r2
 80009ec:	009b      	lsls	r3, r3, #2
 80009ee:	4413      	add	r3, r2
 80009f0:	009b      	lsls	r3, r3, #2
 80009f2:	440b      	add	r3, r1
 80009f4:	3308      	adds	r3, #8
 80009f6:	681b      	ldr	r3, [r3, #0]
 80009f8:	793a      	ldrb	r2, [r7, #4]
 80009fa:	0212      	lsls	r2, r2, #8
 80009fc:	4611      	mov	r1, r2
 80009fe:	4829      	ldr	r0, [pc, #164]	; (8000aa4 <DMA_voidChannelInit+0x404>)
 8000a00:	79fa      	ldrb	r2, [r7, #7]
 8000a02:	4319      	orrs	r1, r3
 8000a04:	4613      	mov	r3, r2
 8000a06:	009b      	lsls	r3, r3, #2
 8000a08:	4413      	add	r3, r2
 8000a0a:	009b      	lsls	r3, r3, #2
 8000a0c:	4403      	add	r3, r0
 8000a0e:	3308      	adds	r3, #8
 8000a10:	6019      	str	r1, [r3, #0]
		DMA->CHANNEL[ChannelNumber].CCR|=(Mem_DataSize<<10);
 8000a12:	4924      	ldr	r1, [pc, #144]	; (8000aa4 <DMA_voidChannelInit+0x404>)
 8000a14:	79fa      	ldrb	r2, [r7, #7]
 8000a16:	4613      	mov	r3, r2
 8000a18:	009b      	lsls	r3, r3, #2
 8000a1a:	4413      	add	r3, r2
 8000a1c:	009b      	lsls	r3, r3, #2
 8000a1e:	440b      	add	r3, r1
 8000a20:	3308      	adds	r3, #8
 8000a22:	681b      	ldr	r3, [r3, #0]
 8000a24:	797a      	ldrb	r2, [r7, #5]
 8000a26:	0292      	lsls	r2, r2, #10
 8000a28:	4611      	mov	r1, r2
 8000a2a:	481e      	ldr	r0, [pc, #120]	; (8000aa4 <DMA_voidChannelInit+0x404>)
 8000a2c:	79fa      	ldrb	r2, [r7, #7]
 8000a2e:	4319      	orrs	r1, r3
 8000a30:	4613      	mov	r3, r2
 8000a32:	009b      	lsls	r3, r3, #2
 8000a34:	4413      	add	r3, r2
 8000a36:	009b      	lsls	r3, r3, #2
 8000a38:	4403      	add	r3, r0
 8000a3a:	3308      	adds	r3, #8
 8000a3c:	6019      	str	r1, [r3, #0]
		DMA->CHANNEL[ChannelNumber].CCR|=(cicular_mode<<5);
 8000a3e:	4919      	ldr	r1, [pc, #100]	; (8000aa4 <DMA_voidChannelInit+0x404>)
 8000a40:	79fa      	ldrb	r2, [r7, #7]
 8000a42:	4613      	mov	r3, r2
 8000a44:	009b      	lsls	r3, r3, #2
 8000a46:	4413      	add	r3, r2
 8000a48:	009b      	lsls	r3, r3, #2
 8000a4a:	440b      	add	r3, r1
 8000a4c:	3308      	adds	r3, #8
 8000a4e:	681b      	ldr	r3, [r3, #0]
 8000a50:	f897 2020 	ldrb.w	r2, [r7, #32]
 8000a54:	0152      	lsls	r2, r2, #5
 8000a56:	4611      	mov	r1, r2
 8000a58:	4812      	ldr	r0, [pc, #72]	; (8000aa4 <DMA_voidChannelInit+0x404>)
 8000a5a:	79fa      	ldrb	r2, [r7, #7]
 8000a5c:	4319      	orrs	r1, r3
 8000a5e:	4613      	mov	r3, r2
 8000a60:	009b      	lsls	r3, r3, #2
 8000a62:	4413      	add	r3, r2
 8000a64:	009b      	lsls	r3, r3, #2
 8000a66:	4403      	add	r3, r0
 8000a68:	3308      	adds	r3, #8
 8000a6a:	6019      	str	r1, [r3, #0]
		DMA->CHANNEL[ChannelNumber].CCR|=(EnableTCInt<<1);
 8000a6c:	490d      	ldr	r1, [pc, #52]	; (8000aa4 <DMA_voidChannelInit+0x404>)
 8000a6e:	79fa      	ldrb	r2, [r7, #7]
 8000a70:	4613      	mov	r3, r2
 8000a72:	009b      	lsls	r3, r3, #2
 8000a74:	4413      	add	r3, r2
 8000a76:	009b      	lsls	r3, r3, #2
 8000a78:	440b      	add	r3, r1
 8000a7a:	3308      	adds	r3, #8
 8000a7c:	681b      	ldr	r3, [r3, #0]
 8000a7e:	7f3a      	ldrb	r2, [r7, #28]
 8000a80:	0052      	lsls	r2, r2, #1
 8000a82:	4611      	mov	r1, r2
 8000a84:	4807      	ldr	r0, [pc, #28]	; (8000aa4 <DMA_voidChannelInit+0x404>)
 8000a86:	79fa      	ldrb	r2, [r7, #7]
 8000a88:	4319      	orrs	r1, r3
 8000a8a:	4613      	mov	r3, r2
 8000a8c:	009b      	lsls	r3, r3, #2
 8000a8e:	4413      	add	r3, r2
 8000a90:	009b      	lsls	r3, r3, #2
 8000a92:	4403      	add	r3, r0
 8000a94:	3308      	adds	r3, #8
 8000a96:	6019      	str	r1, [r3, #0]
}
 8000a98:	bf00      	nop
 8000a9a:	3708      	adds	r7, #8
 8000a9c:	46bd      	mov	sp, r7
 8000a9e:	bc90      	pop	{r4, r7}
 8000aa0:	4770      	bx	lr
 8000aa2:	bf00      	nop
 8000aa4:	40020000 	.word	0x40020000

08000aa8 <DMA_void_DMA_Enable>:


void DMA_void_DMA_Enable( DMA_CHANNEL_t ChannelNumber ){
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	b082      	sub	sp, #8
 8000aac:	af00      	add	r7, sp, #0
 8000aae:	4603      	mov	r3, r0
 8000ab0:	71fb      	strb	r3, [r7, #7]
	DMA_voidClearFlag( ChannelNumber , DMA_GIF  );
 8000ab2:	79fb      	ldrb	r3, [r7, #7]
 8000ab4:	2100      	movs	r1, #0
 8000ab6:	4618      	mov	r0, r3
 8000ab8:	f000 f8b6 	bl	8000c28 <DMA_voidClearFlag>
	DMA_voidClearFlag( ChannelNumber , DMA_TCIF );
 8000abc:	79fb      	ldrb	r3, [r7, #7]
 8000abe:	2101      	movs	r1, #1
 8000ac0:	4618      	mov	r0, r3
 8000ac2:	f000 f8b1 	bl	8000c28 <DMA_voidClearFlag>
	DMA_voidClearFlag( ChannelNumber , DMA_HTIF );
 8000ac6:	79fb      	ldrb	r3, [r7, #7]
 8000ac8:	2102      	movs	r1, #2
 8000aca:	4618      	mov	r0, r3
 8000acc:	f000 f8ac 	bl	8000c28 <DMA_voidClearFlag>
	DMA_voidClearFlag( ChannelNumber , DMA_TEIF );
 8000ad0:	79fb      	ldrb	r3, [r7, #7]
 8000ad2:	2103      	movs	r1, #3
 8000ad4:	4618      	mov	r0, r3
 8000ad6:	f000 f8a7 	bl	8000c28 <DMA_voidClearFlag>
	SET_BIT(DMA->CHANNEL[ChannelNumber].CCR, 0);
 8000ada:	490c      	ldr	r1, [pc, #48]	; (8000b0c <DMA_void_DMA_Enable+0x64>)
 8000adc:	79fa      	ldrb	r2, [r7, #7]
 8000ade:	4613      	mov	r3, r2
 8000ae0:	009b      	lsls	r3, r3, #2
 8000ae2:	4413      	add	r3, r2
 8000ae4:	009b      	lsls	r3, r3, #2
 8000ae6:	440b      	add	r3, r1
 8000ae8:	3308      	adds	r3, #8
 8000aea:	681b      	ldr	r3, [r3, #0]
 8000aec:	4807      	ldr	r0, [pc, #28]	; (8000b0c <DMA_void_DMA_Enable+0x64>)
 8000aee:	79fa      	ldrb	r2, [r7, #7]
 8000af0:	f043 0101 	orr.w	r1, r3, #1
 8000af4:	4613      	mov	r3, r2
 8000af6:	009b      	lsls	r3, r3, #2
 8000af8:	4413      	add	r3, r2
 8000afa:	009b      	lsls	r3, r3, #2
 8000afc:	4403      	add	r3, r0
 8000afe:	3308      	adds	r3, #8
 8000b00:	6019      	str	r1, [r3, #0]
}
 8000b02:	bf00      	nop
 8000b04:	3708      	adds	r7, #8
 8000b06:	46bd      	mov	sp, r7
 8000b08:	bd80      	pop	{r7, pc}
 8000b0a:	bf00      	nop
 8000b0c:	40020000 	.word	0x40020000

08000b10 <DMA_void_DMA_Disable>:

void DMA_void_DMA_Disable( DMA_CHANNEL_t ChannelNumber ){
 8000b10:	b480      	push	{r7}
 8000b12:	b083      	sub	sp, #12
 8000b14:	af00      	add	r7, sp, #0
 8000b16:	4603      	mov	r3, r0
 8000b18:	71fb      	strb	r3, [r7, #7]

	CLEAR_BIT(DMA->CHANNEL[ChannelNumber].CCR, 0);
 8000b1a:	4914      	ldr	r1, [pc, #80]	; (8000b6c <DMA_void_DMA_Disable+0x5c>)
 8000b1c:	79fa      	ldrb	r2, [r7, #7]
 8000b1e:	4613      	mov	r3, r2
 8000b20:	009b      	lsls	r3, r3, #2
 8000b22:	4413      	add	r3, r2
 8000b24:	009b      	lsls	r3, r3, #2
 8000b26:	440b      	add	r3, r1
 8000b28:	3308      	adds	r3, #8
 8000b2a:	681b      	ldr	r3, [r3, #0]
 8000b2c:	480f      	ldr	r0, [pc, #60]	; (8000b6c <DMA_void_DMA_Disable+0x5c>)
 8000b2e:	79fa      	ldrb	r2, [r7, #7]
 8000b30:	f023 0101 	bic.w	r1, r3, #1
 8000b34:	4613      	mov	r3, r2
 8000b36:	009b      	lsls	r3, r3, #2
 8000b38:	4413      	add	r3, r2
 8000b3a:	009b      	lsls	r3, r3, #2
 8000b3c:	4403      	add	r3, r0
 8000b3e:	3308      	adds	r3, #8
 8000b40:	6019      	str	r1, [r3, #0]
	while(GET_BIT(DMA->CHANNEL[ChannelNumber].CCR,0));
 8000b42:	bf00      	nop
 8000b44:	4909      	ldr	r1, [pc, #36]	; (8000b6c <DMA_void_DMA_Disable+0x5c>)
 8000b46:	79fa      	ldrb	r2, [r7, #7]
 8000b48:	4613      	mov	r3, r2
 8000b4a:	009b      	lsls	r3, r3, #2
 8000b4c:	4413      	add	r3, r2
 8000b4e:	009b      	lsls	r3, r3, #2
 8000b50:	440b      	add	r3, r1
 8000b52:	3308      	adds	r3, #8
 8000b54:	681b      	ldr	r3, [r3, #0]
 8000b56:	f003 0301 	and.w	r3, r3, #1
 8000b5a:	2b00      	cmp	r3, #0
 8000b5c:	d1f2      	bne.n	8000b44 <DMA_void_DMA_Disable+0x34>
}
 8000b5e:	bf00      	nop
 8000b60:	bf00      	nop
 8000b62:	370c      	adds	r7, #12
 8000b64:	46bd      	mov	sp, r7
 8000b66:	bc80      	pop	{r7}
 8000b68:	4770      	bx	lr
 8000b6a:	bf00      	nop
 8000b6c:	40020000 	.word	0x40020000

08000b70 <DMA_ChannelTransfer>:

void DMA_CheckIfErrorOccurred	(DMA_CHANNEL_t ChannelNumber, u8 * Copy_Pu8ErrorState){

	* Copy_Pu8ErrorState=GET_BIT(DMA->ISR,( (ChannelNumber*4)+3) );
}
void DMA_ChannelTransfer(DMA_CHANNEL_t ChannelNumber, u32 Copy_u32MemAddress, u32 Copy_u32PerAddress, u16 Data_Transfer_length){
 8000b70:	b580      	push	{r7, lr}
 8000b72:	b084      	sub	sp, #16
 8000b74:	af00      	add	r7, sp, #0
 8000b76:	60b9      	str	r1, [r7, #8]
 8000b78:	607a      	str	r2, [r7, #4]
 8000b7a:	461a      	mov	r2, r3
 8000b7c:	4603      	mov	r3, r0
 8000b7e:	73fb      	strb	r3, [r7, #15]
 8000b80:	4613      	mov	r3, r2
 8000b82:	81bb      	strh	r3, [r7, #12]

	DMA_void_DMA_Disable(ChannelNumber);
 8000b84:	7bfb      	ldrb	r3, [r7, #15]
 8000b86:	4618      	mov	r0, r3
 8000b88:	f7ff ffc2 	bl	8000b10 <DMA_void_DMA_Disable>
	if(Copy_u32PerAddress <10){
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	2b09      	cmp	r3, #9
 8000b90:	d80d      	bhi.n	8000bae <DMA_ChannelTransfer+0x3e>

		DMA->CHANNEL[ChannelNumber].CPAR=DMA_COMMUNACTION_PER_ADD[Copy_u32PerAddress];
 8000b92:	4823      	ldr	r0, [pc, #140]	; (8000c20 <DMA_ChannelTransfer+0xb0>)
 8000b94:	7bfa      	ldrb	r2, [r7, #15]
 8000b96:	4923      	ldr	r1, [pc, #140]	; (8000c24 <DMA_ChannelTransfer+0xb4>)
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8000b9e:	4613      	mov	r3, r2
 8000ba0:	009b      	lsls	r3, r3, #2
 8000ba2:	4413      	add	r3, r2
 8000ba4:	009b      	lsls	r3, r3, #2
 8000ba6:	4403      	add	r3, r0
 8000ba8:	3310      	adds	r3, #16
 8000baa:	6019      	str	r1, [r3, #0]
 8000bac:	e00c      	b.n	8000bc8 <DMA_ChannelTransfer+0x58>
	}
	else if(Copy_u32PerAddress >9){
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	2b09      	cmp	r3, #9
 8000bb2:	d909      	bls.n	8000bc8 <DMA_ChannelTransfer+0x58>

		DMA->CHANNEL[ChannelNumber].CPAR=Copy_u32PerAddress;
 8000bb4:	491a      	ldr	r1, [pc, #104]	; (8000c20 <DMA_ChannelTransfer+0xb0>)
 8000bb6:	7bfa      	ldrb	r2, [r7, #15]
 8000bb8:	4613      	mov	r3, r2
 8000bba:	009b      	lsls	r3, r3, #2
 8000bbc:	4413      	add	r3, r2
 8000bbe:	009b      	lsls	r3, r3, #2
 8000bc0:	440b      	add	r3, r1
 8000bc2:	3310      	adds	r3, #16
 8000bc4:	687a      	ldr	r2, [r7, #4]
 8000bc6:	601a      	str	r2, [r3, #0]
	}
	if(Copy_u32MemAddress<10){
 8000bc8:	68bb      	ldr	r3, [r7, #8]
 8000bca:	2b09      	cmp	r3, #9
 8000bcc:	d80d      	bhi.n	8000bea <DMA_ChannelTransfer+0x7a>

		DMA->CHANNEL[ChannelNumber].CMAR=DMA_COMMUNACTION_PER_ADD[Copy_u32MemAddress];
 8000bce:	4814      	ldr	r0, [pc, #80]	; (8000c20 <DMA_ChannelTransfer+0xb0>)
 8000bd0:	7bfa      	ldrb	r2, [r7, #15]
 8000bd2:	4914      	ldr	r1, [pc, #80]	; (8000c24 <DMA_ChannelTransfer+0xb4>)
 8000bd4:	68bb      	ldr	r3, [r7, #8]
 8000bd6:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8000bda:	4613      	mov	r3, r2
 8000bdc:	009b      	lsls	r3, r3, #2
 8000bde:	4413      	add	r3, r2
 8000be0:	009b      	lsls	r3, r3, #2
 8000be2:	4403      	add	r3, r0
 8000be4:	3314      	adds	r3, #20
 8000be6:	6019      	str	r1, [r3, #0]
 8000be8:	e00c      	b.n	8000c04 <DMA_ChannelTransfer+0x94>
	}
	else if(Copy_u32MemAddress>9){
 8000bea:	68bb      	ldr	r3, [r7, #8]
 8000bec:	2b09      	cmp	r3, #9
 8000bee:	d909      	bls.n	8000c04 <DMA_ChannelTransfer+0x94>

		DMA->CHANNEL[ChannelNumber].CMAR=Copy_u32MemAddress;
 8000bf0:	490b      	ldr	r1, [pc, #44]	; (8000c20 <DMA_ChannelTransfer+0xb0>)
 8000bf2:	7bfa      	ldrb	r2, [r7, #15]
 8000bf4:	4613      	mov	r3, r2
 8000bf6:	009b      	lsls	r3, r3, #2
 8000bf8:	4413      	add	r3, r2
 8000bfa:	009b      	lsls	r3, r3, #2
 8000bfc:	440b      	add	r3, r1
 8000bfe:	3314      	adds	r3, #20
 8000c00:	68ba      	ldr	r2, [r7, #8]
 8000c02:	601a      	str	r2, [r3, #0]
	}

	DMA->CHANNEL[ChannelNumber].CNDTR=Data_Transfer_length;
 8000c04:	4806      	ldr	r0, [pc, #24]	; (8000c20 <DMA_ChannelTransfer+0xb0>)
 8000c06:	7bfa      	ldrb	r2, [r7, #15]
 8000c08:	89b9      	ldrh	r1, [r7, #12]
 8000c0a:	4613      	mov	r3, r2
 8000c0c:	009b      	lsls	r3, r3, #2
 8000c0e:	4413      	add	r3, r2
 8000c10:	009b      	lsls	r3, r3, #2
 8000c12:	4403      	add	r3, r0
 8000c14:	330c      	adds	r3, #12
 8000c16:	6019      	str	r1, [r3, #0]
}
 8000c18:	bf00      	nop
 8000c1a:	3710      	adds	r7, #16
 8000c1c:	46bd      	mov	sp, r7
 8000c1e:	bd80      	pop	{r7, pc}
 8000c20:	40020000 	.word	0x40020000
 8000c24:	20000000 	.word	0x20000000

08000c28 <DMA_voidClearFlag>:
void DMA_SetCallBack(DMA_CHANNEL_t ChannelNumber, void(*Copy_pfCallback)(void)){

	Setcallbaks_Ptr[ChannelNumber]=Copy_pfCallback;
}

static void DMA_voidClearFlag( DMA_CHANNEL_t ChannelNumber , u8 Copy_u8Flag ){
 8000c28:	b480      	push	{r7}
 8000c2a:	b083      	sub	sp, #12
 8000c2c:	af00      	add	r7, sp, #0
 8000c2e:	4603      	mov	r3, r0
 8000c30:	460a      	mov	r2, r1
 8000c32:	71fb      	strb	r3, [r7, #7]
 8000c34:	4613      	mov	r3, r2
 8000c36:	71bb      	strb	r3, [r7, #6]

	ChannelNumber *= 4 ;
 8000c38:	79fb      	ldrb	r3, [r7, #7]
 8000c3a:	009b      	lsls	r3, r3, #2
 8000c3c:	71fb      	strb	r3, [r7, #7]

	SET_BIT( DMA->IFCR , (ChannelNumber + Copy_u8Flag) );
 8000c3e:	4b08      	ldr	r3, [pc, #32]	; (8000c60 <DMA_voidClearFlag+0x38>)
 8000c40:	685b      	ldr	r3, [r3, #4]
 8000c42:	79f9      	ldrb	r1, [r7, #7]
 8000c44:	79ba      	ldrb	r2, [r7, #6]
 8000c46:	440a      	add	r2, r1
 8000c48:	2101      	movs	r1, #1
 8000c4a:	fa01 f202 	lsl.w	r2, r1, r2
 8000c4e:	4611      	mov	r1, r2
 8000c50:	4a03      	ldr	r2, [pc, #12]	; (8000c60 <DMA_voidClearFlag+0x38>)
 8000c52:	430b      	orrs	r3, r1
 8000c54:	6053      	str	r3, [r2, #4]

}
 8000c56:	bf00      	nop
 8000c58:	370c      	adds	r7, #12
 8000c5a:	46bd      	mov	sp, r7
 8000c5c:	bc80      	pop	{r7}
 8000c5e:	4770      	bx	lr
 8000c60:	40020000 	.word	0x40020000

08000c64 <DMA1_Channel1_IRQHandler>:
/* DMA1 Channel1 global interrupt                   */
void	DMA1_Channel1_IRQHandler  (void){
 8000c64:	b580      	push	{r7, lr}
 8000c66:	af00      	add	r7, sp, #0
	if(Setcallbaks_Ptr[0]!=NULL){
 8000c68:	4b04      	ldr	r3, [pc, #16]	; (8000c7c <DMA1_Channel1_IRQHandler+0x18>)
 8000c6a:	681b      	ldr	r3, [r3, #0]
 8000c6c:	2b00      	cmp	r3, #0
 8000c6e:	d002      	beq.n	8000c76 <DMA1_Channel1_IRQHandler+0x12>
		Setcallbaks_Ptr[0]();
 8000c70:	4b02      	ldr	r3, [pc, #8]	; (8000c7c <DMA1_Channel1_IRQHandler+0x18>)
 8000c72:	681b      	ldr	r3, [r3, #0]
 8000c74:	4798      	blx	r3
	}
}
 8000c76:	bf00      	nop
 8000c78:	bd80      	pop	{r7, pc}
 8000c7a:	bf00      	nop
 8000c7c:	200000b8 	.word	0x200000b8

08000c80 <DMA1_Channel2_IRQHandler>:


/* DMA1 Channel2 global interrupt                   */
void	DMA1_Channel2_IRQHandler  (void){
 8000c80:	b580      	push	{r7, lr}
 8000c82:	af00      	add	r7, sp, #0
	if(Setcallbaks_Ptr[1]!=NULL){
 8000c84:	4b04      	ldr	r3, [pc, #16]	; (8000c98 <DMA1_Channel2_IRQHandler+0x18>)
 8000c86:	685b      	ldr	r3, [r3, #4]
 8000c88:	2b00      	cmp	r3, #0
 8000c8a:	d002      	beq.n	8000c92 <DMA1_Channel2_IRQHandler+0x12>
		Setcallbaks_Ptr[1]();
 8000c8c:	4b02      	ldr	r3, [pc, #8]	; (8000c98 <DMA1_Channel2_IRQHandler+0x18>)
 8000c8e:	685b      	ldr	r3, [r3, #4]
 8000c90:	4798      	blx	r3
	}
}
 8000c92:	bf00      	nop
 8000c94:	bd80      	pop	{r7, pc}
 8000c96:	bf00      	nop
 8000c98:	200000b8 	.word	0x200000b8

08000c9c <DMA1_Channel3_IRQHandler>:



/* DMA1 Channel3 global interrupt                   */
void	DMA1_Channel3_IRQHandler  (void){
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	af00      	add	r7, sp, #0
	if(Setcallbaks_Ptr[2]!=NULL){
 8000ca0:	4b04      	ldr	r3, [pc, #16]	; (8000cb4 <DMA1_Channel3_IRQHandler+0x18>)
 8000ca2:	689b      	ldr	r3, [r3, #8]
 8000ca4:	2b00      	cmp	r3, #0
 8000ca6:	d002      	beq.n	8000cae <DMA1_Channel3_IRQHandler+0x12>
		Setcallbaks_Ptr[2]();
 8000ca8:	4b02      	ldr	r3, [pc, #8]	; (8000cb4 <DMA1_Channel3_IRQHandler+0x18>)
 8000caa:	689b      	ldr	r3, [r3, #8]
 8000cac:	4798      	blx	r3
	}
}
 8000cae:	bf00      	nop
 8000cb0:	bd80      	pop	{r7, pc}
 8000cb2:	bf00      	nop
 8000cb4:	200000b8 	.word	0x200000b8

08000cb8 <DMA1_Channel4_IRQHandler>:


/* DMA1 Channel4 global interrupt                   */
void	DMA1_Channel4_IRQHandler  (void){
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	af00      	add	r7, sp, #0
	if(Setcallbaks_Ptr[3]!=NULL){
 8000cbc:	4b04      	ldr	r3, [pc, #16]	; (8000cd0 <DMA1_Channel4_IRQHandler+0x18>)
 8000cbe:	68db      	ldr	r3, [r3, #12]
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	d002      	beq.n	8000cca <DMA1_Channel4_IRQHandler+0x12>
		Setcallbaks_Ptr[3]();
 8000cc4:	4b02      	ldr	r3, [pc, #8]	; (8000cd0 <DMA1_Channel4_IRQHandler+0x18>)
 8000cc6:	68db      	ldr	r3, [r3, #12]
 8000cc8:	4798      	blx	r3
	}
}
 8000cca:	bf00      	nop
 8000ccc:	bd80      	pop	{r7, pc}
 8000cce:	bf00      	nop
 8000cd0:	200000b8 	.word	0x200000b8

08000cd4 <DMA1_Channel5_IRQHandler>:

/* DMA1 Channel5 global interrupt                   */
void	DMA1_Channel5_IRQHandler  (void){
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	af00      	add	r7, sp, #0
	if(Setcallbaks_Ptr[4]!=NULL){
 8000cd8:	4b04      	ldr	r3, [pc, #16]	; (8000cec <DMA1_Channel5_IRQHandler+0x18>)
 8000cda:	691b      	ldr	r3, [r3, #16]
 8000cdc:	2b00      	cmp	r3, #0
 8000cde:	d002      	beq.n	8000ce6 <DMA1_Channel5_IRQHandler+0x12>
		Setcallbaks_Ptr[4]();
 8000ce0:	4b02      	ldr	r3, [pc, #8]	; (8000cec <DMA1_Channel5_IRQHandler+0x18>)
 8000ce2:	691b      	ldr	r3, [r3, #16]
 8000ce4:	4798      	blx	r3
	}
}
 8000ce6:	bf00      	nop
 8000ce8:	bd80      	pop	{r7, pc}
 8000cea:	bf00      	nop
 8000cec:	200000b8 	.word	0x200000b8

08000cf0 <DMA1_Channel6_IRQHandler>:


/* DMA1 Channel6 global interrupt                   */
void	DMA1_Channel6_IRQHandler  (void){
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	af00      	add	r7, sp, #0
	if(Setcallbaks_Ptr[5]!=NULL){
 8000cf4:	4b04      	ldr	r3, [pc, #16]	; (8000d08 <DMA1_Channel6_IRQHandler+0x18>)
 8000cf6:	695b      	ldr	r3, [r3, #20]
 8000cf8:	2b00      	cmp	r3, #0
 8000cfa:	d002      	beq.n	8000d02 <DMA1_Channel6_IRQHandler+0x12>
		Setcallbaks_Ptr[5]();
 8000cfc:	4b02      	ldr	r3, [pc, #8]	; (8000d08 <DMA1_Channel6_IRQHandler+0x18>)
 8000cfe:	695b      	ldr	r3, [r3, #20]
 8000d00:	4798      	blx	r3
	}
}
 8000d02:	bf00      	nop
 8000d04:	bd80      	pop	{r7, pc}
 8000d06:	bf00      	nop
 8000d08:	200000b8 	.word	0x200000b8

08000d0c <DMA1_Channel7_IRQHandler>:


/* DMA1 Channel7 global interrupt                   */
void	DMA1_Channel7_IRQHandler  (void){
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	af00      	add	r7, sp, #0
	if(Setcallbaks_Ptr[6]!=NULL){
 8000d10:	4b04      	ldr	r3, [pc, #16]	; (8000d24 <DMA1_Channel7_IRQHandler+0x18>)
 8000d12:	699b      	ldr	r3, [r3, #24]
 8000d14:	2b00      	cmp	r3, #0
 8000d16:	d002      	beq.n	8000d1e <DMA1_Channel7_IRQHandler+0x12>
		Setcallbaks_Ptr[6]();
 8000d18:	4b02      	ldr	r3, [pc, #8]	; (8000d24 <DMA1_Channel7_IRQHandler+0x18>)
 8000d1a:	699b      	ldr	r3, [r3, #24]
 8000d1c:	4798      	blx	r3
	}
}
 8000d1e:	bf00      	nop
 8000d20:	bd80      	pop	{r7, pc}
 8000d22:	bf00      	nop
 8000d24:	200000b8 	.word	0x200000b8

08000d28 <EXTI_Interrupt_Enable>:

typedef void(*fptr)(void);

static fptr EXTI_CallBacks[16] = {NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,
								  NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL};
void EXTI_Interrupt_Enable(EXTI_ID Copy_u8EXTINumber ,Edge_trriger Edge ){
 8000d28:	b480      	push	{r7}
 8000d2a:	b083      	sub	sp, #12
 8000d2c:	af00      	add	r7, sp, #0
 8000d2e:	4603      	mov	r3, r0
 8000d30:	460a      	mov	r2, r1
 8000d32:	71fb      	strb	r3, [r7, #7]
 8000d34:	4613      	mov	r3, r2
 8000d36:	71bb      	strb	r3, [r7, #6]
	SET_BIT(EXTI->IMR,Copy_u8EXTINumber);
 8000d38:	4b21      	ldr	r3, [pc, #132]	; (8000dc0 <EXTI_Interrupt_Enable+0x98>)
 8000d3a:	681b      	ldr	r3, [r3, #0]
 8000d3c:	79fa      	ldrb	r2, [r7, #7]
 8000d3e:	2101      	movs	r1, #1
 8000d40:	fa01 f202 	lsl.w	r2, r1, r2
 8000d44:	4611      	mov	r1, r2
 8000d46:	4a1e      	ldr	r2, [pc, #120]	; (8000dc0 <EXTI_Interrupt_Enable+0x98>)
 8000d48:	430b      	orrs	r3, r1
 8000d4a:	6013      	str	r3, [r2, #0]
	switch(Edge){
 8000d4c:	79bb      	ldrb	r3, [r7, #6]
 8000d4e:	2b02      	cmp	r3, #2
 8000d50:	d026      	beq.n	8000da0 <EXTI_Interrupt_Enable+0x78>
 8000d52:	2b02      	cmp	r3, #2
 8000d54:	dc2f      	bgt.n	8000db6 <EXTI_Interrupt_Enable+0x8e>
 8000d56:	2b00      	cmp	r3, #0
 8000d58:	d002      	beq.n	8000d60 <EXTI_Interrupt_Enable+0x38>
 8000d5a:	2b01      	cmp	r3, #1
 8000d5c:	d015      	beq.n	8000d8a <EXTI_Interrupt_Enable+0x62>
		break;

		case FALLING_EDGE:  SET_BIT(EXTI->FTSR,Copy_u8EXTINumber); break;
		case RISING_EDGE:   SET_BIT(EXTI->RTSR,Copy_u8EXTINumber);	break;
	}
}
 8000d5e:	e02a      	b.n	8000db6 <EXTI_Interrupt_Enable+0x8e>
			SET_BIT(EXTI->FTSR,Copy_u8EXTINumber);
 8000d60:	4b17      	ldr	r3, [pc, #92]	; (8000dc0 <EXTI_Interrupt_Enable+0x98>)
 8000d62:	68db      	ldr	r3, [r3, #12]
 8000d64:	79fa      	ldrb	r2, [r7, #7]
 8000d66:	2101      	movs	r1, #1
 8000d68:	fa01 f202 	lsl.w	r2, r1, r2
 8000d6c:	4611      	mov	r1, r2
 8000d6e:	4a14      	ldr	r2, [pc, #80]	; (8000dc0 <EXTI_Interrupt_Enable+0x98>)
 8000d70:	430b      	orrs	r3, r1
 8000d72:	60d3      	str	r3, [r2, #12]
			SET_BIT(EXTI->RTSR,Copy_u8EXTINumber);
 8000d74:	4b12      	ldr	r3, [pc, #72]	; (8000dc0 <EXTI_Interrupt_Enable+0x98>)
 8000d76:	689b      	ldr	r3, [r3, #8]
 8000d78:	79fa      	ldrb	r2, [r7, #7]
 8000d7a:	2101      	movs	r1, #1
 8000d7c:	fa01 f202 	lsl.w	r2, r1, r2
 8000d80:	4611      	mov	r1, r2
 8000d82:	4a0f      	ldr	r2, [pc, #60]	; (8000dc0 <EXTI_Interrupt_Enable+0x98>)
 8000d84:	430b      	orrs	r3, r1
 8000d86:	6093      	str	r3, [r2, #8]
		break;
 8000d88:	e015      	b.n	8000db6 <EXTI_Interrupt_Enable+0x8e>
		case FALLING_EDGE:  SET_BIT(EXTI->FTSR,Copy_u8EXTINumber); break;
 8000d8a:	4b0d      	ldr	r3, [pc, #52]	; (8000dc0 <EXTI_Interrupt_Enable+0x98>)
 8000d8c:	68db      	ldr	r3, [r3, #12]
 8000d8e:	79fa      	ldrb	r2, [r7, #7]
 8000d90:	2101      	movs	r1, #1
 8000d92:	fa01 f202 	lsl.w	r2, r1, r2
 8000d96:	4611      	mov	r1, r2
 8000d98:	4a09      	ldr	r2, [pc, #36]	; (8000dc0 <EXTI_Interrupt_Enable+0x98>)
 8000d9a:	430b      	orrs	r3, r1
 8000d9c:	60d3      	str	r3, [r2, #12]
 8000d9e:	e00a      	b.n	8000db6 <EXTI_Interrupt_Enable+0x8e>
		case RISING_EDGE:   SET_BIT(EXTI->RTSR,Copy_u8EXTINumber);	break;
 8000da0:	4b07      	ldr	r3, [pc, #28]	; (8000dc0 <EXTI_Interrupt_Enable+0x98>)
 8000da2:	689b      	ldr	r3, [r3, #8]
 8000da4:	79fa      	ldrb	r2, [r7, #7]
 8000da6:	2101      	movs	r1, #1
 8000da8:	fa01 f202 	lsl.w	r2, r1, r2
 8000dac:	4611      	mov	r1, r2
 8000dae:	4a04      	ldr	r2, [pc, #16]	; (8000dc0 <EXTI_Interrupt_Enable+0x98>)
 8000db0:	430b      	orrs	r3, r1
 8000db2:	6093      	str	r3, [r2, #8]
 8000db4:	bf00      	nop
}
 8000db6:	bf00      	nop
 8000db8:	370c      	adds	r7, #12
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	bc80      	pop	{r7}
 8000dbe:	4770      	bx	lr
 8000dc0:	40010400 	.word	0x40010400

08000dc4 <EXTI_SetCallBack>:
void EXTI_Interrupt_Disable(EXTI_ID Copy_u8EXTINumber  ){
	CLEAR_BIT(EXTI->IMR,Copy_u8EXTINumber);
}

void EXTI_SetCallBack(EXTI_ID Copy_u8EXTINumber , void(*Copy_pfCallback)(void))
{
 8000dc4:	b480      	push	{r7}
 8000dc6:	b083      	sub	sp, #12
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	4603      	mov	r3, r0
 8000dcc:	6039      	str	r1, [r7, #0]
 8000dce:	71fb      	strb	r3, [r7, #7]

	if(Copy_u8EXTINumber <=  EXTI15)
 8000dd0:	79fb      	ldrb	r3, [r7, #7]
 8000dd2:	2b0f      	cmp	r3, #15
 8000dd4:	d804      	bhi.n	8000de0 <EXTI_SetCallBack+0x1c>
	{
		EXTI_CallBacks[Copy_u8EXTINumber] = Copy_pfCallback;
 8000dd6:	79fb      	ldrb	r3, [r7, #7]
 8000dd8:	4904      	ldr	r1, [pc, #16]	; (8000dec <EXTI_SetCallBack+0x28>)
 8000dda:	683a      	ldr	r2, [r7, #0]
 8000ddc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	}
}
 8000de0:	bf00      	nop
 8000de2:	370c      	adds	r7, #12
 8000de4:	46bd      	mov	sp, r7
 8000de6:	bc80      	pop	{r7}
 8000de8:	4770      	bx	lr
 8000dea:	bf00      	nop
 8000dec:	200000d4 	.word	0x200000d4

08000df0 <EXTI0_IRQHandler>:



void EXTI0_IRQHandler(void)
{
 8000df0:	b580      	push	{r7, lr}
 8000df2:	af00      	add	r7, sp, #0
	EXTI->PR = (1 << 0);
 8000df4:	4b05      	ldr	r3, [pc, #20]	; (8000e0c <EXTI0_IRQHandler+0x1c>)
 8000df6:	2201      	movs	r2, #1
 8000df8:	615a      	str	r2, [r3, #20]
	if(EXTI_CallBacks[0] != NULL )
 8000dfa:	4b05      	ldr	r3, [pc, #20]	; (8000e10 <EXTI0_IRQHandler+0x20>)
 8000dfc:	681b      	ldr	r3, [r3, #0]
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	d002      	beq.n	8000e08 <EXTI0_IRQHandler+0x18>
	{
		EXTI_CallBacks[0]();
 8000e02:	4b03      	ldr	r3, [pc, #12]	; (8000e10 <EXTI0_IRQHandler+0x20>)
 8000e04:	681b      	ldr	r3, [r3, #0]
 8000e06:	4798      	blx	r3
	}
}
 8000e08:	bf00      	nop
 8000e0a:	bd80      	pop	{r7, pc}
 8000e0c:	40010400 	.word	0x40010400
 8000e10:	200000d4 	.word	0x200000d4

08000e14 <EXTI1_IRQHandler>:

void EXTI1_IRQHandler(void)
{
 8000e14:	b580      	push	{r7, lr}
 8000e16:	af00      	add	r7, sp, #0
	EXTI->PR = (1 << 1);
 8000e18:	4b05      	ldr	r3, [pc, #20]	; (8000e30 <EXTI1_IRQHandler+0x1c>)
 8000e1a:	2202      	movs	r2, #2
 8000e1c:	615a      	str	r2, [r3, #20]
	if(EXTI_CallBacks[1] != NULL )
 8000e1e:	4b05      	ldr	r3, [pc, #20]	; (8000e34 <EXTI1_IRQHandler+0x20>)
 8000e20:	685b      	ldr	r3, [r3, #4]
 8000e22:	2b00      	cmp	r3, #0
 8000e24:	d002      	beq.n	8000e2c <EXTI1_IRQHandler+0x18>
	{
		EXTI_CallBacks[1]();
 8000e26:	4b03      	ldr	r3, [pc, #12]	; (8000e34 <EXTI1_IRQHandler+0x20>)
 8000e28:	685b      	ldr	r3, [r3, #4]
 8000e2a:	4798      	blx	r3
	}
}
 8000e2c:	bf00      	nop
 8000e2e:	bd80      	pop	{r7, pc}
 8000e30:	40010400 	.word	0x40010400
 8000e34:	200000d4 	.word	0x200000d4

08000e38 <EXTI2_IRQHandler>:

void EXTI2_IRQHandler(void)
{
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	af00      	add	r7, sp, #0
	EXTI->PR = (1 << 2);
 8000e3c:	4b05      	ldr	r3, [pc, #20]	; (8000e54 <EXTI2_IRQHandler+0x1c>)
 8000e3e:	2204      	movs	r2, #4
 8000e40:	615a      	str	r2, [r3, #20]
	if(EXTI_CallBacks[2] != NULL )
 8000e42:	4b05      	ldr	r3, [pc, #20]	; (8000e58 <EXTI2_IRQHandler+0x20>)
 8000e44:	689b      	ldr	r3, [r3, #8]
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	d002      	beq.n	8000e50 <EXTI2_IRQHandler+0x18>
	{
		EXTI_CallBacks[2]();
 8000e4a:	4b03      	ldr	r3, [pc, #12]	; (8000e58 <EXTI2_IRQHandler+0x20>)
 8000e4c:	689b      	ldr	r3, [r3, #8]
 8000e4e:	4798      	blx	r3
	}
}
 8000e50:	bf00      	nop
 8000e52:	bd80      	pop	{r7, pc}
 8000e54:	40010400 	.word	0x40010400
 8000e58:	200000d4 	.word	0x200000d4

08000e5c <EXTI3_IRQHandler>:

void EXTI3_IRQHandler(void)
{
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	af00      	add	r7, sp, #0
	EXTI->PR = (1 << 3);
 8000e60:	4b05      	ldr	r3, [pc, #20]	; (8000e78 <EXTI3_IRQHandler+0x1c>)
 8000e62:	2208      	movs	r2, #8
 8000e64:	615a      	str	r2, [r3, #20]
	if(EXTI_CallBacks[3] != NULL )
 8000e66:	4b05      	ldr	r3, [pc, #20]	; (8000e7c <EXTI3_IRQHandler+0x20>)
 8000e68:	68db      	ldr	r3, [r3, #12]
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	d002      	beq.n	8000e74 <EXTI3_IRQHandler+0x18>
	{
		EXTI_CallBacks[3]();
 8000e6e:	4b03      	ldr	r3, [pc, #12]	; (8000e7c <EXTI3_IRQHandler+0x20>)
 8000e70:	68db      	ldr	r3, [r3, #12]
 8000e72:	4798      	blx	r3
	}
}
 8000e74:	bf00      	nop
 8000e76:	bd80      	pop	{r7, pc}
 8000e78:	40010400 	.word	0x40010400
 8000e7c:	200000d4 	.word	0x200000d4

08000e80 <EXTI4_IRQHandler>:

void EXTI4_IRQHandler(void)
{
 8000e80:	b580      	push	{r7, lr}
 8000e82:	af00      	add	r7, sp, #0
	EXTI->PR = (1 << 4);
 8000e84:	4b05      	ldr	r3, [pc, #20]	; (8000e9c <EXTI4_IRQHandler+0x1c>)
 8000e86:	2210      	movs	r2, #16
 8000e88:	615a      	str	r2, [r3, #20]
	if(EXTI_CallBacks[4] != NULL )
 8000e8a:	4b05      	ldr	r3, [pc, #20]	; (8000ea0 <EXTI4_IRQHandler+0x20>)
 8000e8c:	691b      	ldr	r3, [r3, #16]
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	d002      	beq.n	8000e98 <EXTI4_IRQHandler+0x18>
	{
		EXTI_CallBacks[4]();
 8000e92:	4b03      	ldr	r3, [pc, #12]	; (8000ea0 <EXTI4_IRQHandler+0x20>)
 8000e94:	691b      	ldr	r3, [r3, #16]
 8000e96:	4798      	blx	r3
	}
}
 8000e98:	bf00      	nop
 8000e9a:	bd80      	pop	{r7, pc}
 8000e9c:	40010400 	.word	0x40010400
 8000ea0:	200000d4 	.word	0x200000d4

08000ea4 <EXTI9_5_IRQHandler>:

void EXTI9_5_IRQHandler(void)
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	b082      	sub	sp, #8
 8000ea8:	af00      	add	r7, sp, #0
	for (u8 i = 5 ; i <= 9 ; i++)
 8000eaa:	2305      	movs	r3, #5
 8000eac:	71fb      	strb	r3, [r7, #7]
 8000eae:	e024      	b.n	8000efa <EXTI9_5_IRQHandler+0x56>
	{
		if(GET_BIT(EXTI->PR,i) == 1 && GET_BIT(EXTI->IMR,i) == 1)
 8000eb0:	4b16      	ldr	r3, [pc, #88]	; (8000f0c <EXTI9_5_IRQHandler+0x68>)
 8000eb2:	695a      	ldr	r2, [r3, #20]
 8000eb4:	79fb      	ldrb	r3, [r7, #7]
 8000eb6:	fa22 f303 	lsr.w	r3, r2, r3
 8000eba:	f003 0301 	and.w	r3, r3, #1
 8000ebe:	2b01      	cmp	r3, #1
 8000ec0:	d118      	bne.n	8000ef4 <EXTI9_5_IRQHandler+0x50>
 8000ec2:	4b12      	ldr	r3, [pc, #72]	; (8000f0c <EXTI9_5_IRQHandler+0x68>)
 8000ec4:	681a      	ldr	r2, [r3, #0]
 8000ec6:	79fb      	ldrb	r3, [r7, #7]
 8000ec8:	fa22 f303 	lsr.w	r3, r2, r3
 8000ecc:	f003 0301 	and.w	r3, r3, #1
 8000ed0:	2b01      	cmp	r3, #1
 8000ed2:	d10f      	bne.n	8000ef4 <EXTI9_5_IRQHandler+0x50>
		{
			EXTI->PR = (1 << i);
 8000ed4:	79fb      	ldrb	r3, [r7, #7]
 8000ed6:	2201      	movs	r2, #1
 8000ed8:	409a      	lsls	r2, r3
 8000eda:	4b0c      	ldr	r3, [pc, #48]	; (8000f0c <EXTI9_5_IRQHandler+0x68>)
 8000edc:	615a      	str	r2, [r3, #20]
			if(EXTI_CallBacks[i] != NULL )
 8000ede:	79fb      	ldrb	r3, [r7, #7]
 8000ee0:	4a0b      	ldr	r2, [pc, #44]	; (8000f10 <EXTI9_5_IRQHandler+0x6c>)
 8000ee2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	d004      	beq.n	8000ef4 <EXTI9_5_IRQHandler+0x50>
			{
				EXTI_CallBacks[i]();
 8000eea:	79fb      	ldrb	r3, [r7, #7]
 8000eec:	4a08      	ldr	r2, [pc, #32]	; (8000f10 <EXTI9_5_IRQHandler+0x6c>)
 8000eee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ef2:	4798      	blx	r3
	for (u8 i = 5 ; i <= 9 ; i++)
 8000ef4:	79fb      	ldrb	r3, [r7, #7]
 8000ef6:	3301      	adds	r3, #1
 8000ef8:	71fb      	strb	r3, [r7, #7]
 8000efa:	79fb      	ldrb	r3, [r7, #7]
 8000efc:	2b09      	cmp	r3, #9
 8000efe:	d9d7      	bls.n	8000eb0 <EXTI9_5_IRQHandler+0xc>
			}
		}
	}
}
 8000f00:	bf00      	nop
 8000f02:	bf00      	nop
 8000f04:	3708      	adds	r7, #8
 8000f06:	46bd      	mov	sp, r7
 8000f08:	bd80      	pop	{r7, pc}
 8000f0a:	bf00      	nop
 8000f0c:	40010400 	.word	0x40010400
 8000f10:	200000d4 	.word	0x200000d4

08000f14 <EXTI15_10_IRQHandler>:

void EXTI15_10_IRQHandler(void)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	b082      	sub	sp, #8
 8000f18:	af00      	add	r7, sp, #0
	for (u8 i = 10 ; i <= 15 ; i++)
 8000f1a:	230a      	movs	r3, #10
 8000f1c:	71fb      	strb	r3, [r7, #7]
 8000f1e:	e020      	b.n	8000f62 <EXTI15_10_IRQHandler+0x4e>
	{
		if(GET_BIT(EXTI->PR,i) == 1)
 8000f20:	4b14      	ldr	r3, [pc, #80]	; (8000f74 <EXTI15_10_IRQHandler+0x60>)
 8000f22:	695a      	ldr	r2, [r3, #20]
 8000f24:	79fb      	ldrb	r3, [r7, #7]
 8000f26:	fa22 f303 	lsr.w	r3, r2, r3
 8000f2a:	f003 0301 	and.w	r3, r3, #1
 8000f2e:	2b01      	cmp	r3, #1
 8000f30:	d114      	bne.n	8000f5c <EXTI15_10_IRQHandler+0x48>
		{
			SET_BIT(EXTI->PR,i);
 8000f32:	4b10      	ldr	r3, [pc, #64]	; (8000f74 <EXTI15_10_IRQHandler+0x60>)
 8000f34:	695b      	ldr	r3, [r3, #20]
 8000f36:	79fa      	ldrb	r2, [r7, #7]
 8000f38:	2101      	movs	r1, #1
 8000f3a:	fa01 f202 	lsl.w	r2, r1, r2
 8000f3e:	4611      	mov	r1, r2
 8000f40:	4a0c      	ldr	r2, [pc, #48]	; (8000f74 <EXTI15_10_IRQHandler+0x60>)
 8000f42:	430b      	orrs	r3, r1
 8000f44:	6153      	str	r3, [r2, #20]
			if(EXTI_CallBacks[i] != NULL )
 8000f46:	79fb      	ldrb	r3, [r7, #7]
 8000f48:	4a0b      	ldr	r2, [pc, #44]	; (8000f78 <EXTI15_10_IRQHandler+0x64>)
 8000f4a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	d004      	beq.n	8000f5c <EXTI15_10_IRQHandler+0x48>
			{
				EXTI_CallBacks[i]();
 8000f52:	79fb      	ldrb	r3, [r7, #7]
 8000f54:	4a08      	ldr	r2, [pc, #32]	; (8000f78 <EXTI15_10_IRQHandler+0x64>)
 8000f56:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f5a:	4798      	blx	r3
	for (u8 i = 10 ; i <= 15 ; i++)
 8000f5c:	79fb      	ldrb	r3, [r7, #7]
 8000f5e:	3301      	adds	r3, #1
 8000f60:	71fb      	strb	r3, [r7, #7]
 8000f62:	79fb      	ldrb	r3, [r7, #7]
 8000f64:	2b0f      	cmp	r3, #15
 8000f66:	d9db      	bls.n	8000f20 <EXTI15_10_IRQHandler+0xc>
			}
		}
	}
}
 8000f68:	bf00      	nop
 8000f6a:	bf00      	nop
 8000f6c:	3708      	adds	r7, #8
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	bd80      	pop	{r7, pc}
 8000f72:	bf00      	nop
 8000f74:	40010400 	.word	0x40010400
 8000f78:	200000d4 	.word	0x200000d4

08000f7c <GPIO_Nibble_Write>:
}
void GPIO_LOW_2Nibble_Write(u8 Copy_PortId, u8 Copy_PortValue){
	GPIO_Astr[Copy_PortId]->ODR &=(0xFF00);
	GPIO_Astr[Copy_PortId]->ODR|=Copy_PortValue;
}
void GPIO_Nibble_Write(u8 Copy_PortId, Nibble_ID Copy_NiibleId,  u8 Copy_PortValue){
 8000f7c:	b480      	push	{r7}
 8000f7e:	b083      	sub	sp, #12
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	4603      	mov	r3, r0
 8000f84:	71fb      	strb	r3, [r7, #7]
 8000f86:	460b      	mov	r3, r1
 8000f88:	71bb      	strb	r3, [r7, #6]
 8000f8a:	4613      	mov	r3, r2
 8000f8c:	717b      	strb	r3, [r7, #5]
	GPIO_Astr[Copy_PortId]->ODR &=~(0xF<<Copy_NiibleId);
 8000f8e:	79fb      	ldrb	r3, [r7, #7]
 8000f90:	4a12      	ldr	r2, [pc, #72]	; (8000fdc <GPIO_Nibble_Write+0x60>)
 8000f92:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f96:	68da      	ldr	r2, [r3, #12]
 8000f98:	79bb      	ldrb	r3, [r7, #6]
 8000f9a:	210f      	movs	r1, #15
 8000f9c:	fa01 f303 	lsl.w	r3, r1, r3
 8000fa0:	43db      	mvns	r3, r3
 8000fa2:	4618      	mov	r0, r3
 8000fa4:	79fb      	ldrb	r3, [r7, #7]
 8000fa6:	490d      	ldr	r1, [pc, #52]	; (8000fdc <GPIO_Nibble_Write+0x60>)
 8000fa8:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000fac:	4002      	ands	r2, r0
 8000fae:	60da      	str	r2, [r3, #12]
	GPIO_Astr[Copy_PortId]->ODR|=(Copy_PortValue<<Copy_NiibleId);
 8000fb0:	79fb      	ldrb	r3, [r7, #7]
 8000fb2:	4a0a      	ldr	r2, [pc, #40]	; (8000fdc <GPIO_Nibble_Write+0x60>)
 8000fb4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000fb8:	68da      	ldr	r2, [r3, #12]
 8000fba:	7979      	ldrb	r1, [r7, #5]
 8000fbc:	79bb      	ldrb	r3, [r7, #6]
 8000fbe:	fa01 f303 	lsl.w	r3, r1, r3
 8000fc2:	4618      	mov	r0, r3
 8000fc4:	79fb      	ldrb	r3, [r7, #7]
 8000fc6:	4905      	ldr	r1, [pc, #20]	; (8000fdc <GPIO_Nibble_Write+0x60>)
 8000fc8:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000fcc:	4302      	orrs	r2, r0
 8000fce:	60da      	str	r2, [r3, #12]
}
 8000fd0:	bf00      	nop
 8000fd2:	370c      	adds	r7, #12
 8000fd4:	46bd      	mov	sp, r7
 8000fd6:	bc80      	pop	{r7}
 8000fd8:	4770      	bx	lr
 8000fda:	bf00      	nop
 8000fdc:	20000068 	.word	0x20000068

08000fe0 <GPIO_PORT_voidInit>:

#if NeedPortHere==1
void GPIO_PORT_voidInit(void)
{	u8 port,pin;
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b082      	sub	sp, #8
 8000fe4:	af00      	add	r7, sp, #0
	for(port=GPIO_PORTA; port<=GPIO_PORTC; port++){
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	71fb      	strb	r3, [r7, #7]
 8000fea:	e023      	b.n	8001034 <GPIO_PORT_voidInit+0x54>
		for(pin=GPIO_PIN0; pin<=GPIO_PIN15 ; pin++){
 8000fec:	2300      	movs	r3, #0
 8000fee:	71bb      	strb	r3, [r7, #6]
 8000ff0:	e01a      	b.n	8001028 <GPIO_PORT_voidInit+0x48>
			switch(port){
 8000ff2:	79fb      	ldrb	r3, [r7, #7]
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	d002      	beq.n	8000ffe <GPIO_PORT_voidInit+0x1e>
 8000ff8:	2b01      	cmp	r3, #1
 8000ffa:	d009      	beq.n	8001010 <GPIO_PORT_voidInit+0x30>
 8000ffc:	e011      	b.n	8001022 <GPIO_PORT_voidInit+0x42>
			#if PORTA_EN==1
			case GPIO_PORTA:
				GPIO_SetPinMode(port , pin, PORTA_DIR[pin]);
 8000ffe:	79bb      	ldrb	r3, [r7, #6]
 8001000:	4a25      	ldr	r2, [pc, #148]	; (8001098 <GPIO_PORT_voidInit+0xb8>)
 8001002:	5cd2      	ldrb	r2, [r2, r3]
 8001004:	79b9      	ldrb	r1, [r7, #6]
 8001006:	79fb      	ldrb	r3, [r7, #7]
 8001008:	4618      	mov	r0, r3
 800100a:	f000 f84d 	bl	80010a8 <GPIO_SetPinMode>
				break;
 800100e:	e008      	b.n	8001022 <GPIO_PORT_voidInit+0x42>
			#endif

			#if PORTB_EN==1
			case GPIO_PORTB:
				GPIO_SetPinMode(port , pin, PORTB_DIR[pin]);
 8001010:	79bb      	ldrb	r3, [r7, #6]
 8001012:	4a22      	ldr	r2, [pc, #136]	; (800109c <GPIO_PORT_voidInit+0xbc>)
 8001014:	5cd2      	ldrb	r2, [r2, r3]
 8001016:	79b9      	ldrb	r1, [r7, #6]
 8001018:	79fb      	ldrb	r3, [r7, #7]
 800101a:	4618      	mov	r0, r3
 800101c:	f000 f844 	bl	80010a8 <GPIO_SetPinMode>
				break;
 8001020:	bf00      	nop
		for(pin=GPIO_PIN0; pin<=GPIO_PIN15 ; pin++){
 8001022:	79bb      	ldrb	r3, [r7, #6]
 8001024:	3301      	adds	r3, #1
 8001026:	71bb      	strb	r3, [r7, #6]
 8001028:	79bb      	ldrb	r3, [r7, #6]
 800102a:	2b0f      	cmp	r3, #15
 800102c:	d9e1      	bls.n	8000ff2 <GPIO_PORT_voidInit+0x12>
	for(port=GPIO_PORTA; port<=GPIO_PORTC; port++){
 800102e:	79fb      	ldrb	r3, [r7, #7]
 8001030:	3301      	adds	r3, #1
 8001032:	71fb      	strb	r3, [r7, #7]
 8001034:	79fb      	ldrb	r3, [r7, #7]
 8001036:	2b02      	cmp	r3, #2
 8001038:	d9d8      	bls.n	8000fec <GPIO_PORT_voidInit+0xc>
			#endif
			  }
			}
		}

	for(port=GPIO_PORTA; port<=GPIO_PORTC; port++){
 800103a:	2300      	movs	r3, #0
 800103c:	71fb      	strb	r3, [r7, #7]
 800103e:	e023      	b.n	8001088 <GPIO_PORT_voidInit+0xa8>
		for(pin=GPIO_PIN0; pin<=GPIO_PIN15 ; pin++){
 8001040:	2300      	movs	r3, #0
 8001042:	71bb      	strb	r3, [r7, #6]
 8001044:	e01a      	b.n	800107c <GPIO_PORT_voidInit+0x9c>
			switch(port){
 8001046:	79fb      	ldrb	r3, [r7, #7]
 8001048:	2b00      	cmp	r3, #0
 800104a:	d002      	beq.n	8001052 <GPIO_PORT_voidInit+0x72>
 800104c:	2b01      	cmp	r3, #1
 800104e:	d009      	beq.n	8001064 <GPIO_PORT_voidInit+0x84>
 8001050:	e011      	b.n	8001076 <GPIO_PORT_voidInit+0x96>
			#if PORTA_EN==1
			case GPIO_PORTA:
				GPIO_WritePinValue(port , pin, PORTA_init_val[pin]);
 8001052:	79bb      	ldrb	r3, [r7, #6]
 8001054:	4a12      	ldr	r2, [pc, #72]	; (80010a0 <GPIO_PORT_voidInit+0xc0>)
 8001056:	5cd2      	ldrb	r2, [r2, r3]
 8001058:	79b9      	ldrb	r1, [r7, #6]
 800105a:	79fb      	ldrb	r3, [r7, #7]
 800105c:	4618      	mov	r0, r3
 800105e:	f000 f8ef 	bl	8001240 <GPIO_WritePinValue>
				break;
 8001062:	e008      	b.n	8001076 <GPIO_PORT_voidInit+0x96>
			#endif

			#if PORTB_EN==1
			case GPIO_PORTB:
				GPIO_WritePinValue(port , pin, PORTB_init_val[pin]);
 8001064:	79bb      	ldrb	r3, [r7, #6]
 8001066:	4a0f      	ldr	r2, [pc, #60]	; (80010a4 <GPIO_PORT_voidInit+0xc4>)
 8001068:	5cd2      	ldrb	r2, [r2, r3]
 800106a:	79b9      	ldrb	r1, [r7, #6]
 800106c:	79fb      	ldrb	r3, [r7, #7]
 800106e:	4618      	mov	r0, r3
 8001070:	f000 f8e6 	bl	8001240 <GPIO_WritePinValue>
				break;
 8001074:	bf00      	nop
		for(pin=GPIO_PIN0; pin<=GPIO_PIN15 ; pin++){
 8001076:	79bb      	ldrb	r3, [r7, #6]
 8001078:	3301      	adds	r3, #1
 800107a:	71bb      	strb	r3, [r7, #6]
 800107c:	79bb      	ldrb	r3, [r7, #6]
 800107e:	2b0f      	cmp	r3, #15
 8001080:	d9e1      	bls.n	8001046 <GPIO_PORT_voidInit+0x66>
	for(port=GPIO_PORTA; port<=GPIO_PORTC; port++){
 8001082:	79fb      	ldrb	r3, [r7, #7]
 8001084:	3301      	adds	r3, #1
 8001086:	71fb      	strb	r3, [r7, #7]
 8001088:	79fb      	ldrb	r3, [r7, #7]
 800108a:	2b02      	cmp	r3, #2
 800108c:	d9d8      	bls.n	8001040 <GPIO_PORT_voidInit+0x60>
			#endif
			  }
			}
		}

}
 800108e:	bf00      	nop
 8001090:	bf00      	nop
 8001092:	3708      	adds	r7, #8
 8001094:	46bd      	mov	sp, r7
 8001096:	bd80      	pop	{r7, pc}
 8001098:	20000028 	.word	0x20000028
 800109c:	20000038 	.word	0x20000038
 80010a0:	20000048 	.word	0x20000048
 80010a4:	20000058 	.word	0x20000058

080010a8 <GPIO_SetPinMode>:
#endif

void GPIO_SetPinMode (u8 Copy_PortId, u8 Copy_PinId, u8 Copy_PinMode)
{
 80010a8:	b480      	push	{r7}
 80010aa:	b085      	sub	sp, #20
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	4603      	mov	r3, r0
 80010b0:	71fb      	strb	r3, [r7, #7]
 80010b2:	460b      	mov	r3, r1
 80010b4:	71bb      	strb	r3, [r7, #6]
 80010b6:	4613      	mov	r3, r2
 80010b8:	717b      	strb	r3, [r7, #5]
	if(Copy_PortId <= GPIO_PORTC)
 80010ba:	79fb      	ldrb	r3, [r7, #7]
 80010bc:	2b02      	cmp	r3, #2
 80010be:	f200 80b7 	bhi.w	8001230 <GPIO_SetPinMode+0x188>
	{
		u8 Local_PullUpDown_Flag = GET_BIT(Copy_PinMode,4); /* Equal one in case of pull up only */
 80010c2:	797b      	ldrb	r3, [r7, #5]
 80010c4:	111b      	asrs	r3, r3, #4
 80010c6:	b2db      	uxtb	r3, r3
 80010c8:	f003 0301 	and.w	r3, r3, #1
 80010cc:	73fb      	strb	r3, [r7, #15]
		CLR_BIT(Copy_PinMode,4); /*Get the Mode back to its value if it was input pull up */
 80010ce:	797b      	ldrb	r3, [r7, #5]
 80010d0:	f023 0310 	bic.w	r3, r3, #16
 80010d4:	717b      	strb	r3, [r7, #5]

		if(Copy_PinId <= GPIO_PIN7)
 80010d6:	79bb      	ldrb	r3, [r7, #6]
 80010d8:	2b07      	cmp	r3, #7
 80010da:	d851      	bhi.n	8001180 <GPIO_SetPinMode+0xd8>
		{
			GPIO_Astr[Copy_PortId]->CRL &= (~((0b1111) << (Copy_PinId * 4)));
 80010dc:	79fb      	ldrb	r3, [r7, #7]
 80010de:	4a57      	ldr	r2, [pc, #348]	; (800123c <GPIO_SetPinMode+0x194>)
 80010e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010e4:	681a      	ldr	r2, [r3, #0]
 80010e6:	79bb      	ldrb	r3, [r7, #6]
 80010e8:	009b      	lsls	r3, r3, #2
 80010ea:	210f      	movs	r1, #15
 80010ec:	fa01 f303 	lsl.w	r3, r1, r3
 80010f0:	43db      	mvns	r3, r3
 80010f2:	4618      	mov	r0, r3
 80010f4:	79fb      	ldrb	r3, [r7, #7]
 80010f6:	4951      	ldr	r1, [pc, #324]	; (800123c <GPIO_SetPinMode+0x194>)
 80010f8:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80010fc:	4002      	ands	r2, r0
 80010fe:	601a      	str	r2, [r3, #0]
			GPIO_Astr[Copy_PortId]->CRL |= (Copy_PinMode << (Copy_PinId * 4));
 8001100:	79fb      	ldrb	r3, [r7, #7]
 8001102:	4a4e      	ldr	r2, [pc, #312]	; (800123c <GPIO_SetPinMode+0x194>)
 8001104:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001108:	681a      	ldr	r2, [r3, #0]
 800110a:	7979      	ldrb	r1, [r7, #5]
 800110c:	79bb      	ldrb	r3, [r7, #6]
 800110e:	009b      	lsls	r3, r3, #2
 8001110:	fa01 f303 	lsl.w	r3, r1, r3
 8001114:	4618      	mov	r0, r3
 8001116:	79fb      	ldrb	r3, [r7, #7]
 8001118:	4948      	ldr	r1, [pc, #288]	; (800123c <GPIO_SetPinMode+0x194>)
 800111a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800111e:	4302      	orrs	r2, r0
 8001120:	601a      	str	r2, [r3, #0]

			if((Copy_PinMode == GPIO_INPUT_PULL_DOWN) && (Local_PullUpDown_Flag == 0))
 8001122:	797b      	ldrb	r3, [r7, #5]
 8001124:	2b08      	cmp	r3, #8
 8001126:	d114      	bne.n	8001152 <GPIO_SetPinMode+0xaa>
 8001128:	7bfb      	ldrb	r3, [r7, #15]
 800112a:	2b00      	cmp	r3, #0
 800112c:	d111      	bne.n	8001152 <GPIO_SetPinMode+0xaa>
			{
				/* Then the mode was input pull down */
				/* Turn off the internal pull up resistor */
				CLR_BIT(GPIO_Astr[Copy_PortId]->ODR,Copy_PinId);
 800112e:	79fb      	ldrb	r3, [r7, #7]
 8001130:	4a42      	ldr	r2, [pc, #264]	; (800123c <GPIO_SetPinMode+0x194>)
 8001132:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001136:	68da      	ldr	r2, [r3, #12]
 8001138:	79bb      	ldrb	r3, [r7, #6]
 800113a:	2101      	movs	r1, #1
 800113c:	fa01 f303 	lsl.w	r3, r1, r3
 8001140:	43db      	mvns	r3, r3
 8001142:	4618      	mov	r0, r3
 8001144:	79fb      	ldrb	r3, [r7, #7]
 8001146:	493d      	ldr	r1, [pc, #244]	; (800123c <GPIO_SetPinMode+0x194>)
 8001148:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800114c:	4002      	ands	r2, r0
 800114e:	60da      	str	r2, [r3, #12]
 8001150:	e06e      	b.n	8001230 <GPIO_SetPinMode+0x188>
			}
			else if((Copy_PinMode == GPIO_INPUT_PULL_DOWN) && (Local_PullUpDown_Flag == 1))
 8001152:	797b      	ldrb	r3, [r7, #5]
 8001154:	2b08      	cmp	r3, #8
 8001156:	d16b      	bne.n	8001230 <GPIO_SetPinMode+0x188>
 8001158:	7bfb      	ldrb	r3, [r7, #15]
 800115a:	2b01      	cmp	r3, #1
 800115c:	d168      	bne.n	8001230 <GPIO_SetPinMode+0x188>
			{
				/* Then the mode was input pull up */
				/* Turn on the internal pull up resistor */
				SET_BIT(GPIO_Astr[Copy_PortId]->ODR,Copy_PinId);
 800115e:	79fb      	ldrb	r3, [r7, #7]
 8001160:	4a36      	ldr	r2, [pc, #216]	; (800123c <GPIO_SetPinMode+0x194>)
 8001162:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001166:	68da      	ldr	r2, [r3, #12]
 8001168:	79bb      	ldrb	r3, [r7, #6]
 800116a:	2101      	movs	r1, #1
 800116c:	fa01 f303 	lsl.w	r3, r1, r3
 8001170:	4618      	mov	r0, r3
 8001172:	79fb      	ldrb	r3, [r7, #7]
 8001174:	4931      	ldr	r1, [pc, #196]	; (800123c <GPIO_SetPinMode+0x194>)
 8001176:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800117a:	4302      	orrs	r2, r0
 800117c:	60da      	str	r2, [r3, #12]
			}
		}

	}

}
 800117e:	e057      	b.n	8001230 <GPIO_SetPinMode+0x188>
		else if(Copy_PinId <= GPIO_PIN15)
 8001180:	79bb      	ldrb	r3, [r7, #6]
 8001182:	2b0f      	cmp	r3, #15
 8001184:	d854      	bhi.n	8001230 <GPIO_SetPinMode+0x188>
			Copy_PinId -= 8;
 8001186:	79bb      	ldrb	r3, [r7, #6]
 8001188:	3b08      	subs	r3, #8
 800118a:	71bb      	strb	r3, [r7, #6]
			GPIO_Astr[Copy_PortId]->CRH &= (~((0b1111) << (Copy_PinId * 4)));
 800118c:	79fb      	ldrb	r3, [r7, #7]
 800118e:	4a2b      	ldr	r2, [pc, #172]	; (800123c <GPIO_SetPinMode+0x194>)
 8001190:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001194:	685a      	ldr	r2, [r3, #4]
 8001196:	79bb      	ldrb	r3, [r7, #6]
 8001198:	009b      	lsls	r3, r3, #2
 800119a:	210f      	movs	r1, #15
 800119c:	fa01 f303 	lsl.w	r3, r1, r3
 80011a0:	43db      	mvns	r3, r3
 80011a2:	4618      	mov	r0, r3
 80011a4:	79fb      	ldrb	r3, [r7, #7]
 80011a6:	4925      	ldr	r1, [pc, #148]	; (800123c <GPIO_SetPinMode+0x194>)
 80011a8:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80011ac:	4002      	ands	r2, r0
 80011ae:	605a      	str	r2, [r3, #4]
			GPIO_Astr[Copy_PortId]->CRH |= (Copy_PinMode << (Copy_PinId * 4));
 80011b0:	79fb      	ldrb	r3, [r7, #7]
 80011b2:	4a22      	ldr	r2, [pc, #136]	; (800123c <GPIO_SetPinMode+0x194>)
 80011b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011b8:	685a      	ldr	r2, [r3, #4]
 80011ba:	7979      	ldrb	r1, [r7, #5]
 80011bc:	79bb      	ldrb	r3, [r7, #6]
 80011be:	009b      	lsls	r3, r3, #2
 80011c0:	fa01 f303 	lsl.w	r3, r1, r3
 80011c4:	4618      	mov	r0, r3
 80011c6:	79fb      	ldrb	r3, [r7, #7]
 80011c8:	491c      	ldr	r1, [pc, #112]	; (800123c <GPIO_SetPinMode+0x194>)
 80011ca:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80011ce:	4302      	orrs	r2, r0
 80011d0:	605a      	str	r2, [r3, #4]
			if((Copy_PinMode == GPIO_INPUT_PULL_DOWN) && (Local_PullUpDown_Flag == 0))
 80011d2:	797b      	ldrb	r3, [r7, #5]
 80011d4:	2b08      	cmp	r3, #8
 80011d6:	d114      	bne.n	8001202 <GPIO_SetPinMode+0x15a>
 80011d8:	7bfb      	ldrb	r3, [r7, #15]
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d111      	bne.n	8001202 <GPIO_SetPinMode+0x15a>
				CLR_BIT(GPIO_Astr[Copy_PortId]->ODR,Copy_PinId);
 80011de:	79fb      	ldrb	r3, [r7, #7]
 80011e0:	4a16      	ldr	r2, [pc, #88]	; (800123c <GPIO_SetPinMode+0x194>)
 80011e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011e6:	68da      	ldr	r2, [r3, #12]
 80011e8:	79bb      	ldrb	r3, [r7, #6]
 80011ea:	2101      	movs	r1, #1
 80011ec:	fa01 f303 	lsl.w	r3, r1, r3
 80011f0:	43db      	mvns	r3, r3
 80011f2:	4618      	mov	r0, r3
 80011f4:	79fb      	ldrb	r3, [r7, #7]
 80011f6:	4911      	ldr	r1, [pc, #68]	; (800123c <GPIO_SetPinMode+0x194>)
 80011f8:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80011fc:	4002      	ands	r2, r0
 80011fe:	60da      	str	r2, [r3, #12]
 8001200:	e016      	b.n	8001230 <GPIO_SetPinMode+0x188>
			else if((Copy_PinMode ==GPIO_INPUT_PULL_DOWN) && (Local_PullUpDown_Flag == 1))
 8001202:	797b      	ldrb	r3, [r7, #5]
 8001204:	2b08      	cmp	r3, #8
 8001206:	d113      	bne.n	8001230 <GPIO_SetPinMode+0x188>
 8001208:	7bfb      	ldrb	r3, [r7, #15]
 800120a:	2b01      	cmp	r3, #1
 800120c:	d110      	bne.n	8001230 <GPIO_SetPinMode+0x188>
				SET_BIT(GPIO_Astr[Copy_PortId]->ODR,Copy_PinId);
 800120e:	79fb      	ldrb	r3, [r7, #7]
 8001210:	4a0a      	ldr	r2, [pc, #40]	; (800123c <GPIO_SetPinMode+0x194>)
 8001212:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001216:	68da      	ldr	r2, [r3, #12]
 8001218:	79bb      	ldrb	r3, [r7, #6]
 800121a:	2101      	movs	r1, #1
 800121c:	fa01 f303 	lsl.w	r3, r1, r3
 8001220:	4618      	mov	r0, r3
 8001222:	79fb      	ldrb	r3, [r7, #7]
 8001224:	4905      	ldr	r1, [pc, #20]	; (800123c <GPIO_SetPinMode+0x194>)
 8001226:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800122a:	4302      	orrs	r2, r0
 800122c:	60da      	str	r2, [r3, #12]
}
 800122e:	e7ff      	b.n	8001230 <GPIO_SetPinMode+0x188>
 8001230:	bf00      	nop
 8001232:	3714      	adds	r7, #20
 8001234:	46bd      	mov	sp, r7
 8001236:	bc80      	pop	{r7}
 8001238:	4770      	bx	lr
 800123a:	bf00      	nop
 800123c:	20000068 	.word	0x20000068

08001240 <GPIO_WritePinValue>:

void GPIO_WritePinValue	(u8 Copy_PortId, u8 Copy_PinId, u8 Copy_u8PinValue)
{
 8001240:	b480      	push	{r7}
 8001242:	b083      	sub	sp, #12
 8001244:	af00      	add	r7, sp, #0
 8001246:	4603      	mov	r3, r0
 8001248:	71fb      	strb	r3, [r7, #7]
 800124a:	460b      	mov	r3, r1
 800124c:	71bb      	strb	r3, [r7, #6]
 800124e:	4613      	mov	r3, r2
 8001250:	717b      	strb	r3, [r7, #5]

	if(Copy_PortId <= GPIO_PORTC && Copy_PinId <= GPIO_PIN15)
 8001252:	79fb      	ldrb	r3, [r7, #7]
 8001254:	2b02      	cmp	r3, #2
 8001256:	d81d      	bhi.n	8001294 <GPIO_WritePinValue+0x54>
 8001258:	79bb      	ldrb	r3, [r7, #6]
 800125a:	2b0f      	cmp	r3, #15
 800125c:	d81a      	bhi.n	8001294 <GPIO_WritePinValue+0x54>
	{
		switch(Copy_u8PinValue)
 800125e:	797b      	ldrb	r3, [r7, #5]
 8001260:	2b00      	cmp	r3, #0
 8001262:	d00c      	beq.n	800127e <GPIO_WritePinValue+0x3e>
 8001264:	2b01      	cmp	r3, #1
 8001266:	d115      	bne.n	8001294 <GPIO_WritePinValue+0x54>
		{
		case GPIO_HIGH:
			GPIO_Astr[Copy_PortId]->BSRR = (1<<Copy_PinId);
 8001268:	79bb      	ldrb	r3, [r7, #6]
 800126a:	2201      	movs	r2, #1
 800126c:	fa02 f103 	lsl.w	r1, r2, r3
 8001270:	79fb      	ldrb	r3, [r7, #7]
 8001272:	4a0b      	ldr	r2, [pc, #44]	; (80012a0 <GPIO_WritePinValue+0x60>)
 8001274:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001278:	460a      	mov	r2, r1
 800127a:	611a      	str	r2, [r3, #16]
			break;
 800127c:	e00a      	b.n	8001294 <GPIO_WritePinValue+0x54>
		case GPIO_LOW:
			GPIO_Astr[Copy_PortId]->BRR = (1<<Copy_PinId);
 800127e:	79bb      	ldrb	r3, [r7, #6]
 8001280:	2201      	movs	r2, #1
 8001282:	fa02 f103 	lsl.w	r1, r2, r3
 8001286:	79fb      	ldrb	r3, [r7, #7]
 8001288:	4a05      	ldr	r2, [pc, #20]	; (80012a0 <GPIO_WritePinValue+0x60>)
 800128a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800128e:	460a      	mov	r2, r1
 8001290:	615a      	str	r2, [r3, #20]
			break;
 8001292:	bf00      	nop
		}
	}
}
 8001294:	bf00      	nop
 8001296:	370c      	adds	r7, #12
 8001298:	46bd      	mov	sp, r7
 800129a:	bc80      	pop	{r7}
 800129c:	4770      	bx	lr
 800129e:	bf00      	nop
 80012a0:	20000068 	.word	0x20000068

080012a4 <NVIC_Init>:
#include "MCAL/NVIC/NVIC_Private.h"

/*******************************************************************************
*                      Functions Definitions                                   *
*******************************************************************************/
void NVIC_Init(void){
 80012a4:	b480      	push	{r7}
 80012a6:	af00      	add	r7, sp, #0

	SCB_AIRCR=NVIC_GROUP_SUBSelected;
 80012a8:	4b03      	ldr	r3, [pc, #12]	; (80012b8 <NVIC_Init+0x14>)
 80012aa:	4a04      	ldr	r2, [pc, #16]	; (80012bc <NVIC_Init+0x18>)
 80012ac:	601a      	str	r2, [r3, #0]
}
 80012ae:	bf00      	nop
 80012b0:	46bd      	mov	sp, r7
 80012b2:	bc80      	pop	{r7}
 80012b4:	4770      	bx	lr
 80012b6:	bf00      	nop
 80012b8:	e000ed0c 	.word	0xe000ed0c
 80012bc:	5fa00500 	.word	0x5fa00500

080012c0 <NVIC_EnableInterrupt>:

void NVIC_EnableInterrupt(NVIC_INTERTUPT_id Copy_u8InterruptID)
{
 80012c0:	b480      	push	{r7}
 80012c2:	b083      	sub	sp, #12
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	4603      	mov	r3, r0
 80012c8:	71fb      	strb	r3, [r7, #7]

	if(Copy_u8InterruptID < 32)
 80012ca:	79fb      	ldrb	r3, [r7, #7]
 80012cc:	2b1f      	cmp	r3, #31
 80012ce:	d805      	bhi.n	80012dc <NVIC_EnableInterrupt+0x1c>
	{
		NVIC_ISER0= (1 << Copy_u8InterruptID);
 80012d0:	79fb      	ldrb	r3, [r7, #7]
 80012d2:	2201      	movs	r2, #1
 80012d4:	409a      	lsls	r2, r3
 80012d6:	4b07      	ldr	r3, [pc, #28]	; (80012f4 <NVIC_EnableInterrupt+0x34>)
 80012d8:	601a      	str	r2, [r3, #0]
	else
	{
		NVIC_ISER1 = (1 << (Copy_u8InterruptID-32));
	}

}
 80012da:	e005      	b.n	80012e8 <NVIC_EnableInterrupt+0x28>
		NVIC_ISER1 = (1 << (Copy_u8InterruptID-32));
 80012dc:	79fb      	ldrb	r3, [r7, #7]
 80012de:	3b20      	subs	r3, #32
 80012e0:	2201      	movs	r2, #1
 80012e2:	409a      	lsls	r2, r3
 80012e4:	4b04      	ldr	r3, [pc, #16]	; (80012f8 <NVIC_EnableInterrupt+0x38>)
 80012e6:	601a      	str	r2, [r3, #0]
}
 80012e8:	bf00      	nop
 80012ea:	370c      	adds	r7, #12
 80012ec:	46bd      	mov	sp, r7
 80012ee:	bc80      	pop	{r7}
 80012f0:	4770      	bx	lr
 80012f2:	bf00      	nop
 80012f4:	e000e100 	.word	0xe000e100
 80012f8:	e000e104 	.word	0xe000e104

080012fc <RCC_InitSysClk>:
#include "MCAL/RCC/RCC_private.h"
#include "MCAL/RCC/RCC_config.h"
#include "LIB/stm32f103c8t6.h"


void RCC_InitSysClk(void){
 80012fc:	b480      	push	{r7}
 80012fe:	af00      	add	r7, sp, #0

	RCC->CR = (RCC->CR &~ (0b11111<<3)) | (RCC_HSI_TRIM<<3); /* Setting the TRIM value for HSI */
 8001300:	4b1d      	ldr	r3, [pc, #116]	; (8001378 <RCC_InitSysClk+0x7c>)
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8001308:	4a1b      	ldr	r2, [pc, #108]	; (8001378 <RCC_InitSysClk+0x7c>)
 800130a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800130e:	6013      	str	r3, [r2, #0]
		CLR_BIT(RCC->CFGR,0); /* Select HSI as clock source from SW registers */
		CLR_BIT(RCC->CFGR,1);

	#elif (RCC_CLK_SYS == RCC_HSE)
		#if (_HSE_TYPE == RCC_HSE_BYPASS)
			SET_BIT(RCC->CR,18);
 8001310:	4b19      	ldr	r3, [pc, #100]	; (8001378 <RCC_InitSysClk+0x7c>)
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	4a18      	ldr	r2, [pc, #96]	; (8001378 <RCC_InitSysClk+0x7c>)
 8001316:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800131a:	6013      	str	r3, [r2, #0]
		#elif (RCC_HSE_TYPE == RCC_HSE_NOT_BYPASS)
			CLR_BIT(RCC->CR,18);
		#else
			#error"Wrong System Clock Choice"
		#endif
		SET_BIT(RCC->CR,16); /* write one bit no16 HSEON */
 800131c:	4b16      	ldr	r3, [pc, #88]	; (8001378 <RCC_InitSysClk+0x7c>)
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	4a15      	ldr	r2, [pc, #84]	; (8001378 <RCC_InitSysClk+0x7c>)
 8001322:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001326:	6013      	str	r3, [r2, #0]
		SET_BIT(RCC->CFGR,0); /* select HSE as system clock in SW registers */
 8001328:	4b13      	ldr	r3, [pc, #76]	; (8001378 <RCC_InitSysClk+0x7c>)
 800132a:	685b      	ldr	r3, [r3, #4]
 800132c:	4a12      	ldr	r2, [pc, #72]	; (8001378 <RCC_InitSysClk+0x7c>)
 800132e:	f043 0301 	orr.w	r3, r3, #1
 8001332:	6053      	str	r3, [r2, #4]
		CLR_BIT(RCC->CFGR,1);
 8001334:	4b10      	ldr	r3, [pc, #64]	; (8001378 <RCC_InitSysClk+0x7c>)
 8001336:	685b      	ldr	r3, [r3, #4]
 8001338:	4a0f      	ldr	r2, [pc, #60]	; (8001378 <RCC_InitSysClk+0x7c>)
 800133a:	f023 0302 	bic.w	r3, r3, #2
 800133e:	6053      	str	r3, [r2, #4]
	#else
		#error"Wrong System Clock Choice"
	#endif

	/* Setting the Prescaler */
	RCC->CFGR = (RCC->CFGR &~ (0b11<<14))  | (RCC_ADC_PRESCALER<<14);  /* ADC */
 8001340:	4b0d      	ldr	r3, [pc, #52]	; (8001378 <RCC_InitSysClk+0x7c>)
 8001342:	685b      	ldr	r3, [r3, #4]
 8001344:	4a0c      	ldr	r2, [pc, #48]	; (8001378 <RCC_InitSysClk+0x7c>)
 8001346:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800134a:	6053      	str	r3, [r2, #4]
	RCC->CFGR = (RCC->CFGR &~ (0b111<<11)) | (RCC_APB2_PRESCALER<<11); /* APB2 */
 800134c:	4b0a      	ldr	r3, [pc, #40]	; (8001378 <RCC_InitSysClk+0x7c>)
 800134e:	685b      	ldr	r3, [r3, #4]
 8001350:	4a09      	ldr	r2, [pc, #36]	; (8001378 <RCC_InitSysClk+0x7c>)
 8001352:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8001356:	6053      	str	r3, [r2, #4]
	RCC->CFGR = (RCC->CFGR &~ (0b111<<8))  | (RCC_APB1_PRESCALER<<8);  /* APB1 */
 8001358:	4b07      	ldr	r3, [pc, #28]	; (8001378 <RCC_InitSysClk+0x7c>)
 800135a:	685b      	ldr	r3, [r3, #4]
 800135c:	4a06      	ldr	r2, [pc, #24]	; (8001378 <RCC_InitSysClk+0x7c>)
 800135e:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001362:	6053      	str	r3, [r2, #4]
	RCC->CFGR = (RCC->CFGR &~ (0b1111<<4)) | (RCC_AHB_PRESCALER<<4);   /* AHB */
 8001364:	4b04      	ldr	r3, [pc, #16]	; (8001378 <RCC_InitSysClk+0x7c>)
 8001366:	685b      	ldr	r3, [r3, #4]
 8001368:	4a03      	ldr	r2, [pc, #12]	; (8001378 <RCC_InitSysClk+0x7c>)
 800136a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800136e:	6053      	str	r3, [r2, #4]
	
}
 8001370:	bf00      	nop
 8001372:	46bd      	mov	sp, r7
 8001374:	bc80      	pop	{r7}
 8001376:	4770      	bx	lr
 8001378:	40021000 	.word	0x40021000

0800137c <RCC_PeripheralClk>:

void RCC_PeripheralClk(RCC_PER_ID Copy_PeripheralId ,PER_STATE Copy_State){
 800137c:	b480      	push	{r7}
 800137e:	b083      	sub	sp, #12
 8001380:	af00      	add	r7, sp, #0
 8001382:	4603      	mov	r3, r0
 8001384:	460a      	mov	r2, r1
 8001386:	71fb      	strb	r3, [r7, #7]
 8001388:	4613      	mov	r3, r2
 800138a:	71bb      	strb	r3, [r7, #6]

	if(Copy_PeripheralId < 32) /* from 0 to 31 AHB BUS */
 800138c:	79fb      	ldrb	r3, [r7, #7]
 800138e:	2b1f      	cmp	r3, #31
 8001390:	d81b      	bhi.n	80013ca <RCC_PeripheralClk+0x4e>
	{
		switch(Copy_State)
 8001392:	79bb      	ldrb	r3, [r7, #6]
 8001394:	2b00      	cmp	r3, #0
 8001396:	d00c      	beq.n	80013b2 <RCC_PeripheralClk+0x36>
 8001398:	2b01      	cmp	r3, #1
 800139a:	d15a      	bne.n	8001452 <RCC_PeripheralClk+0xd6>
		{
		case RCC_Enable:
			SET_BIT(RCC->AHBENR,Copy_PeripheralId);
 800139c:	4b2f      	ldr	r3, [pc, #188]	; (800145c <RCC_PeripheralClk+0xe0>)
 800139e:	695b      	ldr	r3, [r3, #20]
 80013a0:	79fa      	ldrb	r2, [r7, #7]
 80013a2:	2101      	movs	r1, #1
 80013a4:	fa01 f202 	lsl.w	r2, r1, r2
 80013a8:	4611      	mov	r1, r2
 80013aa:	4a2c      	ldr	r2, [pc, #176]	; (800145c <RCC_PeripheralClk+0xe0>)
 80013ac:	430b      	orrs	r3, r1
 80013ae:	6153      	str	r3, [r2, #20]
			break;
 80013b0:	e04f      	b.n	8001452 <RCC_PeripheralClk+0xd6>
		case RCC_Disable:
			CLR_BIT(RCC->AHBENR,Copy_PeripheralId);
 80013b2:	4b2a      	ldr	r3, [pc, #168]	; (800145c <RCC_PeripheralClk+0xe0>)
 80013b4:	695b      	ldr	r3, [r3, #20]
 80013b6:	79fa      	ldrb	r2, [r7, #7]
 80013b8:	2101      	movs	r1, #1
 80013ba:	fa01 f202 	lsl.w	r2, r1, r2
 80013be:	43d2      	mvns	r2, r2
 80013c0:	4611      	mov	r1, r2
 80013c2:	4a26      	ldr	r2, [pc, #152]	; (800145c <RCC_PeripheralClk+0xe0>)
 80013c4:	400b      	ands	r3, r1
 80013c6:	6153      	str	r3, [r2, #20]
			break;
 80013c8:	e043      	b.n	8001452 <RCC_PeripheralClk+0xd6>
		}
	}
	else if(Copy_PeripheralId < 64) /* from 32 to 63 APB2 BUS */
 80013ca:	79fb      	ldrb	r3, [r7, #7]
 80013cc:	2b3f      	cmp	r3, #63	; 0x3f
 80013ce:	d81e      	bhi.n	800140e <RCC_PeripheralClk+0x92>
	{
		Copy_PeripheralId -= 32;
 80013d0:	79fb      	ldrb	r3, [r7, #7]
 80013d2:	3b20      	subs	r3, #32
 80013d4:	71fb      	strb	r3, [r7, #7]
		switch(Copy_State)
 80013d6:	79bb      	ldrb	r3, [r7, #6]
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d00c      	beq.n	80013f6 <RCC_PeripheralClk+0x7a>
 80013dc:	2b01      	cmp	r3, #1
 80013de:	d138      	bne.n	8001452 <RCC_PeripheralClk+0xd6>
		{
		case RCC_Enable:
			SET_BIT(RCC->APB2ENR,Copy_PeripheralId);
 80013e0:	4b1e      	ldr	r3, [pc, #120]	; (800145c <RCC_PeripheralClk+0xe0>)
 80013e2:	699b      	ldr	r3, [r3, #24]
 80013e4:	79fa      	ldrb	r2, [r7, #7]
 80013e6:	2101      	movs	r1, #1
 80013e8:	fa01 f202 	lsl.w	r2, r1, r2
 80013ec:	4611      	mov	r1, r2
 80013ee:	4a1b      	ldr	r2, [pc, #108]	; (800145c <RCC_PeripheralClk+0xe0>)
 80013f0:	430b      	orrs	r3, r1
 80013f2:	6193      	str	r3, [r2, #24]
			break;
 80013f4:	e02d      	b.n	8001452 <RCC_PeripheralClk+0xd6>
		case RCC_Disable:
			CLR_BIT(RCC->APB2ENR,Copy_PeripheralId);
 80013f6:	4b19      	ldr	r3, [pc, #100]	; (800145c <RCC_PeripheralClk+0xe0>)
 80013f8:	699b      	ldr	r3, [r3, #24]
 80013fa:	79fa      	ldrb	r2, [r7, #7]
 80013fc:	2101      	movs	r1, #1
 80013fe:	fa01 f202 	lsl.w	r2, r1, r2
 8001402:	43d2      	mvns	r2, r2
 8001404:	4611      	mov	r1, r2
 8001406:	4a15      	ldr	r2, [pc, #84]	; (800145c <RCC_PeripheralClk+0xe0>)
 8001408:	400b      	ands	r3, r1
 800140a:	6193      	str	r3, [r2, #24]
			break;
 800140c:	e021      	b.n	8001452 <RCC_PeripheralClk+0xd6>
		}
	}
	else if(Copy_PeripheralId < 96) /* from 64 to 95 APB1 BUS */
 800140e:	79fb      	ldrb	r3, [r7, #7]
 8001410:	2b5f      	cmp	r3, #95	; 0x5f
 8001412:	d81e      	bhi.n	8001452 <RCC_PeripheralClk+0xd6>
	{
		Copy_PeripheralId -= 64;
 8001414:	79fb      	ldrb	r3, [r7, #7]
 8001416:	3b40      	subs	r3, #64	; 0x40
 8001418:	71fb      	strb	r3, [r7, #7]
		switch(Copy_State)
 800141a:	79bb      	ldrb	r3, [r7, #6]
 800141c:	2b00      	cmp	r3, #0
 800141e:	d00c      	beq.n	800143a <RCC_PeripheralClk+0xbe>
 8001420:	2b01      	cmp	r3, #1
 8001422:	d116      	bne.n	8001452 <RCC_PeripheralClk+0xd6>
		{
		case RCC_Enable:
			SET_BIT(RCC->APB1ENR,Copy_PeripheralId);
 8001424:	4b0d      	ldr	r3, [pc, #52]	; (800145c <RCC_PeripheralClk+0xe0>)
 8001426:	69db      	ldr	r3, [r3, #28]
 8001428:	79fa      	ldrb	r2, [r7, #7]
 800142a:	2101      	movs	r1, #1
 800142c:	fa01 f202 	lsl.w	r2, r1, r2
 8001430:	4611      	mov	r1, r2
 8001432:	4a0a      	ldr	r2, [pc, #40]	; (800145c <RCC_PeripheralClk+0xe0>)
 8001434:	430b      	orrs	r3, r1
 8001436:	61d3      	str	r3, [r2, #28]
			break;
 8001438:	e00b      	b.n	8001452 <RCC_PeripheralClk+0xd6>
		case RCC_Disable:
			CLR_BIT(RCC->APB1ENR,Copy_PeripheralId);
 800143a:	4b08      	ldr	r3, [pc, #32]	; (800145c <RCC_PeripheralClk+0xe0>)
 800143c:	69db      	ldr	r3, [r3, #28]
 800143e:	79fa      	ldrb	r2, [r7, #7]
 8001440:	2101      	movs	r1, #1
 8001442:	fa01 f202 	lsl.w	r2, r1, r2
 8001446:	43d2      	mvns	r2, r2
 8001448:	4611      	mov	r1, r2
 800144a:	4a04      	ldr	r2, [pc, #16]	; (800145c <RCC_PeripheralClk+0xe0>)
 800144c:	400b      	ands	r3, r1
 800144e:	61d3      	str	r3, [r2, #28]
			break;
 8001450:	bf00      	nop
		}
	}

}
 8001452:	bf00      	nop
 8001454:	370c      	adds	r7, #12
 8001456:	46bd      	mov	sp, r7
 8001458:	bc80      	pop	{r7}
 800145a:	4770      	bx	lr
 800145c:	40021000 	.word	0x40021000

08001460 <SysTick_Handler>:
	*Copy_pu32ElapsedTime_PTR=(SysTK->LOAD-SysTK->VAL);
}
void SysTKGetRemainingTime    (u32 * Copy_32RemainingTime_PTR){
	*Copy_32RemainingTime_PTR=SysTK->VAL;
}
void SysTick_Handler(void){
 8001460:	b580      	push	{r7, lr}
 8001462:	af00      	add	r7, sp, #0

	/* Clear The Interrupt Flag */
	CLEAR_BIT(SysTK->CTRL,16);
 8001464:	4b12      	ldr	r3, [pc, #72]	; (80014b0 <SysTick_Handler+0x50>)
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	4a11      	ldr	r2, [pc, #68]	; (80014b0 <SysTick_Handler+0x50>)
 800146a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800146e:	6013      	str	r3, [r2, #0]

	if(SysTK_ModeOfInterval == SysTK_SINGLE_INTERVAL)
 8001470:	4b10      	ldr	r3, [pc, #64]	; (80014b4 <SysTick_Handler+0x54>)
 8001472:	781b      	ldrb	r3, [r3, #0]
 8001474:	2b01      	cmp	r3, #1
 8001476:	d111      	bne.n	800149c <SysTick_Handler+0x3c>
	{
		/* Disable and Stop The Timer */
		CLEAR_BIT(SysTK->CTRL,0);
 8001478:	4b0d      	ldr	r3, [pc, #52]	; (80014b0 <SysTick_Handler+0x50>)
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	4a0c      	ldr	r2, [pc, #48]	; (80014b0 <SysTick_Handler+0x50>)
 800147e:	f023 0301 	bic.w	r3, r3, #1
 8001482:	6013      	str	r3, [r2, #0]
		CLEAR_BIT(SysTK->CTRL,1);
 8001484:	4b0a      	ldr	r3, [pc, #40]	; (80014b0 <SysTick_Handler+0x50>)
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	4a09      	ldr	r2, [pc, #36]	; (80014b0 <SysTick_Handler+0x50>)
 800148a:	f023 0302 	bic.w	r3, r3, #2
 800148e:	6013      	str	r3, [r2, #0]
		SysTK->LOAD = 0;
 8001490:	4b07      	ldr	r3, [pc, #28]	; (80014b0 <SysTick_Handler+0x50>)
 8001492:	2200      	movs	r2, #0
 8001494:	605a      	str	r2, [r3, #4]
		SysTK->VAL  = 0;
 8001496:	4b06      	ldr	r3, [pc, #24]	; (80014b0 <SysTick_Handler+0x50>)
 8001498:	2200      	movs	r2, #0
 800149a:	609a      	str	r2, [r3, #8]
	}
	if(SysTK_ptr_f != NULL)
 800149c:	4b06      	ldr	r3, [pc, #24]	; (80014b8 <SysTick_Handler+0x58>)
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d002      	beq.n	80014aa <SysTick_Handler+0x4a>
	{
		SysTK_ptr_f();
 80014a4:	4b04      	ldr	r3, [pc, #16]	; (80014b8 <SysTick_Handler+0x58>)
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	4798      	blx	r3
	}
}
 80014aa:	bf00      	nop
 80014ac:	bd80      	pop	{r7, pc}
 80014ae:	bf00      	nop
 80014b0:	e000e010 	.word	0xe000e010
 80014b4:	20000114 	.word	0x20000114
 80014b8:	20000118 	.word	0x20000118

080014bc <TIMER1_Init>:
#include "HAL/LCD/CLCD_interface.h"

static void (*TIMER1_callback)(void) = NULL;

void TIMER1_Init(Count_Mode Copy_Direction , u16 Copy_u16Prescaler)
{
 80014bc:	b480      	push	{r7}
 80014be:	b083      	sub	sp, #12
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	4603      	mov	r3, r0
 80014c4:	460a      	mov	r2, r1
 80014c6:	71fb      	strb	r3, [r7, #7]
 80014c8:	4613      	mov	r3, r2
 80014ca:	80bb      	strh	r3, [r7, #4]
	TIMER1->CR1 = 0;
 80014cc:	4b0c      	ldr	r3, [pc, #48]	; (8001500 <TIMER1_Init+0x44>)
 80014ce:	2200      	movs	r2, #0
 80014d0:	601a      	str	r2, [r3, #0]
	SET_BIT(TIMER1->CR1,7); /* Auto reload pre-load enable */
 80014d2:	4b0b      	ldr	r3, [pc, #44]	; (8001500 <TIMER1_Init+0x44>)
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	4a0a      	ldr	r2, [pc, #40]	; (8001500 <TIMER1_Init+0x44>)
 80014d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80014dc:	6013      	str	r3, [r2, #0]
	TIMER1->CR1 |= ((Copy_Direction) << 4); /* Set the direction up or down */
 80014de:	4b08      	ldr	r3, [pc, #32]	; (8001500 <TIMER1_Init+0x44>)
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	79fa      	ldrb	r2, [r7, #7]
 80014e4:	0112      	lsls	r2, r2, #4
 80014e6:	4611      	mov	r1, r2
 80014e8:	4a05      	ldr	r2, [pc, #20]	; (8001500 <TIMER1_Init+0x44>)
 80014ea:	430b      	orrs	r3, r1
 80014ec:	6013      	str	r3, [r2, #0]
	TIMER1->PSC = ( Copy_u16Prescaler - 1 ) ;
 80014ee:	88bb      	ldrh	r3, [r7, #4]
 80014f0:	1e5a      	subs	r2, r3, #1
 80014f2:	4b03      	ldr	r3, [pc, #12]	; (8001500 <TIMER1_Init+0x44>)
 80014f4:	629a      	str	r2, [r3, #40]	; 0x28
}
 80014f6:	bf00      	nop
 80014f8:	370c      	adds	r7, #12
 80014fa:	46bd      	mov	sp, r7
 80014fc:	bc80      	pop	{r7}
 80014fe:	4770      	bx	lr
 8001500:	40012c00 	.word	0x40012c00

08001504 <TIMER1_InitPwmChannel>:

void TIMER1_InitPwmChannel(PWM_CHANNEL Copy_PwmChannel)
{
 8001504:	b480      	push	{r7}
 8001506:	b083      	sub	sp, #12
 8001508:	af00      	add	r7, sp, #0
 800150a:	4603      	mov	r3, r0
 800150c:	71fb      	strb	r3, [r7, #7]
	switch(Copy_PwmChannel)
 800150e:	79fb      	ldrb	r3, [r7, #7]
 8001510:	2b03      	cmp	r3, #3
 8001512:	f200 808d 	bhi.w	8001630 <TIMER1_InitPwmChannel+0x12c>
 8001516:	a201      	add	r2, pc, #4	; (adr r2, 800151c <TIMER1_InitPwmChannel+0x18>)
 8001518:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800151c:	0800152d 	.word	0x0800152d
 8001520:	08001577 	.word	0x08001577
 8001524:	080015b5 	.word	0x080015b5
 8001528:	080015f3 	.word	0x080015f3
	{
	case TIMER1_PWM_CHANNEL1:
		SET_BIT(TIMER1->CCMR1,3);
 800152c:	4b43      	ldr	r3, [pc, #268]	; (800163c <TIMER1_InitPwmChannel+0x138>)
 800152e:	699b      	ldr	r3, [r3, #24]
 8001530:	4a42      	ldr	r2, [pc, #264]	; (800163c <TIMER1_InitPwmChannel+0x138>)
 8001532:	f043 0308 	orr.w	r3, r3, #8
 8001536:	6193      	str	r3, [r2, #24]
		CLR_BIT(TIMER1->CCMR1,0);  /* Channel is output compare */ /* Output compare preload enable */
 8001538:	4b40      	ldr	r3, [pc, #256]	; (800163c <TIMER1_InitPwmChannel+0x138>)
 800153a:	699b      	ldr	r3, [r3, #24]
 800153c:	4a3f      	ldr	r2, [pc, #252]	; (800163c <TIMER1_InitPwmChannel+0x138>)
 800153e:	f023 0301 	bic.w	r3, r3, #1
 8001542:	6193      	str	r3, [r2, #24]
		CLR_BIT(TIMER1->CCMR1,1);  /* Channel is output compare */ /* Output compare preload enable */
 8001544:	4b3d      	ldr	r3, [pc, #244]	; (800163c <TIMER1_InitPwmChannel+0x138>)
 8001546:	699b      	ldr	r3, [r3, #24]
 8001548:	4a3c      	ldr	r2, [pc, #240]	; (800163c <TIMER1_InitPwmChannel+0x138>)
 800154a:	f023 0302 	bic.w	r3, r3, #2
 800154e:	6193      	str	r3, [r2, #24]
		TIMER1->CCMR1 |= (0b111 << 4); /* PWM mode 2 */
 8001550:	4b3a      	ldr	r3, [pc, #232]	; (800163c <TIMER1_InitPwmChannel+0x138>)
 8001552:	699b      	ldr	r3, [r3, #24]
 8001554:	4a39      	ldr	r2, [pc, #228]	; (800163c <TIMER1_InitPwmChannel+0x138>)
 8001556:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 800155a:	6193      	str	r3, [r2, #24]
		CLR_BIT(TIMER1->CCER,1); /* high output polarity */
 800155c:	4b37      	ldr	r3, [pc, #220]	; (800163c <TIMER1_InitPwmChannel+0x138>)
 800155e:	6a1b      	ldr	r3, [r3, #32]
 8001560:	4a36      	ldr	r2, [pc, #216]	; (800163c <TIMER1_InitPwmChannel+0x138>)
 8001562:	f023 0302 	bic.w	r3, r3, #2
 8001566:	6213      	str	r3, [r2, #32]
		SET_BIT(TIMER1->CCER,0); /* Output enable */
 8001568:	4b34      	ldr	r3, [pc, #208]	; (800163c <TIMER1_InitPwmChannel+0x138>)
 800156a:	6a1b      	ldr	r3, [r3, #32]
 800156c:	4a33      	ldr	r2, [pc, #204]	; (800163c <TIMER1_InitPwmChannel+0x138>)
 800156e:	f043 0301 	orr.w	r3, r3, #1
 8001572:	6213      	str	r3, [r2, #32]
		break;
 8001574:	e05c      	b.n	8001630 <TIMER1_InitPwmChannel+0x12c>

	case TIMER1_PWM_CHANNEL2:
		TIMER1->CCMR1 &= ~(0b11<<8);
 8001576:	4b31      	ldr	r3, [pc, #196]	; (800163c <TIMER1_InitPwmChannel+0x138>)
 8001578:	699b      	ldr	r3, [r3, #24]
 800157a:	4a30      	ldr	r2, [pc, #192]	; (800163c <TIMER1_InitPwmChannel+0x138>)
 800157c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001580:	6193      	str	r3, [r2, #24]
		SET_BIT(TIMER1->CCMR1,11);
 8001582:	4b2e      	ldr	r3, [pc, #184]	; (800163c <TIMER1_InitPwmChannel+0x138>)
 8001584:	699b      	ldr	r3, [r3, #24]
 8001586:	4a2d      	ldr	r2, [pc, #180]	; (800163c <TIMER1_InitPwmChannel+0x138>)
 8001588:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800158c:	6193      	str	r3, [r2, #24]
		TIMER1->CCMR1 |= (0b111 << 12);
 800158e:	4b2b      	ldr	r3, [pc, #172]	; (800163c <TIMER1_InitPwmChannel+0x138>)
 8001590:	699b      	ldr	r3, [r3, #24]
 8001592:	4a2a      	ldr	r2, [pc, #168]	; (800163c <TIMER1_InitPwmChannel+0x138>)
 8001594:	f443 43e0 	orr.w	r3, r3, #28672	; 0x7000
 8001598:	6193      	str	r3, [r2, #24]
		CLR_BIT(TIMER1->CCER,5);
 800159a:	4b28      	ldr	r3, [pc, #160]	; (800163c <TIMER1_InitPwmChannel+0x138>)
 800159c:	6a1b      	ldr	r3, [r3, #32]
 800159e:	4a27      	ldr	r2, [pc, #156]	; (800163c <TIMER1_InitPwmChannel+0x138>)
 80015a0:	f023 0320 	bic.w	r3, r3, #32
 80015a4:	6213      	str	r3, [r2, #32]
		SET_BIT(TIMER1->CCER,4);
 80015a6:	4b25      	ldr	r3, [pc, #148]	; (800163c <TIMER1_InitPwmChannel+0x138>)
 80015a8:	6a1b      	ldr	r3, [r3, #32]
 80015aa:	4a24      	ldr	r2, [pc, #144]	; (800163c <TIMER1_InitPwmChannel+0x138>)
 80015ac:	f043 0310 	orr.w	r3, r3, #16
 80015b0:	6213      	str	r3, [r2, #32]
		break;
 80015b2:	e03d      	b.n	8001630 <TIMER1_InitPwmChannel+0x12c>

	case TIMER1_PWM_CHANNEL3:
		TIMER1->CCMR2 &= ~(0b11);
 80015b4:	4b21      	ldr	r3, [pc, #132]	; (800163c <TIMER1_InitPwmChannel+0x138>)
 80015b6:	69db      	ldr	r3, [r3, #28]
 80015b8:	4a20      	ldr	r2, [pc, #128]	; (800163c <TIMER1_InitPwmChannel+0x138>)
 80015ba:	f023 0303 	bic.w	r3, r3, #3
 80015be:	61d3      	str	r3, [r2, #28]
		SET_BIT(TIMER1->CCMR2,3);
 80015c0:	4b1e      	ldr	r3, [pc, #120]	; (800163c <TIMER1_InitPwmChannel+0x138>)
 80015c2:	69db      	ldr	r3, [r3, #28]
 80015c4:	4a1d      	ldr	r2, [pc, #116]	; (800163c <TIMER1_InitPwmChannel+0x138>)
 80015c6:	f043 0308 	orr.w	r3, r3, #8
 80015ca:	61d3      	str	r3, [r2, #28]
		TIMER1->CCMR2 |= (0b111 << 4);
 80015cc:	4b1b      	ldr	r3, [pc, #108]	; (800163c <TIMER1_InitPwmChannel+0x138>)
 80015ce:	69db      	ldr	r3, [r3, #28]
 80015d0:	4a1a      	ldr	r2, [pc, #104]	; (800163c <TIMER1_InitPwmChannel+0x138>)
 80015d2:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 80015d6:	61d3      	str	r3, [r2, #28]
		CLR_BIT(TIMER1->CCER,9);
 80015d8:	4b18      	ldr	r3, [pc, #96]	; (800163c <TIMER1_InitPwmChannel+0x138>)
 80015da:	6a1b      	ldr	r3, [r3, #32]
 80015dc:	4a17      	ldr	r2, [pc, #92]	; (800163c <TIMER1_InitPwmChannel+0x138>)
 80015de:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80015e2:	6213      	str	r3, [r2, #32]
		SET_BIT(TIMER1->CCER,8);
 80015e4:	4b15      	ldr	r3, [pc, #84]	; (800163c <TIMER1_InitPwmChannel+0x138>)
 80015e6:	6a1b      	ldr	r3, [r3, #32]
 80015e8:	4a14      	ldr	r2, [pc, #80]	; (800163c <TIMER1_InitPwmChannel+0x138>)
 80015ea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80015ee:	6213      	str	r3, [r2, #32]
		break;
 80015f0:	e01e      	b.n	8001630 <TIMER1_InitPwmChannel+0x12c>

	case TIMER1_PWM_CHANNEL4:
		TIMER1->CCMR2 &= ~(0b11<<8);
 80015f2:	4b12      	ldr	r3, [pc, #72]	; (800163c <TIMER1_InitPwmChannel+0x138>)
 80015f4:	69db      	ldr	r3, [r3, #28]
 80015f6:	4a11      	ldr	r2, [pc, #68]	; (800163c <TIMER1_InitPwmChannel+0x138>)
 80015f8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80015fc:	61d3      	str	r3, [r2, #28]
		SET_BIT(TIMER1->CCMR2,11);
 80015fe:	4b0f      	ldr	r3, [pc, #60]	; (800163c <TIMER1_InitPwmChannel+0x138>)
 8001600:	69db      	ldr	r3, [r3, #28]
 8001602:	4a0e      	ldr	r2, [pc, #56]	; (800163c <TIMER1_InitPwmChannel+0x138>)
 8001604:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001608:	61d3      	str	r3, [r2, #28]
		TIMER1->CCMR2 |= (0b111 << 12);
 800160a:	4b0c      	ldr	r3, [pc, #48]	; (800163c <TIMER1_InitPwmChannel+0x138>)
 800160c:	69db      	ldr	r3, [r3, #28]
 800160e:	4a0b      	ldr	r2, [pc, #44]	; (800163c <TIMER1_InitPwmChannel+0x138>)
 8001610:	f443 43e0 	orr.w	r3, r3, #28672	; 0x7000
 8001614:	61d3      	str	r3, [r2, #28]
		CLR_BIT(TIMER1->CCER,13);
 8001616:	4b09      	ldr	r3, [pc, #36]	; (800163c <TIMER1_InitPwmChannel+0x138>)
 8001618:	6a1b      	ldr	r3, [r3, #32]
 800161a:	4a08      	ldr	r2, [pc, #32]	; (800163c <TIMER1_InitPwmChannel+0x138>)
 800161c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001620:	6213      	str	r3, [r2, #32]
		SET_BIT(TIMER1->CCER,12);
 8001622:	4b06      	ldr	r3, [pc, #24]	; (800163c <TIMER1_InitPwmChannel+0x138>)
 8001624:	6a1b      	ldr	r3, [r3, #32]
 8001626:	4a05      	ldr	r2, [pc, #20]	; (800163c <TIMER1_InitPwmChannel+0x138>)
 8001628:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800162c:	6213      	str	r3, [r2, #32]
		break;
 800162e:	bf00      	nop
	}

}
 8001630:	bf00      	nop
 8001632:	370c      	adds	r7, #12
 8001634:	46bd      	mov	sp, r7
 8001636:	bc80      	pop	{r7}
 8001638:	4770      	bx	lr
 800163a:	bf00      	nop
 800163c:	40012c00 	.word	0x40012c00

08001640 <TIMER1_SetPWM>:

void TIMER1_SetPWM(PWM_CHANNEL Copy_PwmChannel , u32 Copy_PwmFrequency , u8 Copy_PwmDutyCycle)
{
 8001640:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001644:	b08a      	sub	sp, #40	; 0x28
 8001646:	af00      	add	r7, sp, #0
 8001648:	4603      	mov	r3, r0
 800164a:	61b9      	str	r1, [r7, #24]
 800164c:	77fb      	strb	r3, [r7, #31]
 800164e:	4613      	mov	r3, r2
 8001650:	77bb      	strb	r3, [r7, #30]
	if( Copy_PwmDutyCycle < 101)
 8001652:	7fbb      	ldrb	r3, [r7, #30]
 8001654:	2b64      	cmp	r3, #100	; 0x64
 8001656:	d873      	bhi.n	8001740 <TIMER1_SetPWM+0x100>
	{	//							((8000000/(10000*1)*100)-1
	    u16 ARR_Value = ((u16)(u64)(F_CPU /((u64)Copy_PwmFrequency *(TIMER1->PSC + 1))*100) - 1);
 8001658:	69bb      	ldr	r3, [r7, #24]
 800165a:	2200      	movs	r2, #0
 800165c:	60bb      	str	r3, [r7, #8]
 800165e:	60fa      	str	r2, [r7, #12]
 8001660:	4b3a      	ldr	r3, [pc, #232]	; (800174c <TIMER1_SetPWM+0x10c>)
 8001662:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001664:	3301      	adds	r3, #1
 8001666:	2200      	movs	r2, #0
 8001668:	613b      	str	r3, [r7, #16]
 800166a:	617a      	str	r2, [r7, #20]
 800166c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001670:	460b      	mov	r3, r1
 8001672:	693a      	ldr	r2, [r7, #16]
 8001674:	fb02 f203 	mul.w	r2, r2, r3
 8001678:	697b      	ldr	r3, [r7, #20]
 800167a:	4684      	mov	ip, r0
 800167c:	fb0c f303 	mul.w	r3, ip, r3
 8001680:	4413      	add	r3, r2
 8001682:	4602      	mov	r2, r0
 8001684:	6939      	ldr	r1, [r7, #16]
 8001686:	fba2 8901 	umull	r8, r9, r2, r1
 800168a:	444b      	add	r3, r9
 800168c:	4699      	mov	r9, r3
 800168e:	4642      	mov	r2, r8
 8001690:	464b      	mov	r3, r9
 8001692:	482f      	ldr	r0, [pc, #188]	; (8001750 <TIMER1_SetPWM+0x110>)
 8001694:	f04f 0100 	mov.w	r1, #0
 8001698:	f7fe fd6a 	bl	8000170 <__aeabi_uldivmod>
 800169c:	4602      	mov	r2, r0
 800169e:	460b      	mov	r3, r1
 80016a0:	b293      	uxth	r3, r2
 80016a2:	461a      	mov	r2, r3
 80016a4:	0092      	lsls	r2, r2, #2
 80016a6:	4413      	add	r3, r2
 80016a8:	461a      	mov	r2, r3
 80016aa:	0091      	lsls	r1, r2, #2
 80016ac:	461a      	mov	r2, r3
 80016ae:	460b      	mov	r3, r1
 80016b0:	4413      	add	r3, r2
 80016b2:	009b      	lsls	r3, r3, #2
 80016b4:	b29b      	uxth	r3, r3
 80016b6:	3b01      	subs	r3, #1
 80016b8:	84bb      	strh	r3, [r7, #36]	; 0x24
	    u16 CCR_Value;
	    if(Copy_PwmDutyCycle!=0){
 80016ba:	7fbb      	ldrb	r3, [r7, #30]
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d024      	beq.n	800170a <TIMER1_SetPWM+0xca>
	    	CCR_Value = ((u16)(((u64)Copy_PwmDutyCycle * (ARR_Value + 1)) / 100)-1);
 80016c0:	7fbb      	ldrb	r3, [r7, #30]
 80016c2:	2200      	movs	r2, #0
 80016c4:	603b      	str	r3, [r7, #0]
 80016c6:	607a      	str	r2, [r7, #4]
 80016c8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80016ca:	3301      	adds	r3, #1
 80016cc:	17da      	asrs	r2, r3, #31
 80016ce:	469a      	mov	sl, r3
 80016d0:	4693      	mov	fp, r2
 80016d2:	e9d7 0100 	ldrd	r0, r1, [r7]
 80016d6:	460b      	mov	r3, r1
 80016d8:	fb0a f203 	mul.w	r2, sl, r3
 80016dc:	4603      	mov	r3, r0
 80016de:	fb03 f30b 	mul.w	r3, r3, fp
 80016e2:	4413      	add	r3, r2
 80016e4:	4602      	mov	r2, r0
 80016e6:	fba2 450a 	umull	r4, r5, r2, sl
 80016ea:	442b      	add	r3, r5
 80016ec:	461d      	mov	r5, r3
 80016ee:	f04f 0264 	mov.w	r2, #100	; 0x64
 80016f2:	f04f 0300 	mov.w	r3, #0
 80016f6:	4620      	mov	r0, r4
 80016f8:	4629      	mov	r1, r5
 80016fa:	f7fe fd39 	bl	8000170 <__aeabi_uldivmod>
 80016fe:	4602      	mov	r2, r0
 8001700:	460b      	mov	r3, r1
 8001702:	b293      	uxth	r3, r2
 8001704:	3b01      	subs	r3, #1
 8001706:	84fb      	strh	r3, [r7, #38]	; 0x26
 8001708:	e001      	b.n	800170e <TIMER1_SetPWM+0xce>
	    }
	    else{
	    	CCR_Value=0;
 800170a:	2300      	movs	r3, #0
 800170c:	84fb      	strh	r3, [r7, #38]	; 0x26
	    }
	    //ARR_Value/=10;
	    //CCR_Value/=10;
	    if(Copy_PwmChannel>=TIMER1_PWM_CHANNEL1 && Copy_PwmChannel<=TIMER1_PWM_CHANNEL4){
 800170e:	7ffb      	ldrb	r3, [r7, #31]
 8001710:	2b03      	cmp	r3, #3
 8001712:	d815      	bhi.n	8001740 <TIMER1_SetPWM+0x100>
			TIMER1->ARR = ARR_Value ; 																								/* Setup Frequency */
 8001714:	4a0d      	ldr	r2, [pc, #52]	; (800174c <TIMER1_SetPWM+0x10c>)
 8001716:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001718:	62d3      	str	r3, [r2, #44]	; 0x2c
			TIMER1->CCR[Copy_PwmChannel] = CCR_Value; 																							/* Setup Duty Cycle */
 800171a:	490c      	ldr	r1, [pc, #48]	; (800174c <TIMER1_SetPWM+0x10c>)
 800171c:	7ffb      	ldrb	r3, [r7, #31]
 800171e:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8001720:	330c      	adds	r3, #12
 8001722:	009b      	lsls	r3, r3, #2
 8001724:	440b      	add	r3, r1
 8001726:	605a      	str	r2, [r3, #4]
			SET_BIT(TIMER1->BDTR,15); 																						/* Enable MOE */
 8001728:	4b08      	ldr	r3, [pc, #32]	; (800174c <TIMER1_SetPWM+0x10c>)
 800172a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800172c:	4a07      	ldr	r2, [pc, #28]	; (800174c <TIMER1_SetPWM+0x10c>)
 800172e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001732:	6453      	str	r3, [r2, #68]	; 0x44
			SET_BIT(TIMER1->CR1,0); 																						/* Enable the timer */
 8001734:	4b05      	ldr	r3, [pc, #20]	; (800174c <TIMER1_SetPWM+0x10c>)
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	4a04      	ldr	r2, [pc, #16]	; (800174c <TIMER1_SetPWM+0x10c>)
 800173a:	f043 0301 	orr.w	r3, r3, #1
 800173e:	6013      	str	r3, [r2, #0]
	    }

	}

}
 8001740:	bf00      	nop
 8001742:	3728      	adds	r7, #40	; 0x28
 8001744:	46bd      	mov	sp, r7
 8001746:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800174a:	bf00      	nop
 800174c:	40012c00 	.word	0x40012c00
 8001750:	007a1200 	.word	0x007a1200

08001754 <TIM1_UP_IRQHandler>:

/*******************************************************************************
*                       Interrupt Service Routines                            *
*******************************************************************************/
void TIM1_UP_IRQHandler(void)
{
 8001754:	b580      	push	{r7, lr}
 8001756:	af00      	add	r7, sp, #0
	if(TIMER1_callback != NULL)
 8001758:	4b07      	ldr	r3, [pc, #28]	; (8001778 <TIM1_UP_IRQHandler+0x24>)
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	2b00      	cmp	r3, #0
 800175e:	d002      	beq.n	8001766 <TIM1_UP_IRQHandler+0x12>
	{
		TIMER1_callback();
 8001760:	4b05      	ldr	r3, [pc, #20]	; (8001778 <TIM1_UP_IRQHandler+0x24>)
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	4798      	blx	r3
	}
	CLR_BIT(TIMER1->SR,0); /* Clear the update flag */
 8001766:	4b05      	ldr	r3, [pc, #20]	; (800177c <TIM1_UP_IRQHandler+0x28>)
 8001768:	691b      	ldr	r3, [r3, #16]
 800176a:	4a04      	ldr	r2, [pc, #16]	; (800177c <TIM1_UP_IRQHandler+0x28>)
 800176c:	f023 0301 	bic.w	r3, r3, #1
 8001770:	6113      	str	r3, [r2, #16]
}
 8001772:	bf00      	nop
 8001774:	bd80      	pop	{r7, pc}
 8001776:	bf00      	nop
 8001778:	2000011c 	.word	0x2000011c
 800177c:	40012c00 	.word	0x40012c00

08001780 <UART_Init>:
typedef void(*fptr_t)(void);
static fptr_t UART_SetCallbacks[3] = {NULL,NULL,NULL};

extern volatile UART_DATA;

void UART_Init(){
 8001780:	b480      	push	{r7}
 8001782:	af00      	add	r7, sp, #0
		#if UART2_EN==1

		//UART2->CR1=0;
		//UART2->CR2=0;
		//UART2->CR3=0;
		SET_BIT(UART2->CR1,13); /* Enable the UART */
 8001784:	4b28      	ldr	r3, [pc, #160]	; (8001828 <UART_Init+0xa8>)
 8001786:	68db      	ldr	r3, [r3, #12]
 8001788:	4a27      	ldr	r2, [pc, #156]	; (8001828 <UART_Init+0xa8>)
 800178a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800178e:	60d3      	str	r3, [r2, #12]
		UART2->CR1|= (UART2_DataSize<<12);
 8001790:	4b25      	ldr	r3, [pc, #148]	; (8001828 <UART_Init+0xa8>)
 8001792:	4a25      	ldr	r2, [pc, #148]	; (8001828 <UART_Init+0xa8>)
 8001794:	68db      	ldr	r3, [r3, #12]
 8001796:	60d3      	str	r3, [r2, #12]
		UART2->CR2|= (UART2_StopBit<<12);
 8001798:	4b23      	ldr	r3, [pc, #140]	; (8001828 <UART_Init+0xa8>)
 800179a:	4a23      	ldr	r2, [pc, #140]	; (8001828 <UART_Init+0xa8>)
 800179c:	691b      	ldr	r3, [r3, #16]
 800179e:	6113      	str	r3, [r2, #16]
		UART2->CR1|= (UART2_Parity_bit<<9);
 80017a0:	4b21      	ldr	r3, [pc, #132]	; (8001828 <UART_Init+0xa8>)
 80017a2:	4a21      	ldr	r2, [pc, #132]	; (8001828 <UART_Init+0xa8>)
 80017a4:	68db      	ldr	r3, [r3, #12]
 80017a6:	60d3      	str	r3, [r2, #12]
		UART2->CR1|= ((UART2_Recive_Method& 0b0011)<< 5);
 80017a8:	4b1f      	ldr	r3, [pc, #124]	; (8001828 <UART_Init+0xa8>)
 80017aa:	4a1f      	ldr	r2, [pc, #124]	; (8001828 <UART_Init+0xa8>)
 80017ac:	68db      	ldr	r3, [r3, #12]
 80017ae:	60d3      	str	r3, [r2, #12]
		UART2->CR1|= (UART2_Dublex_Mode<<2);  /* Transmit receive Enable */
 80017b0:	4b1d      	ldr	r3, [pc, #116]	; (8001828 <UART_Init+0xa8>)
 80017b2:	68db      	ldr	r3, [r3, #12]
 80017b4:	4a1c      	ldr	r2, [pc, #112]	; (8001828 <UART_Init+0xa8>)
 80017b6:	f043 030c 	orr.w	r3, r3, #12
 80017ba:	60d3      	str	r3, [r2, #12]
		UART2->BRR= UART2_BUAD_Rate;
 80017bc:	4b1a      	ldr	r3, [pc, #104]	; (8001828 <UART_Init+0xa8>)
 80017be:	f44f 72d0 	mov.w	r2, #416	; 0x1a0
 80017c2:	609a      	str	r2, [r3, #8]
		UART2->CR3|=( (UART2_Recive_Method>>2)<<6);
 80017c4:	4b18      	ldr	r3, [pc, #96]	; (8001828 <UART_Init+0xa8>)
 80017c6:	695b      	ldr	r3, [r3, #20]
 80017c8:	4a17      	ldr	r2, [pc, #92]	; (8001828 <UART_Init+0xa8>)
 80017ca:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80017ce:	6153      	str	r3, [r2, #20]

		#if UART3_EN==1

		//UART3->CR1=0;
		//UART3->CR2=0;
		SET_BIT(UART3->CR1,13); /* Enable the UART */
 80017d0:	4b16      	ldr	r3, [pc, #88]	; (800182c <UART_Init+0xac>)
 80017d2:	68db      	ldr	r3, [r3, #12]
 80017d4:	4a15      	ldr	r2, [pc, #84]	; (800182c <UART_Init+0xac>)
 80017d6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80017da:	60d3      	str	r3, [r2, #12]
		UART3->CR1|= (UART3_DataSize<<12);
 80017dc:	4b13      	ldr	r3, [pc, #76]	; (800182c <UART_Init+0xac>)
 80017de:	4a13      	ldr	r2, [pc, #76]	; (800182c <UART_Init+0xac>)
 80017e0:	68db      	ldr	r3, [r3, #12]
 80017e2:	60d3      	str	r3, [r2, #12]
		UART3->CR2|= (UART3_StopBit<<12);
 80017e4:	4b11      	ldr	r3, [pc, #68]	; (800182c <UART_Init+0xac>)
 80017e6:	4a11      	ldr	r2, [pc, #68]	; (800182c <UART_Init+0xac>)
 80017e8:	691b      	ldr	r3, [r3, #16]
 80017ea:	6113      	str	r3, [r2, #16]
		UART3->CR1|= (UART3_Parity_bit<<9);
 80017ec:	4b0f      	ldr	r3, [pc, #60]	; (800182c <UART_Init+0xac>)
 80017ee:	4a0f      	ldr	r2, [pc, #60]	; (800182c <UART_Init+0xac>)
 80017f0:	68db      	ldr	r3, [r3, #12]
 80017f2:	60d3      	str	r3, [r2, #12]
		UART3->CR1|= ((UART3_Recive_Method& 0b0011)<< 5);
 80017f4:	4b0d      	ldr	r3, [pc, #52]	; (800182c <UART_Init+0xac>)
 80017f6:	68db      	ldr	r3, [r3, #12]
 80017f8:	4a0c      	ldr	r2, [pc, #48]	; (800182c <UART_Init+0xac>)
 80017fa:	f043 0320 	orr.w	r3, r3, #32
 80017fe:	60d3      	str	r3, [r2, #12]
		UART3->CR1|= (UART3_Dublex_Mode<<2);  /* Transmit receive Enable */
 8001800:	4b0a      	ldr	r3, [pc, #40]	; (800182c <UART_Init+0xac>)
 8001802:	68db      	ldr	r3, [r3, #12]
 8001804:	4a09      	ldr	r2, [pc, #36]	; (800182c <UART_Init+0xac>)
 8001806:	f043 030c 	orr.w	r3, r3, #12
 800180a:	60d3      	str	r3, [r2, #12]
		UART3->BRR= UART3_BUAD_Rate;
 800180c:	4b07      	ldr	r3, [pc, #28]	; (800182c <UART_Init+0xac>)
 800180e:	f44f 72d0 	mov.w	r2, #416	; 0x1a0
 8001812:	609a      	str	r2, [r3, #8]
		UART3->CR3|=( (UART3_Recive_Method>>2)<<6);
 8001814:	4b05      	ldr	r3, [pc, #20]	; (800182c <UART_Init+0xac>)
 8001816:	695b      	ldr	r3, [r3, #20]
 8001818:	4a04      	ldr	r2, [pc, #16]	; (800182c <UART_Init+0xac>)
 800181a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800181e:	6153      	str	r3, [r2, #20]
		#endif
}
 8001820:	bf00      	nop
 8001822:	46bd      	mov	sp, r7
 8001824:	bc80      	pop	{r7}
 8001826:	4770      	bx	lr
 8001828:	40004400 	.word	0x40004400
 800182c:	40004800 	.word	0x40004800

08001830 <UART_SendByte>:

void UART_SendByte(UART_ID Copy_UartNumber, u8 Copy_u8DataByte){
 8001830:	b480      	push	{r7}
 8001832:	b083      	sub	sp, #12
 8001834:	af00      	add	r7, sp, #0
 8001836:	4603      	mov	r3, r0
 8001838:	460a      	mov	r2, r1
 800183a:	71fb      	strb	r3, [r7, #7]
 800183c:	4613      	mov	r3, r2
 800183e:	71bb      	strb	r3, [r7, #6]

	CLEAR_BIT(UART_IDS[Copy_UartNumber]->SR,6);
 8001840:	79fb      	ldrb	r3, [r7, #7]
 8001842:	4a10      	ldr	r2, [pc, #64]	; (8001884 <UART_SendByte+0x54>)
 8001844:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001848:	681a      	ldr	r2, [r3, #0]
 800184a:	79fb      	ldrb	r3, [r7, #7]
 800184c:	490d      	ldr	r1, [pc, #52]	; (8001884 <UART_SendByte+0x54>)
 800184e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001852:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001856:	601a      	str	r2, [r3, #0]
	UART_IDS[Copy_UartNumber]->DR=Copy_u8DataByte;
 8001858:	79fb      	ldrb	r3, [r7, #7]
 800185a:	4a0a      	ldr	r2, [pc, #40]	; (8001884 <UART_SendByte+0x54>)
 800185c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001860:	79ba      	ldrb	r2, [r7, #6]
 8001862:	605a      	str	r2, [r3, #4]
	while(GET_BIT(UART_IDS[Copy_UartNumber]->SR,6) == 0); /* Wait if the previous Transmission isn't completed */
 8001864:	bf00      	nop
 8001866:	79fb      	ldrb	r3, [r7, #7]
 8001868:	4a06      	ldr	r2, [pc, #24]	; (8001884 <UART_SendByte+0x54>)
 800186a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001874:	2b00      	cmp	r3, #0
 8001876:	d0f6      	beq.n	8001866 <UART_SendByte+0x36>

}
 8001878:	bf00      	nop
 800187a:	bf00      	nop
 800187c:	370c      	adds	r7, #12
 800187e:	46bd      	mov	sp, r7
 8001880:	bc80      	pop	{r7}
 8001882:	4770      	bx	lr
 8001884:	20000074 	.word	0x20000074

08001888 <UART_SetCallBack>:
}

/*******************************************************************************
* Function Name:		UART_u8SetCallBack
* Description:			Function to set the ISR */
void UART_SetCallBack(UART_ID Copy_UartNumber, void(*Copy_pfCallback)(void)){
 8001888:	b480      	push	{r7}
 800188a:	b083      	sub	sp, #12
 800188c:	af00      	add	r7, sp, #0
 800188e:	4603      	mov	r3, r0
 8001890:	6039      	str	r1, [r7, #0]
 8001892:	71fb      	strb	r3, [r7, #7]

	if(Copy_pfCallback != NULL)
 8001894:	683b      	ldr	r3, [r7, #0]
 8001896:	2b00      	cmp	r3, #0
 8001898:	d004      	beq.n	80018a4 <UART_SetCallBack+0x1c>
	{
		UART_SetCallbacks[Copy_UartNumber] = Copy_pfCallback;
 800189a:	79fb      	ldrb	r3, [r7, #7]
 800189c:	4904      	ldr	r1, [pc, #16]	; (80018b0 <UART_SetCallBack+0x28>)
 800189e:	683a      	ldr	r2, [r7, #0]
 80018a0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	}
}
 80018a4:	bf00      	nop
 80018a6:	370c      	adds	r7, #12
 80018a8:	46bd      	mov	sp, r7
 80018aa:	bc80      	pop	{r7}
 80018ac:	4770      	bx	lr
 80018ae:	bf00      	nop
 80018b0:	20000120 	.word	0x20000120

080018b4 <USART1_IRQHandler>:


void USART1_IRQHandler(void)
{
 80018b4:	b580      	push	{r7, lr}
 80018b6:	af00      	add	r7, sp, #0
	CLEAR_BIT(UART1->SR,5); /* Clear the flag */
 80018b8:	4b07      	ldr	r3, [pc, #28]	; (80018d8 <USART1_IRQHandler+0x24>)
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	4a06      	ldr	r2, [pc, #24]	; (80018d8 <USART1_IRQHandler+0x24>)
 80018be:	f023 0320 	bic.w	r3, r3, #32
 80018c2:	6013      	str	r3, [r2, #0]
	if(UART_SetCallbacks[0] != NULL)
 80018c4:	4b05      	ldr	r3, [pc, #20]	; (80018dc <USART1_IRQHandler+0x28>)
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d002      	beq.n	80018d2 <USART1_IRQHandler+0x1e>
	{
		UART_SetCallbacks[0]();
 80018cc:	4b03      	ldr	r3, [pc, #12]	; (80018dc <USART1_IRQHandler+0x28>)
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	4798      	blx	r3
	}
}
 80018d2:	bf00      	nop
 80018d4:	bd80      	pop	{r7, pc}
 80018d6:	bf00      	nop
 80018d8:	40013800 	.word	0x40013800
 80018dc:	20000120 	.word	0x20000120

080018e0 <USART2_IRQHandler>:

void USART2_IRQHandler(void)
{
 80018e0:	b580      	push	{r7, lr}
 80018e2:	af00      	add	r7, sp, #0
	CLEAR_BIT(UART2->SR,5); /* Clear the flag */
 80018e4:	4b07      	ldr	r3, [pc, #28]	; (8001904 <USART2_IRQHandler+0x24>)
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	4a06      	ldr	r2, [pc, #24]	; (8001904 <USART2_IRQHandler+0x24>)
 80018ea:	f023 0320 	bic.w	r3, r3, #32
 80018ee:	6013      	str	r3, [r2, #0]
	if(UART_SetCallbacks[1] != NULL)
 80018f0:	4b05      	ldr	r3, [pc, #20]	; (8001908 <USART2_IRQHandler+0x28>)
 80018f2:	685b      	ldr	r3, [r3, #4]
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d002      	beq.n	80018fe <USART2_IRQHandler+0x1e>
	{
		UART_SetCallbacks[1]();
 80018f8:	4b03      	ldr	r3, [pc, #12]	; (8001908 <USART2_IRQHandler+0x28>)
 80018fa:	685b      	ldr	r3, [r3, #4]
 80018fc:	4798      	blx	r3
	}
}
 80018fe:	bf00      	nop
 8001900:	bd80      	pop	{r7, pc}
 8001902:	bf00      	nop
 8001904:	40004400 	.word	0x40004400
 8001908:	20000120 	.word	0x20000120

0800190c <USART3_IRQHandler>:

void USART3_IRQHandler(void)
{
 800190c:	b580      	push	{r7, lr}
 800190e:	af00      	add	r7, sp, #0
	UART_DATA=(u8)UART_IDS[2]->DR;
 8001910:	4b0a      	ldr	r3, [pc, #40]	; (800193c <USART3_IRQHandler+0x30>)
 8001912:	689b      	ldr	r3, [r3, #8]
 8001914:	685b      	ldr	r3, [r3, #4]
 8001916:	b2db      	uxtb	r3, r3
 8001918:	461a      	mov	r2, r3
 800191a:	4b09      	ldr	r3, [pc, #36]	; (8001940 <USART3_IRQHandler+0x34>)
 800191c:	601a      	str	r2, [r3, #0]
	CLEAR_BIT(UART3->SR,5); /* Clear the flag */
 800191e:	4b09      	ldr	r3, [pc, #36]	; (8001944 <USART3_IRQHandler+0x38>)
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	4a08      	ldr	r2, [pc, #32]	; (8001944 <USART3_IRQHandler+0x38>)
 8001924:	f023 0320 	bic.w	r3, r3, #32
 8001928:	6013      	str	r3, [r2, #0]
	if(UART_SetCallbacks[2]!= NULL)
 800192a:	4b07      	ldr	r3, [pc, #28]	; (8001948 <USART3_IRQHandler+0x3c>)
 800192c:	689b      	ldr	r3, [r3, #8]
 800192e:	2b00      	cmp	r3, #0
 8001930:	d002      	beq.n	8001938 <USART3_IRQHandler+0x2c>
	{
		UART_SetCallbacks[2]();
 8001932:	4b05      	ldr	r3, [pc, #20]	; (8001948 <USART3_IRQHandler+0x3c>)
 8001934:	689b      	ldr	r3, [r3, #8]
 8001936:	4798      	blx	r3
	}
}
 8001938:	bf00      	nop
 800193a:	bd80      	pop	{r7, pc}
 800193c:	20000074 	.word	0x20000074
 8001940:	20000130 	.word	0x20000130
 8001944:	40004800 	.word	0x40004800
 8001948:	20000120 	.word	0x20000120

0800194c <_delay_ms>:
 * 	SW: delay
 */
#include "LIB/ellithy_delay.h"
#include "LIB/STD_TYPES.h"
/*	for F_CPU = 8mhz */
void _delay_ms(u16 delay_in_ms){
 800194c:	b480      	push	{r7}
 800194e:	b085      	sub	sp, #20
 8001950:	af00      	add	r7, sp, #0
 8001952:	4603      	mov	r3, r0
 8001954:	80fb      	strh	r3, [r7, #6]
	u16 i,j,fact=((u16)(F_CPU/8000000u));
 8001956:	2301      	movs	r3, #1
 8001958:	817b      	strh	r3, [r7, #10]
	fact*=993;
 800195a:	897b      	ldrh	r3, [r7, #10]
 800195c:	461a      	mov	r2, r3
 800195e:	0152      	lsls	r2, r2, #5
 8001960:	1ad2      	subs	r2, r2, r3
 8001962:	0152      	lsls	r2, r2, #5
 8001964:	4413      	add	r3, r2
 8001966:	817b      	strh	r3, [r7, #10]
	for(i=0;i<delay_in_ms; i++)
 8001968:	2300      	movs	r3, #0
 800196a:	81fb      	strh	r3, [r7, #14]
 800196c:	e00d      	b.n	800198a <_delay_ms+0x3e>
	{
		for(j= 0 ; j < fact ; j++ )
 800196e:	2300      	movs	r3, #0
 8001970:	81bb      	strh	r3, [r7, #12]
 8001972:	e003      	b.n	800197c <_delay_ms+0x30>
		{
		__asm__("nop");
 8001974:	bf00      	nop
		for(j= 0 ; j < fact ; j++ )
 8001976:	89bb      	ldrh	r3, [r7, #12]
 8001978:	3301      	adds	r3, #1
 800197a:	81bb      	strh	r3, [r7, #12]
 800197c:	89ba      	ldrh	r2, [r7, #12]
 800197e:	897b      	ldrh	r3, [r7, #10]
 8001980:	429a      	cmp	r2, r3
 8001982:	d3f7      	bcc.n	8001974 <_delay_ms+0x28>
	for(i=0;i<delay_in_ms; i++)
 8001984:	89fb      	ldrh	r3, [r7, #14]
 8001986:	3301      	adds	r3, #1
 8001988:	81fb      	strh	r3, [r7, #14]
 800198a:	89fa      	ldrh	r2, [r7, #14]
 800198c:	88fb      	ldrh	r3, [r7, #6]
 800198e:	429a      	cmp	r2, r3
 8001990:	d3ed      	bcc.n	800196e <_delay_ms+0x22>
		}
	}
}
 8001992:	bf00      	nop
 8001994:	bf00      	nop
 8001996:	3714      	adds	r7, #20
 8001998:	46bd      	mov	sp, r7
 800199a:	bc80      	pop	{r7}
 800199c:	4770      	bx	lr
	...

080019a0 <fun_Direct>:
// 0 1
u8 volatile UART_DATA, Compomenent_VAL;
volatile DATA_FLAG static Flag_switch=Comonent_ID;
volatile Fun_IDS  Fun_ID ;
u8 Welcome[]="Welcome Home", Door[]="Door Opened";
void fun_Direct(){
 80019a0:	b580      	push	{r7, lr}
 80019a2:	af00      	add	r7, sp, #0
	UART_SendByte(UART_2,Compomenent_VAL);
 80019a4:	4b0b      	ldr	r3, [pc, #44]	; (80019d4 <fun_Direct+0x34>)
 80019a6:	781b      	ldrb	r3, [r3, #0]
 80019a8:	b2db      	uxtb	r3, r3
 80019aa:	4619      	mov	r1, r3
 80019ac:	2001      	movs	r0, #1
 80019ae:	f7ff ff3f 	bl	8001830 <UART_SendByte>
	if(Compomenent_VAL==5){
 80019b2:	4b08      	ldr	r3, [pc, #32]	; (80019d4 <fun_Direct+0x34>)
 80019b4:	781b      	ldrb	r3, [r3, #0]
 80019b6:	b2db      	uxtb	r3, r3
 80019b8:	2b05      	cmp	r3, #5
 80019ba:	d109      	bne.n	80019d0 <fun_Direct+0x30>
		CLCD_voidSendString(Door);
 80019bc:	4806      	ldr	r0, [pc, #24]	; (80019d8 <fun_Direct+0x38>)
 80019be:	f7fe fdc4 	bl	800054a <CLCD_voidSendString>
		CLCD_voidSetPosition(CLCD_ROW_2, CLCD_COL_1);
 80019c2:	2101      	movs	r1, #1
 80019c4:	2002      	movs	r0, #2
 80019c6:	f7fe fddc 	bl	8000582 <CLCD_voidSetPosition>
		CLCD_voidSendString(Welcome);
 80019ca:	4804      	ldr	r0, [pc, #16]	; (80019dc <fun_Direct+0x3c>)
 80019cc:	f7fe fdbd 	bl	800054a <CLCD_voidSendString>
	}
}
 80019d0:	bf00      	nop
 80019d2:	bd80      	pop	{r7, pc}
 80019d4:	20000131 	.word	0x20000131
 80019d8:	20000090 	.word	0x20000090
 80019dc:	20000080 	.word	0x20000080

080019e0 <fun_motor1>:
void fun_motor1(){
 80019e0:	b580      	push	{r7, lr}
 80019e2:	af00      	add	r7, sp, #0
	TIMER1_SetPWM(TIMER1_PWM_CHANNEL1, 100000,Compomenent_VAL );
 80019e4:	4b04      	ldr	r3, [pc, #16]	; (80019f8 <fun_motor1+0x18>)
 80019e6:	781b      	ldrb	r3, [r3, #0]
 80019e8:	b2db      	uxtb	r3, r3
 80019ea:	461a      	mov	r2, r3
 80019ec:	4903      	ldr	r1, [pc, #12]	; (80019fc <fun_motor1+0x1c>)
 80019ee:	2000      	movs	r0, #0
 80019f0:	f7ff fe26 	bl	8001640 <TIMER1_SetPWM>
}
 80019f4:	bf00      	nop
 80019f6:	bd80      	pop	{r7, pc}
 80019f8:	20000131 	.word	0x20000131
 80019fc:	000186a0 	.word	0x000186a0

08001a00 <fun_motor2>:
void fun_motor2(){
 8001a00:	b580      	push	{r7, lr}
 8001a02:	af00      	add	r7, sp, #0
	TIMER1_SetPWM(TIMER1_PWM_CHANNEL2, 100000,Compomenent_VAL );
 8001a04:	4b04      	ldr	r3, [pc, #16]	; (8001a18 <fun_motor2+0x18>)
 8001a06:	781b      	ldrb	r3, [r3, #0]
 8001a08:	b2db      	uxtb	r3, r3
 8001a0a:	461a      	mov	r2, r3
 8001a0c:	4903      	ldr	r1, [pc, #12]	; (8001a1c <fun_motor2+0x1c>)
 8001a0e:	2001      	movs	r0, #1
 8001a10:	f7ff fe16 	bl	8001640 <TIMER1_SetPWM>
}
 8001a14:	bf00      	nop
 8001a16:	bd80      	pop	{r7, pc}
 8001a18:	20000131 	.word	0x20000131
 8001a1c:	000186a0 	.word	0x000186a0

08001a20 <fun_motor3>:
void fun_motor3(){
 8001a20:	b580      	push	{r7, lr}
 8001a22:	af00      	add	r7, sp, #0
	TIMER1_SetPWM(TIMER1_PWM_CHANNEL3, 100000,Compomenent_VAL );
 8001a24:	4b04      	ldr	r3, [pc, #16]	; (8001a38 <fun_motor3+0x18>)
 8001a26:	781b      	ldrb	r3, [r3, #0]
 8001a28:	b2db      	uxtb	r3, r3
 8001a2a:	461a      	mov	r2, r3
 8001a2c:	4903      	ldr	r1, [pc, #12]	; (8001a3c <fun_motor3+0x1c>)
 8001a2e:	2002      	movs	r0, #2
 8001a30:	f7ff fe06 	bl	8001640 <TIMER1_SetPWM>
}
 8001a34:	bf00      	nop
 8001a36:	bd80      	pop	{r7, pc}
 8001a38:	20000131 	.word	0x20000131
 8001a3c:	000186a0 	.word	0x000186a0

08001a40 <fun_motor4>:
void fun_motor4(){
 8001a40:	b580      	push	{r7, lr}
 8001a42:	af00      	add	r7, sp, #0
	TIMER1_SetPWM(TIMER1_PWM_CHANNEL4, 100000,Compomenent_VAL );
 8001a44:	4b04      	ldr	r3, [pc, #16]	; (8001a58 <fun_motor4+0x18>)
 8001a46:	781b      	ldrb	r3, [r3, #0]
 8001a48:	b2db      	uxtb	r3, r3
 8001a4a:	461a      	mov	r2, r3
 8001a4c:	4903      	ldr	r1, [pc, #12]	; (8001a5c <fun_motor4+0x1c>)
 8001a4e:	2003      	movs	r0, #3
 8001a50:	f7ff fdf6 	bl	8001640 <TIMER1_SetPWM>
}
 8001a54:	bf00      	nop
 8001a56:	bd80      	pop	{r7, pc}
 8001a58:	20000131 	.word	0x20000131
 8001a5c:	000186a0 	.word	0x000186a0

08001a60 <Fun_recieve_and_determine_and_Sent>:
void Fun_recieve_and_determine_and_Sent(){
 8001a60:	b580      	push	{r7, lr}
 8001a62:	af00      	add	r7, sp, #0
	volatile DATA_FLAG static Flag=Comonent_ID;
	Flag_switch=Flag;
 8001a64:	4b36      	ldr	r3, [pc, #216]	; (8001b40 <Fun_recieve_and_determine_and_Sent+0xe0>)
 8001a66:	781b      	ldrb	r3, [r3, #0]
 8001a68:	b2da      	uxtb	r2, r3
 8001a6a:	4b36      	ldr	r3, [pc, #216]	; (8001b44 <Fun_recieve_and_determine_and_Sent+0xe4>)
 8001a6c:	701a      	strb	r2, [r3, #0]
	switch(Flag){
 8001a6e:	4b34      	ldr	r3, [pc, #208]	; (8001b40 <Fun_recieve_and_determine_and_Sent+0xe0>)
 8001a70:	781b      	ldrb	r3, [r3, #0]
 8001a72:	b2db      	uxtb	r3, r3
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d002      	beq.n	8001a7e <Fun_recieve_and_determine_and_Sent+0x1e>
 8001a78:	2b01      	cmp	r3, #1
 8001a7a:	d009      	beq.n	8001a90 <Fun_recieve_and_determine_and_Sent+0x30>
 8001a7c:	e011      	b.n	8001aa2 <Fun_recieve_and_determine_and_Sent+0x42>
        case Comonent_ID: Fun_ID=UART_DATA; Flag=Comonent_VALUE; break;
 8001a7e:	4b32      	ldr	r3, [pc, #200]	; (8001b48 <Fun_recieve_and_determine_and_Sent+0xe8>)
 8001a80:	781b      	ldrb	r3, [r3, #0]
 8001a82:	b2da      	uxtb	r2, r3
 8001a84:	4b31      	ldr	r3, [pc, #196]	; (8001b4c <Fun_recieve_and_determine_and_Sent+0xec>)
 8001a86:	701a      	strb	r2, [r3, #0]
 8001a88:	4b2d      	ldr	r3, [pc, #180]	; (8001b40 <Fun_recieve_and_determine_and_Sent+0xe0>)
 8001a8a:	2201      	movs	r2, #1
 8001a8c:	701a      	strb	r2, [r3, #0]
 8001a8e:	e008      	b.n	8001aa2 <Fun_recieve_and_determine_and_Sent+0x42>
	    case Comonent_VALUE:  Compomenent_VAL=(u8)UART_DATA;  Flag=Comonent_ID; break;
 8001a90:	4b2d      	ldr	r3, [pc, #180]	; (8001b48 <Fun_recieve_and_determine_and_Sent+0xe8>)
 8001a92:	781b      	ldrb	r3, [r3, #0]
 8001a94:	b2da      	uxtb	r2, r3
 8001a96:	4b2e      	ldr	r3, [pc, #184]	; (8001b50 <Fun_recieve_and_determine_and_Sent+0xf0>)
 8001a98:	701a      	strb	r2, [r3, #0]
 8001a9a:	4b29      	ldr	r3, [pc, #164]	; (8001b40 <Fun_recieve_and_determine_and_Sent+0xe0>)
 8001a9c:	2200      	movs	r2, #0
 8001a9e:	701a      	strb	r2, [r3, #0]
 8001aa0:	bf00      	nop
	}
	if(Flag_switch==Comonent_ID)
 8001aa2:	4b28      	ldr	r3, [pc, #160]	; (8001b44 <Fun_recieve_and_determine_and_Sent+0xe4>)
 8001aa4:	781b      	ldrb	r3, [r3, #0]
 8001aa6:	b2db      	uxtb	r3, r3
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d13d      	bne.n	8001b28 <Fun_recieve_and_determine_and_Sent+0xc8>
	{
		switch(Fun_ID)
 8001aac:	4b27      	ldr	r3, [pc, #156]	; (8001b4c <Fun_recieve_and_determine_and_Sent+0xec>)
 8001aae:	781b      	ldrb	r3, [r3, #0]
 8001ab0:	b2db      	uxtb	r3, r3
 8001ab2:	2b08      	cmp	r3, #8
 8001ab4:	d841      	bhi.n	8001b3a <Fun_recieve_and_determine_and_Sent+0xda>
 8001ab6:	a201      	add	r2, pc, #4	; (adr r2, 8001abc <Fun_recieve_and_determine_and_Sent+0x5c>)
 8001ab8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001abc:	08001ae1 	.word	0x08001ae1
 8001ac0:	08001ae9 	.word	0x08001ae9
 8001ac4:	08001af1 	.word	0x08001af1
 8001ac8:	08001af9 	.word	0x08001af9
 8001acc:	08001b01 	.word	0x08001b01
 8001ad0:	08001b09 	.word	0x08001b09
 8001ad4:	08001b11 	.word	0x08001b11
 8001ad8:	08001b19 	.word	0x08001b19
 8001adc:	08001b21 	.word	0x08001b21
		{
		  case LED_ROOM_1_STATE: FUN_Selected=fun_Direct;  break;
 8001ae0:	4b1c      	ldr	r3, [pc, #112]	; (8001b54 <Fun_recieve_and_determine_and_Sent+0xf4>)
 8001ae2:	4a1d      	ldr	r2, [pc, #116]	; (8001b58 <Fun_recieve_and_determine_and_Sent+0xf8>)
 8001ae4:	601a      	str	r2, [r3, #0]
 8001ae6:	e028      	b.n	8001b3a <Fun_recieve_and_determine_and_Sent+0xda>
		  case LED_ROOM_2_STATE: FUN_Selected=fun_Direct;  break;
 8001ae8:	4b1a      	ldr	r3, [pc, #104]	; (8001b54 <Fun_recieve_and_determine_and_Sent+0xf4>)
 8001aea:	4a1b      	ldr	r2, [pc, #108]	; (8001b58 <Fun_recieve_and_determine_and_Sent+0xf8>)
 8001aec:	601a      	str	r2, [r3, #0]
 8001aee:	e024      	b.n	8001b3a <Fun_recieve_and_determine_and_Sent+0xda>
		  case LED_ROOM_3_STATE: FUN_Selected=fun_Direct;  break;
 8001af0:	4b18      	ldr	r3, [pc, #96]	; (8001b54 <Fun_recieve_and_determine_and_Sent+0xf4>)
 8001af2:	4a19      	ldr	r2, [pc, #100]	; (8001b58 <Fun_recieve_and_determine_and_Sent+0xf8>)
 8001af4:	601a      	str	r2, [r3, #0]
 8001af6:	e020      	b.n	8001b3a <Fun_recieve_and_determine_and_Sent+0xda>
		  case LED_ROOM_4_STATE: FUN_Selected=fun_Direct;  break;
 8001af8:	4b16      	ldr	r3, [pc, #88]	; (8001b54 <Fun_recieve_and_determine_and_Sent+0xf4>)
 8001afa:	4a17      	ldr	r2, [pc, #92]	; (8001b58 <Fun_recieve_and_determine_and_Sent+0xf8>)
 8001afc:	601a      	str	r2, [r3, #0]
 8001afe:	e01c      	b.n	8001b3a <Fun_recieve_and_determine_and_Sent+0xda>
		  case FAN_ROOM_1_SPEED: FUN_Selected=fun_motor1;  break;
 8001b00:	4b14      	ldr	r3, [pc, #80]	; (8001b54 <Fun_recieve_and_determine_and_Sent+0xf4>)
 8001b02:	4a16      	ldr	r2, [pc, #88]	; (8001b5c <Fun_recieve_and_determine_and_Sent+0xfc>)
 8001b04:	601a      	str	r2, [r3, #0]
 8001b06:	e018      	b.n	8001b3a <Fun_recieve_and_determine_and_Sent+0xda>
		  case FAN_ROOM_2_SPEED: FUN_Selected=fun_motor2;  break;
 8001b08:	4b12      	ldr	r3, [pc, #72]	; (8001b54 <Fun_recieve_and_determine_and_Sent+0xf4>)
 8001b0a:	4a15      	ldr	r2, [pc, #84]	; (8001b60 <Fun_recieve_and_determine_and_Sent+0x100>)
 8001b0c:	601a      	str	r2, [r3, #0]
 8001b0e:	e014      	b.n	8001b3a <Fun_recieve_and_determine_and_Sent+0xda>
		  case FAN_ROOM_3_SPEED: FUN_Selected=fun_motor3;  break;
 8001b10:	4b10      	ldr	r3, [pc, #64]	; (8001b54 <Fun_recieve_and_determine_and_Sent+0xf4>)
 8001b12:	4a14      	ldr	r2, [pc, #80]	; (8001b64 <Fun_recieve_and_determine_and_Sent+0x104>)
 8001b14:	601a      	str	r2, [r3, #0]
 8001b16:	e010      	b.n	8001b3a <Fun_recieve_and_determine_and_Sent+0xda>
		  case FAN_ROOM_4_SPEED: FUN_Selected=fun_motor4;  break;
 8001b18:	4b0e      	ldr	r3, [pc, #56]	; (8001b54 <Fun_recieve_and_determine_and_Sent+0xf4>)
 8001b1a:	4a13      	ldr	r2, [pc, #76]	; (8001b68 <Fun_recieve_and_determine_and_Sent+0x108>)
 8001b1c:	601a      	str	r2, [r3, #0]
 8001b1e:	e00c      	b.n	8001b3a <Fun_recieve_and_determine_and_Sent+0xda>
		  case Open_Home_door: 	 FUN_Selected=fun_Direct;  break;
 8001b20:	4b0c      	ldr	r3, [pc, #48]	; (8001b54 <Fun_recieve_and_determine_and_Sent+0xf4>)
 8001b22:	4a0d      	ldr	r2, [pc, #52]	; (8001b58 <Fun_recieve_and_determine_and_Sent+0xf8>)
 8001b24:	601a      	str	r2, [r3, #0]
 8001b26:	e008      	b.n	8001b3a <Fun_recieve_and_determine_and_Sent+0xda>
		}
	}
		else if(Flag_switch==Comonent_VALUE)
 8001b28:	4b06      	ldr	r3, [pc, #24]	; (8001b44 <Fun_recieve_and_determine_and_Sent+0xe4>)
 8001b2a:	781b      	ldrb	r3, [r3, #0]
 8001b2c:	b2db      	uxtb	r3, r3
 8001b2e:	2b01      	cmp	r3, #1
 8001b30:	d103      	bne.n	8001b3a <Fun_recieve_and_determine_and_Sent+0xda>
		{
			FUN_Selected();
 8001b32:	4b08      	ldr	r3, [pc, #32]	; (8001b54 <Fun_recieve_and_determine_and_Sent+0xf4>)
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	4798      	blx	r3
		}
}
 8001b38:	e7ff      	b.n	8001b3a <Fun_recieve_and_determine_and_Sent+0xda>
 8001b3a:	bf00      	nop
 8001b3c:	bd80      	pop	{r7, pc}
 8001b3e:	bf00      	nop
 8001b40:	20000134 	.word	0x20000134
 8001b44:	20000132 	.word	0x20000132
 8001b48:	20000130 	.word	0x20000130
 8001b4c:	20000133 	.word	0x20000133
 8001b50:	20000131 	.word	0x20000131
 8001b54:	2000012c 	.word	0x2000012c
 8001b58:	080019a1 	.word	0x080019a1
 8001b5c:	080019e1 	.word	0x080019e1
 8001b60:	08001a01 	.word	0x08001a01
 8001b64:	08001a21 	.word	0x08001a21
 8001b68:	08001a41 	.word	0x08001a41

08001b6c <Fun_Clear>:
void Fun_Clear(){
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	af00      	add	r7, sp, #0
	CLCD_voidClearScreen();
 8001b70:	f7fe fd36 	bl	80005e0 <CLCD_voidClearScreen>
}
 8001b74:	bf00      	nop
 8001b76:	bd80      	pop	{r7, pc}

08001b78 <main>:
int main(void)
{
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	b086      	sub	sp, #24
 8001b7c:	af06      	add	r7, sp, #24
	RCC_InitSysClk();
 8001b7e:	f7ff fbbd 	bl	80012fc <RCC_InitSysClk>
	RCC_PeripheralClk(RCC_GPIOA, RCC_Enable);
 8001b82:	2101      	movs	r1, #1
 8001b84:	2022      	movs	r0, #34	; 0x22
 8001b86:	f7ff fbf9 	bl	800137c <RCC_PeripheralClk>
	RCC_PeripheralClk(RCC_GPIOB, RCC_Enable);
 8001b8a:	2101      	movs	r1, #1
 8001b8c:	2023      	movs	r0, #35	; 0x23
 8001b8e:	f7ff fbf5 	bl	800137c <RCC_PeripheralClk>
	RCC_PeripheralClk(RCC_AFIO,   RCC_Enable);
 8001b92:	2101      	movs	r1, #1
 8001b94:	2020      	movs	r0, #32
 8001b96:	f7ff fbf1 	bl	800137c <RCC_PeripheralClk>
	RCC_PeripheralClk(RCC_USART3, RCC_Enable);
 8001b9a:	2101      	movs	r1, #1
 8001b9c:	2052      	movs	r0, #82	; 0x52
 8001b9e:	f7ff fbed 	bl	800137c <RCC_PeripheralClk>
	RCC_PeripheralClk(RCC_USART2, RCC_Enable);
 8001ba2:	2101      	movs	r1, #1
 8001ba4:	2051      	movs	r0, #81	; 0x51
 8001ba6:	f7ff fbe9 	bl	800137c <RCC_PeripheralClk>
	RCC_PeripheralClk(RCC_TIM1, RCC_Enable);
 8001baa:	2101      	movs	r1, #1
 8001bac:	202b      	movs	r0, #43	; 0x2b
 8001bae:	f7ff fbe5 	bl	800137c <RCC_PeripheralClk>
	RCC_PeripheralClk(RCC_DMA1, RCC_Enable);
 8001bb2:	2101      	movs	r1, #1
 8001bb4:	2000      	movs	r0, #0
 8001bb6:	f7ff fbe1 	bl	800137c <RCC_PeripheralClk>

	GPIO_PORT_voidInit();
 8001bba:	f7ff fa11 	bl	8000fe0 <GPIO_PORT_voidInit>
	NVIC_Init();
 8001bbe:	f7ff fb71 	bl	80012a4 <NVIC_Init>
	UART_Init();
 8001bc2:	f7ff fddd 	bl	8001780 <UART_Init>
	TIMER1_Init(TIMER1_COUNT_UP,1);
 8001bc6:	2101      	movs	r1, #1
 8001bc8:	2000      	movs	r0, #0
 8001bca:	f7ff fc77 	bl	80014bc <TIMER1_Init>
	DMA_voidChannelInit(	DMA_CHANNEL6,
 8001bce:	2301      	movs	r3, #1
 8001bd0:	9304      	str	r3, [sp, #16]
 8001bd2:	2300      	movs	r3, #0
 8001bd4:	9303      	str	r3, [sp, #12]
 8001bd6:	2300      	movs	r3, #0
 8001bd8:	9302      	str	r3, [sp, #8]
 8001bda:	2300      	movs	r3, #0
 8001bdc:	9301      	str	r3, [sp, #4]
 8001bde:	2303      	movs	r3, #3
 8001be0:	9300      	str	r3, [sp, #0]
 8001be2:	2300      	movs	r3, #0
 8001be4:	2200      	movs	r2, #0
 8001be6:	2102      	movs	r1, #2
 8001be8:	2005      	movs	r0, #5
 8001bea:	f7fe fd59 	bl	80006a0 <DMA_voidChannelInit>
							DMA_DIST_INC_DISEN,
							DMA_TC_INT_DISABLE,
							circular
							);

	NVIC_EnableInterrupt(NVIC_EXTI0);
 8001bee:	2006      	movs	r0, #6
 8001bf0:	f7ff fb66 	bl	80012c0 <NVIC_EnableInterrupt>

	EXTI_Interrupt_Enable(EXTI0, RISING_EDGE);
 8001bf4:	2102      	movs	r1, #2
 8001bf6:	2000      	movs	r0, #0
 8001bf8:	f7ff f896 	bl	8000d28 <EXTI_Interrupt_Enable>
	EXTI_SetCallBack(EXTI0, Fun_Clear);
 8001bfc:	491e      	ldr	r1, [pc, #120]	; (8001c78 <main+0x100>)
 8001bfe:	2000      	movs	r0, #0
 8001c00:	f7ff f8e0 	bl	8000dc4 <EXTI_SetCallBack>

	AFIO_EXTI_Port_Source(AFIO_EXTI_LINE0, AFIO_PORTA);
 8001c04:	2100      	movs	r1, #0
 8001c06:	2000      	movs	r0, #0
 8001c08:	f7fe fd0e 	bl	8000628 <AFIO_EXTI_Port_Source>

	TIMER1_InitPwmChannel(TIMER1_PWM_CHANNEL1);
 8001c0c:	2000      	movs	r0, #0
 8001c0e:	f7ff fc79 	bl	8001504 <TIMER1_InitPwmChannel>
	TIMER1_InitPwmChannel(TIMER1_PWM_CHANNEL2);
 8001c12:	2001      	movs	r0, #1
 8001c14:	f7ff fc76 	bl	8001504 <TIMER1_InitPwmChannel>
	TIMER1_InitPwmChannel(TIMER1_PWM_CHANNEL3);
 8001c18:	2002      	movs	r0, #2
 8001c1a:	f7ff fc73 	bl	8001504 <TIMER1_InitPwmChannel>
	TIMER1_InitPwmChannel(TIMER1_PWM_CHANNEL4);
 8001c1e:	2003      	movs	r0, #3
 8001c20:	f7ff fc70 	bl	8001504 <TIMER1_InitPwmChannel>
	TIMER1_SetPWM(TIMER1_PWM_CHANNEL1, 100000,0 );
 8001c24:	2200      	movs	r2, #0
 8001c26:	4915      	ldr	r1, [pc, #84]	; (8001c7c <main+0x104>)
 8001c28:	2000      	movs	r0, #0
 8001c2a:	f7ff fd09 	bl	8001640 <TIMER1_SetPWM>
	TIMER1_SetPWM(TIMER1_PWM_CHANNEL2, 100000,0 );
 8001c2e:	2200      	movs	r2, #0
 8001c30:	4912      	ldr	r1, [pc, #72]	; (8001c7c <main+0x104>)
 8001c32:	2001      	movs	r0, #1
 8001c34:	f7ff fd04 	bl	8001640 <TIMER1_SetPWM>
	TIMER1_SetPWM(TIMER1_PWM_CHANNEL3, 100000,0 );
 8001c38:	2200      	movs	r2, #0
 8001c3a:	4910      	ldr	r1, [pc, #64]	; (8001c7c <main+0x104>)
 8001c3c:	2002      	movs	r0, #2
 8001c3e:	f7ff fcff 	bl	8001640 <TIMER1_SetPWM>
	TIMER1_SetPWM(TIMER1_PWM_CHANNEL4, 100000,0 );
 8001c42:	2200      	movs	r2, #0
 8001c44:	490d      	ldr	r1, [pc, #52]	; (8001c7c <main+0x104>)
 8001c46:	2003      	movs	r0, #3
 8001c48:	f7ff fcfa 	bl	8001640 <TIMER1_SetPWM>


	CLCD_voidInit();
 8001c4c:	f7fe fc10 	bl	8000470 <CLCD_voidInit>
	NVIC_EnableInterrupt(NVIC_USART3);
 8001c50:	2027      	movs	r0, #39	; 0x27
 8001c52:	f7ff fb35 	bl	80012c0 <NVIC_EnableInterrupt>
	UART_SetCallBack(UART_3, Fun_recieve_and_determine_and_Sent);
 8001c56:	490a      	ldr	r1, [pc, #40]	; (8001c80 <main+0x108>)
 8001c58:	2002      	movs	r0, #2
 8001c5a:	f7ff fe15 	bl	8001888 <UART_SetCallBack>
	NVIC_EnableInterrupt(NVIC_DMA1_CHANNEL6);
 8001c5e:	2010      	movs	r0, #16
 8001c60:	f7ff fb2e 	bl	80012c0 <NVIC_EnableInterrupt>
	DMA_ChannelTransfer(DMA_CHANNEL6,(u32)DMA_Transfeer_UART3_CH2,(u32)DMA_Recieve_UART2_CH6,4);
 8001c64:	2304      	movs	r3, #4
 8001c66:	2203      	movs	r2, #3
 8001c68:	2104      	movs	r1, #4
 8001c6a:	2005      	movs	r0, #5
 8001c6c:	f7fe ff80 	bl	8000b70 <DMA_ChannelTransfer>
	DMA_void_DMA_Enable(DMA_CHANNEL6);
 8001c70:	2005      	movs	r0, #5
 8001c72:	f7fe ff19 	bl	8000aa8 <DMA_void_DMA_Enable>

	while(1){
 8001c76:	e7fe      	b.n	8001c76 <main+0xfe>
 8001c78:	08001b6d 	.word	0x08001b6d
 8001c7c:	000186a0 	.word	0x000186a0
 8001c80:	08001a61 	.word	0x08001a61

08001c84 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001c84:	480d      	ldr	r0, [pc, #52]	; (8001cbc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001c86:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001c88:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001c8c:	480c      	ldr	r0, [pc, #48]	; (8001cc0 <LoopForever+0x6>)
  ldr r1, =_edata
 8001c8e:	490d      	ldr	r1, [pc, #52]	; (8001cc4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001c90:	4a0d      	ldr	r2, [pc, #52]	; (8001cc8 <LoopForever+0xe>)
  movs r3, #0
 8001c92:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001c94:	e002      	b.n	8001c9c <LoopCopyDataInit>

08001c96 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001c96:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001c98:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001c9a:	3304      	adds	r3, #4

08001c9c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001c9c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001c9e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001ca0:	d3f9      	bcc.n	8001c96 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001ca2:	4a0a      	ldr	r2, [pc, #40]	; (8001ccc <LoopForever+0x12>)
  ldr r4, =_ebss
 8001ca4:	4c0a      	ldr	r4, [pc, #40]	; (8001cd0 <LoopForever+0x16>)
  movs r3, #0
 8001ca6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001ca8:	e001      	b.n	8001cae <LoopFillZerobss>

08001caa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001caa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001cac:	3204      	adds	r2, #4

08001cae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001cae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001cb0:	d3fb      	bcc.n	8001caa <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001cb2:	f000 f811 	bl	8001cd8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001cb6:	f7ff ff5f 	bl	8001b78 <main>

08001cba <LoopForever>:

LoopForever:
  b LoopForever
 8001cba:	e7fe      	b.n	8001cba <LoopForever>
  ldr   r0, =_estack
 8001cbc:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 8001cc0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001cc4:	2000009c 	.word	0x2000009c
  ldr r2, =_sidata
 8001cc8:	08001d48 	.word	0x08001d48
  ldr r2, =_sbss
 8001ccc:	2000009c 	.word	0x2000009c
  ldr r4, =_ebss
 8001cd0:	20000138 	.word	0x20000138

08001cd4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001cd4:	e7fe      	b.n	8001cd4 <ADC1_2_IRQHandler>
	...

08001cd8 <__libc_init_array>:
 8001cd8:	b570      	push	{r4, r5, r6, lr}
 8001cda:	2600      	movs	r6, #0
 8001cdc:	4d0c      	ldr	r5, [pc, #48]	; (8001d10 <__libc_init_array+0x38>)
 8001cde:	4c0d      	ldr	r4, [pc, #52]	; (8001d14 <__libc_init_array+0x3c>)
 8001ce0:	1b64      	subs	r4, r4, r5
 8001ce2:	10a4      	asrs	r4, r4, #2
 8001ce4:	42a6      	cmp	r6, r4
 8001ce6:	d109      	bne.n	8001cfc <__libc_init_array+0x24>
 8001ce8:	f000 f81a 	bl	8001d20 <_init>
 8001cec:	2600      	movs	r6, #0
 8001cee:	4d0a      	ldr	r5, [pc, #40]	; (8001d18 <__libc_init_array+0x40>)
 8001cf0:	4c0a      	ldr	r4, [pc, #40]	; (8001d1c <__libc_init_array+0x44>)
 8001cf2:	1b64      	subs	r4, r4, r5
 8001cf4:	10a4      	asrs	r4, r4, #2
 8001cf6:	42a6      	cmp	r6, r4
 8001cf8:	d105      	bne.n	8001d06 <__libc_init_array+0x2e>
 8001cfa:	bd70      	pop	{r4, r5, r6, pc}
 8001cfc:	f855 3b04 	ldr.w	r3, [r5], #4
 8001d00:	4798      	blx	r3
 8001d02:	3601      	adds	r6, #1
 8001d04:	e7ee      	b.n	8001ce4 <__libc_init_array+0xc>
 8001d06:	f855 3b04 	ldr.w	r3, [r5], #4
 8001d0a:	4798      	blx	r3
 8001d0c:	3601      	adds	r6, #1
 8001d0e:	e7f2      	b.n	8001cf6 <__libc_init_array+0x1e>
 8001d10:	08001d40 	.word	0x08001d40
 8001d14:	08001d40 	.word	0x08001d40
 8001d18:	08001d40 	.word	0x08001d40
 8001d1c:	08001d44 	.word	0x08001d44

08001d20 <_init>:
 8001d20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001d22:	bf00      	nop
 8001d24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001d26:	bc08      	pop	{r3}
 8001d28:	469e      	mov	lr, r3
 8001d2a:	4770      	bx	lr

08001d2c <_fini>:
 8001d2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001d2e:	bf00      	nop
 8001d30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001d32:	bc08      	pop	{r3}
 8001d34:	469e      	mov	lr, r3
 8001d36:	4770      	bx	lr
